Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
from particula.base.gas import Gas
from particula.base.particle import Particle, create_particle_strategy
from particula.base.aerosol import Aerosol
from particula.base.process import ProcessSequence, MassCondensation, MassCoagulation

# Initialize an Aerosol instance
gas = Gas()
gas.add_species("Oxygen", 32.0)
gas.add_species("Nitrogen", 28.0)
strategy = create_particle_strategy('mass_based')
particle = Particle(strategy, np.array(
    [100, 200, 300], dtype=np.float64), 2.5, np.array([10, 20, 30], dtype=np.float64))
aerosol = Aerosol(gas, particle)

# Create process instances
mass_condensation = MassCondensation(other_settings="Some settings")
mass_coagulation = MassCoagulation(other_setting2="Some other settings")

# Apply a single process
condensed_aerosol = mass_condensation.execute(aerosol)
# Examine the changes
print("After condensation, particle distribution:",
      condensed_aerosol.particle.distribution)

# Chain processes using ProcessSequence
process_sequence = ProcessSequence()
process_sequence.add_process(mass_condensation)
process_sequence.add_process(mass_coagulation)


# Or using the | operator for a more intuitive chaining
# HUGE FAN OF THIS IDEA
process_sequence = mass_condensation | mass_coagulation

# Execute the sequence
final_aerosol = process_sequence.execute(aerosol)


print("After condensation and coagulation, particle distribution:",
      final_aerosol.particle.distribution)
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [0;32mIn[1], line 2[0m
[1;32m      1[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[0;32m----> 2[0m [38;5;28;01mfrom[39;00m [38;5;21;01mparticula[39;00m[38;5;21;01m.[39;00m[38;5;21;01mbase[39;00m[38;5;21;01m.[39;00m[38;5;21;01mgas[39;00m [38;5;28;01mimport[39;00m Gas
[1;32m      3[0m [38;5;28;01mfrom[39;00m [38;5;21;01mparticula[39;00m[38;5;21;01m.[39;00m[38;5;21;01mbase[39;00m[38;5;21;01m.[39;00m[38;5;21;01mparticle[39;00m [38;5;28;01mimport[39;00m Particle, create_particle_strategy
[1;32m      4[0m [38;5;28;01mfrom[39;00m [38;5;21;01mparticula[39;00m[38;5;21;01m.[39;00m[38;5;21;01mbase[39;00m[38;5;21;01m.[39;00m[38;5;21;01maerosol[39;00m [38;5;28;01mimport[39;00m Aerosol

[0;31mModuleNotFoundError[0m: No module named 'particula.base'

