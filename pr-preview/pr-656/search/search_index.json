{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Particula","text":"<p>Particula is a Python-based aerosol particle simulator.</p> <p>Our goal is to provide a robust aerosol simulation (including both gas and particle phases) that can be used to answer scientific questions arising from experiments and research ideas.</p>"},{"location":"#pypi-installation","title":"PyPI Installation","text":"<p>If your Python environment is already set up, you can install <code>Particula</code> via pip using the following command:</p> <pre><code>pip install particula\n</code></pre> <p>Setup Particula How to Guides Tutorials API Reference</p>"},{"location":"#contributing-to-particula","title":"Contributing to <code>Particula</code>","text":"<p>We are open to and we welcome contributions from anyone who wants to contribute to this project. We have a short contributing document in the root of the repository, which you can read. However, feel free to reach out with any questions or comments!</p>"},{"location":"#citation","title":"Citation","text":"<p>Particula [Computer software]. https://doi.org/10.5281/zenodo.6634653</p>"},{"location":"API/","title":"Particula Index","text":"<p>Auto-generated documentation index.</p> <p>A full list of Particula project modules.</p> <ul> <li>Particula<ul> <li>Abc Builder</li> <li>Abc Factory</li> <li>Activity<ul> <li>Activity Coefficients</li> <li>Bat Blending</li> <li>Bat Coefficients</li> <li>Convert Functional Group</li> <li>Gibbs</li> <li>Gibbs Mixing</li> <li>Phase Separation</li> <li>Ratio</li> <li>Species Density</li> <li>Water Activity</li> </ul> </li> <li>Aerosol</li> <li>Builder Mixin</li> <li>Dynamics<ul> <li>Coagulation<ul> <li>Brownian Kernel</li> <li>Charged Dimensionless Kernel</li> <li>Charged Kernel Strategy</li> <li>Coagulation Builder<ul> <li>BrownianCoagulationBuilder</li> <li>ChargedCoagulationBuilder</li> <li>Coagulation Builder Mixin</li> <li>CombineCoagulationStrategyBuilder</li> <li>TurbulentDNSCoagulationBuilder</li> <li>TurbulentShearCoagulationBuilder</li> </ul> </li> <li>Coagulation Factories</li> <li>Coagulation Rate</li> <li>Coagulation Strategy<ul> <li>BrownianCoagulationStrategy</li> <li>ChargedCoagulationStrategy</li> <li>CoagulationStrategyABC</li> <li>CombineCoagulationStrategy</li> <li>SedimentationCoagulationStrategy</li> <li>Trubulent Dns Coagulation Strategy</li> <li>TurbulentShearCoagulationStrategy</li> </ul> </li> <li>Particle Resolved Step<ul> <li>Particle Resolved Method</li> <li>Super Droplet Method</li> </ul> </li> <li>Sedimentation Kernel</li> <li>Turbulent Dns Kernel<ul> <li>G12 Radial Distribution Ao2008</li> <li>Phi Ao2008</li> <li>Psi Ao2008</li> <li>Radial Velocity Module</li> <li>Sigma Relative Velocity Ao2008</li> <li>Turbulent Dns Kernel Ao2008</li> <li>Velocity Correlation F2 Ao2008</li> <li>Velocity Correlation Terms Ao2008</li> </ul> </li> <li>Turbulent Shear Kernel</li> </ul> </li> <li>Condensation<ul> <li>Condensation Strategies</li> <li>Mass Transfer</li> </ul> </li> <li>Dilution</li> <li>Particle Process</li> <li>Properties<ul> <li>Wall Loss Coefficient</li> </ul> </li> <li>Wall Loss</li> </ul> </li> <li>Equilibria<ul> <li>Partitioning</li> </ul> </li> <li>Gas<ul> <li>Atmosphere</li> <li>Atmosphere Builders</li> <li>Properties<ul> <li>Concentration Function</li> <li>Dynamic Viscosity</li> <li>Fluid Rms Velocity</li> <li>Integral Scale Module</li> <li>Kinematic Viscosity</li> <li>Kolmogorov Module</li> <li>Mean Free Path</li> <li>Normalize Accel Variance</li> <li>Pressure Function</li> <li>Taylor Microscale Module</li> <li>Thermal Conductivity</li> <li>Vapor Pressure Module</li> </ul> </li> <li>Species</li> <li>Species Builders</li> <li>Species Factories</li> <li>Vapor Pressure Builders</li> <li>Vapor Pressure Factories</li> <li>Vapor Pressure Strategies</li> </ul> </li> <li>Logger Setup</li> <li>Particles<ul> <li>Activity Builders</li> <li>Activity Factories</li> <li>Activity Strategies</li> <li>Change Particle Representation</li> <li>Distribution Builders</li> <li>Distribution Factories</li> <li>Distribution Strategies</li> <li>Properties<ul> <li>Activity Module</li> <li>Aerodynamic Mobility Module</li> <li>Aerodynamic Size</li> <li>Collision Radius Module</li> <li>Coulomb Enhancement</li> <li>Diffusion Coefficient</li> <li>Diffusive Knudsen Module</li> <li>Friction Factor Module</li> <li>Inertia Time</li> <li>Kelvin Effect Module</li> <li>Knudsen Number Module</li> <li>Lognormal Size Distribution</li> <li>Mean Thermal Speed Module</li> <li>Partial Pressure Module</li> <li>Reynolds Number</li> <li>Settling Velocity</li> <li>Slip Correction Module</li> <li>Special Functions</li> <li>Stokes Number</li> <li>Vapor Correction Module</li> </ul> </li> <li>Representation</li> <li>Representation Builders</li> <li>Representation Factories</li> <li>Surface Builders</li> <li>Surface Factories</li> <li>Surface Strategies</li> </ul> </li> <li>Runnable</li> <li>Util<ul> <li>Arbitrary Round</li> <li>Colors</li> <li>Constants</li> <li>Converting<ul> <li>Convert Dtypes</li> <li>Convert Kappa Volumes</li> <li>Convert Mass Concentration</li> <li>Convert Mole Fraction</li> <li>Convert Size Distribution</li> <li>Convert Units</li> </ul> </li> <li>Lf2013 Coagulation<ul> <li>Src Lf2013 Coagulation</li> </ul> </li> <li>Machine Limit</li> <li>Reduced Quantity</li> <li>Refractive Index Mixing</li> <li>Validate Inputs</li> </ul> </li> </ul> </li> </ul>"},{"location":"API/particula/","title":"Particula","text":"<p>Particula Index / Particula</p> <p>Auto-generated documentation for particula module.</p>"},{"location":"API/particula/#attributes","title":"Attributes","text":"<ul> <li><code>logger</code> - setup the logger: setup()</li> </ul>"},{"location":"API/particula/#modules","title":"Modules","text":"<ul> <li>Abc Builder</li> <li>Abc Factory</li> <li>Activity</li> <li>Aerosol</li> <li>Builder Mixin</li> <li>Dynamics</li> <li>Equilibria</li> <li>Gas</li> <li>Logger Setup</li> <li>Particles</li> <li>Runnable</li> <li>Util</li> </ul>"},{"location":"API/particula/abc_builder/","title":"Abc Builder","text":"<p>Particula Index / Particula / Abc Builder</p> <p>Auto-generated documentation for particula.abc_builder module.</p>"},{"location":"API/particula/abc_builder/#builderabc","title":"BuilderABC","text":"<p>Show source in abc_builder.py:15</p> <p>Abstract base class for builders with common methods to check keys and set parameters from a dictionary.</p>"},{"location":"API/particula/abc_builder/#arguments","title":"Arguments","text":"<ul> <li>required_parameters : List of required parameters for the builder.</li> </ul>"},{"location":"API/particula/abc_builder/#raises","title":"Raises","text":"<ul> <li>ValueError : If any required key is missing during check_keys or     pre_build_check, or if trying to set an invalid parameter.</li> <li>Warning : If using default units for any parameter.</li> </ul>"},{"location":"API/particula/abc_builder/#references","title":"References","text":"<ul> <li>Builder Pattern : https://refactoring.guru/design-patterns/builder</li> </ul>"},{"location":"API/particula/abc_builder/#signature","title":"Signature","text":"<pre><code>class BuilderABC(ABC):\n    def __init__(self, required_parameters: Optional[list[str]] = None): ...\n</code></pre>"},{"location":"API/particula/abc_builder/#builderabcbuild","title":"BuilderABC().build","text":"<p>Show source in abc_builder.py:138</p> <p>Build and return the strategy object with the set parameters.</p>"},{"location":"API/particula/abc_builder/#returns","title":"Returns","text":"<ul> <li>strategy : The built strategy object.</li> </ul>"},{"location":"API/particula/abc_builder/#examples","title":"Examples","text":"<pre><code>builder = Builder()\nstrategy = builder.build()\n</code></pre>"},{"location":"API/particula/abc_builder/#signature_1","title":"Signature","text":"<pre><code>@abstractmethod\ndef build(self) -&gt; Any: ...\n</code></pre>"},{"location":"API/particula/abc_builder/#builderabccheck_keys","title":"BuilderABC().check_keys","text":"<p>Show source in abc_builder.py:34</p> <p>Check if the keys are present and valid.</p>"},{"location":"API/particula/abc_builder/#arguments_1","title":"Arguments","text":"<ul> <li>parameters : The parameters dictionary to check.</li> </ul>"},{"location":"API/particula/abc_builder/#raises_1","title":"Raises","text":"<ul> <li>ValueError : If any required key is missing or if trying to set     an invalid parameter.</li> </ul>"},{"location":"API/particula/abc_builder/#examples_1","title":"Examples","text":"<pre><code>builder = Builder()\nbuilder.check_keys({\n    \"parameter1\": 1,\n    \"parameter2\": 2,\n})\n</code></pre>"},{"location":"API/particula/abc_builder/#signature_2","title":"Signature","text":"<pre><code>def check_keys(self, parameters: dict[str, Any]): ...\n</code></pre>"},{"location":"API/particula/abc_builder/#builderabcpre_build_check","title":"BuilderABC().pre_build_check","text":"<p>Show source in abc_builder.py:117</p> <p>Check if all required attribute parameters are set before building.</p>"},{"location":"API/particula/abc_builder/#raises_2","title":"Raises","text":"<ul> <li>ValueError : If any required parameter is missing.</li> </ul>"},{"location":"API/particula/abc_builder/#examples_2","title":"Examples","text":"<pre><code>builder = Builder()\nbuilder.pre_build_check()\n</code></pre>"},{"location":"API/particula/abc_builder/#signature_3","title":"Signature","text":"<pre><code>def pre_build_check(self): ...\n</code></pre>"},{"location":"API/particula/abc_builder/#builderabcset_parameters","title":"BuilderABC().set_parameters","text":"<p>Show source in abc_builder.py:80</p> <p>Set parameters from a dictionary including optional suffix for units as '_units'.</p>"},{"location":"API/particula/abc_builder/#arguments_2","title":"Arguments","text":"<ul> <li>parameters : The parameters dictionary to set.</li> </ul>"},{"location":"API/particula/abc_builder/#returns_1","title":"Returns","text":"<ul> <li>The builder object with the set parameters.</li> </ul>"},{"location":"API/particula/abc_builder/#raises_3","title":"Raises","text":"<ul> <li>ValueError : If any required key is missing.</li> <li>Warning : If using default units for any parameter.</li> </ul>"},{"location":"API/particula/abc_builder/#examples_3","title":"Examples","text":"<pre><code>builder = Builder().set_parameters({\n    \"parameter1\": 1,\n    \"parameter2\": 2,\n    \"parameter2_units\": \"K\",\n})\n</code></pre>"},{"location":"API/particula/abc_builder/#signature_4","title":"Signature","text":"<pre><code>def set_parameters(self, parameters: dict[str, Any]): ...\n</code></pre>"},{"location":"API/particula/abc_factory/","title":"Abc Factory","text":"<p>Particula Index / Particula / Abc Factory</p> <p>Auto-generated documentation for particula.abc_factory module.</p>"},{"location":"API/particula/abc_factory/#attributes","title":"Attributes","text":"<ul> <li><code>BuilderT</code> - Define a generic type variable for the strategy type, to get good type hints: TypeVar('BuilderT')</li> </ul>"},{"location":"API/particula/abc_factory/#strategyfactoryabc","title":"StrategyFactoryABC","text":"<p>Show source in abc_factory.py:16</p> <p>Abstract base class for strategy factories.</p> <p>This class provides a generic interface for creating strategy objects using builder objects.</p>"},{"location":"API/particula/abc_factory/#methods","title":"Methods","text":"<ul> <li>get_builders : Returns the mapping of strategy types to builder     instances.</li> <li>get_strategy : Gets the strategy instance for the specified strategy.<ul> <li>strategy_type : Type of strategy to use.</li> <li>parameters : Parameters required for the     builder, dependent on the chosen strategy type.</li> </ul> </li> </ul>"},{"location":"API/particula/abc_factory/#signature","title":"Signature","text":"<pre><code>class StrategyFactoryABC(ABC, Generic[BuilderT, StrategyT]): ...\n</code></pre>"},{"location":"API/particula/abc_factory/#see-also","title":"See also","text":"<ul> <li>BuilderT</li> <li>StrategyT</li> </ul>"},{"location":"API/particula/abc_factory/#strategyfactoryabcget_builders","title":"StrategyFactoryABC().get_builders","text":"<p>Show source in abc_factory.py:32</p> <p>Returns the mapping of key names to builders, and their strategy build methods.</p>"},{"location":"API/particula/abc_factory/#returns","title":"Returns","text":"<p>A dictionary mapping strategy types to builder instances.</p>"},{"location":"API/particula/abc_factory/#examples","title":"Examples","text":"<p>``` py title= \"Coagulation Factory\" CoagulationFactory().get_builders()</p>"},{"location":"API/particula/abc_factory/#returns_1","title":"Returns:","text":"<pre><code>{\n    \"brownian\": BrownianCoagulationBuilder(),\n    \"charged\": ChargedCoagulationBuilder(),\n    \"turbulent_shear\": TurbulentShearCoagulationBuilder(),\n    \"turbulent_dns\": TurbulentDNSCoagulationBuilder(),\n    \"combine\": CombineCoagulationStrategyBuilder(),\n}\n</code></pre> <p>``` </p>"},{"location":"API/particula/abc_factory/#signature_1","title":"Signature","text":"<p><code>python @abstractmethod def get_builders(self) -&gt; Dict[str, BuilderT]: ...</code></p>"},{"location":"API/particula/abc_factory/#see-also_1","title":"See also","text":"<ul> <li>BuilderT</li> </ul>"},{"location":"API/particula/abc_factory/#strategyfactoryabcget_strategy","title":"StrategyFactoryABC().get_strategy","text":"<p>Show source in abc_factory.py:55</p> <p>Generic factory method to create objects instances.</p>"},{"location":"API/particula/abc_factory/#arguments","title":"Arguments","text":"<ul> <li>strategy_type : Type of strategy to use.</li> <li>parameters : Parameters required for the     builder, dependent on the chosen strategy type. Try building     with a builder first, to see if it is valid.</li> </ul>"},{"location":"API/particula/abc_factory/#returns_2","title":"Returns","text":"<p>An object, built from selected builder with parameters.</p>"},{"location":"API/particula/abc_factory/#raises","title":"Raises","text":"<ul> <li>ValueError : If an unknown key is provided.</li> <li>ValueError : If any required parameter is missing during     check_keys or pre_build_check, or if trying to set an     invalid parameter.</li> </ul>"},{"location":"API/particula/abc_factory/#signature_2","title":"Signature","text":"<pre><code>def get_strategy(\n    self, strategy_type: str, parameters: Optional[Dict[str, Any]] = None\n) -&gt; StrategyT: ...\n</code></pre>"},{"location":"API/particula/abc_factory/#see-also_2","title":"See also","text":"<ul> <li>StrategyT</li> </ul>"},{"location":"API/particula/aerosol/","title":"Aerosol","text":"<p>Particula Index / Particula / Aerosol</p> <p>Auto-generated documentation for particula.aerosol module.</p>"},{"location":"API/particula/aerosol/#aerosol_1","title":"Aerosol","text":"<p>Show source in aerosol.py:14</p> <p>Collection of Gas and Particle objects.</p> <p>A class for interacting with collections of Gas and Particle objects. Allows for the representation and manipulation of an aerosol, which is composed of various gases and particles.</p>"},{"location":"API/particula/aerosol/#attributes","title":"Attributes","text":"<ul> <li>atmosphere : The atmosphere containing the gases.</li> <li>particles : A list of particles in the aerosol.</li> </ul>"},{"location":"API/particula/aerosol/#methods","title":"Methods","text":"<ul> <li>iterate_gas : Returns an iterator for atmosphere species.</li> <li>iterate_particle : Returns an iterator for particle.</li> <li>replace_atmosphere : Replaces the current Atmosphere instance     with a new one.</li> <li>add_particle : Adds a Particle instance to the aerosol.</li> </ul>"},{"location":"API/particula/aerosol/#examples","title":"Examples","text":"Creating an Aerosol<pre><code>aerosol_instance = Aerosol(atmosphere, particles)\nprint(aerosol_instance)\n</code></pre> Iterating over the Aerosol<pre><code>aerosol_instance = Aerosol(atmosphere, particles)\nfor gas in aerosol_instance.iterate_gas():\n    print(gas)\nfor particle in aerosol_instance.iterate_particle():\n    print(particle)\n</code></pre>"},{"location":"API/particula/aerosol/#signature","title":"Signature","text":"<pre><code>class Aerosol:\n    def __init__(\n        self,\n        atmosphere: Atmosphere,\n        particles: Union[ParticleRepresentation, List[ParticleRepresentation]],\n    ): ...\n</code></pre>"},{"location":"API/particula/aerosol/#see-also","title":"See also","text":"<ul> <li>Atmosphere</li> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/aerosol/#aerosolstr","title":"Aerosol().str","text":"<p>Show source in aerosol.py:64</p> <p>Returns a string representation of the aerosol.</p>"},{"location":"API/particula/aerosol/#returns","title":"Returns","text":"<ul> <li>str : A string representation of the aerosol.</li> </ul>"},{"location":"API/particula/aerosol/#examples_1","title":"Examples","text":"<pre><code>aerosol_instance = Aerosol(atmosphere, particles)\nprint(aerosol_instance)\n</code></pre>"},{"location":"API/particula/aerosol/#signature_1","title":"Signature","text":"<pre><code>def __str__(self) -&gt; str: ...\n</code></pre>"},{"location":"API/particula/aerosol/#aerosoladd_particle","title":"Aerosol().add_particle","text":"<p>Show source in aerosol.py:127</p> <p>Adds a Particle instance to the aerosol.</p>"},{"location":"API/particula/aerosol/#arguments","title":"Arguments","text":"<ul> <li>particle : The Particle instance to add.</li> </ul>"},{"location":"API/particula/aerosol/#examples_2","title":"Examples","text":"Adding a Particle to the Aerosol<pre><code>aerosol_instance = Aerosol(atmosphere, particles)\nnew_particle = ParticleRepresentation()\naerosol_instance.add_particle(new_particle)\n</code></pre>"},{"location":"API/particula/aerosol/#signature_2","title":"Signature","text":"<pre><code>def add_particle(self, particle: ParticleRepresentation): ...\n</code></pre>"},{"location":"API/particula/aerosol/#see-also_1","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/aerosol/#aerosoliterate_gas","title":"Aerosol().iterate_gas","text":"<p>Show source in aerosol.py:82</p> <p>Returns an iterator for atmosphere species.</p>"},{"location":"API/particula/aerosol/#returns_1","title":"Returns","text":"<ul> <li>Iterator : An iterator over the gas species type.</li> </ul>"},{"location":"API/particula/aerosol/#examples_3","title":"Examples","text":"Iterating over the Aerosol gas<pre><code>aerosol_instance = Aerosol(atmosphere, particles)\nfor gas in aerosol_instance.iterate_gas():\n    print(gas)\n</code></pre>"},{"location":"API/particula/aerosol/#signature_3","title":"Signature","text":"<pre><code>def iterate_gas(self) -&gt; Iterator[GasSpecies]: ...\n</code></pre>"},{"location":"API/particula/aerosol/#see-also_2","title":"See also","text":"<ul> <li>GasSpecies</li> </ul>"},{"location":"API/particula/aerosol/#aerosoliterate_particle","title":"Aerosol().iterate_particle","text":"<p>Show source in aerosol.py:97</p> <p>Returns an iterator for particle.</p>"},{"location":"API/particula/aerosol/#returns_2","title":"Returns","text":"<ul> <li>Iterator : An iterator over the particle type.</li> </ul>"},{"location":"API/particula/aerosol/#examples_4","title":"Examples","text":"Iterating over the Aerosol particle<pre><code>aerosol_instance = Aerosol(atmosphere, particles)\nfor particle in aerosol_instance.iterate_particle():\n    print(particle)\n</code></pre>"},{"location":"API/particula/aerosol/#signature_4","title":"Signature","text":"<pre><code>def iterate_particle(self) -&gt; Iterator[ParticleRepresentation]: ...\n</code></pre>"},{"location":"API/particula/aerosol/#see-also_3","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/aerosol/#aerosolreplace_atmosphere","title":"Aerosol().replace_atmosphere","text":"<p>Show source in aerosol.py:112</p> <p>Replaces the current Atmosphere instance with a new one.</p>"},{"location":"API/particula/aerosol/#arguments_1","title":"Arguments","text":"<ul> <li>atmosphere : The instance to replace the current one.</li> </ul>"},{"location":"API/particula/aerosol/#examples_5","title":"Examples","text":"Replacing the Atmosphere in the Aerosol<pre><code>aerosol_instance = Aerosol(atmosphere, particles)\nnew_atmosphere = Atmosphere()\naerosol_instance.replace_atmosphere(new_atmosphere)\n</code></pre>"},{"location":"API/particula/aerosol/#signature_5","title":"Signature","text":"<pre><code>def replace_atmosphere(self, atmosphere: Atmosphere): ...\n</code></pre>"},{"location":"API/particula/aerosol/#see-also_4","title":"See also","text":"<ul> <li>Atmosphere</li> </ul>"},{"location":"API/particula/builder_mixin/","title":"Builder Mixin","text":"<p>Particula Index / Particula / Builder Mixin</p> <p>Auto-generated documentation for particula.builder_mixin module.</p>"},{"location":"API/particula/builder_mixin/#builderchargemixin","title":"BuilderChargeMixin","text":"<p>Show source in builder_mixin.py:147</p> <p>Mixin class for Builder classes to set charge and charge_units.</p>"},{"location":"API/particula/builder_mixin/#methods","title":"Methods","text":"<ul> <li><code>set_charge</code> - Set the charge attribute and units.</li> </ul>"},{"location":"API/particula/builder_mixin/#signature","title":"Signature","text":"<pre><code>class BuilderChargeMixin:\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#builderchargemixinset_charge","title":"BuilderChargeMixin().set_charge","text":"<p>Show source in builder_mixin.py:157</p> <p>Set the number of elemental charges on the particle.</p>"},{"location":"API/particula/builder_mixin/#arguments","title":"Arguments","text":"<p>charge : Charge of the particle [C]. charge_units : Not used. (for interface consistency)</p>"},{"location":"API/particula/builder_mixin/#signature_1","title":"Signature","text":"<pre><code>def set_charge(\n    self, charge: Union[float, NDArray[np.float64]], charge_units: Optional[str] = None\n): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#builderconcentrationmixin","title":"BuilderConcentrationMixin","text":"<p>Show source in builder_mixin.py:110</p> <p>Mixin class for Builder classes to set concentration and concentration_units.</p>"},{"location":"API/particula/builder_mixin/#arguments_1","title":"Arguments","text":"<p>default_units : Default units of concentration. Default is kg/m^3.</p>"},{"location":"API/particula/builder_mixin/#methods_1","title":"Methods","text":"<ul> <li><code>set_concentration</code> - Set the concentration attribute and units.</li> </ul>"},{"location":"API/particula/builder_mixin/#signature_2","title":"Signature","text":"<pre><code>class BuilderConcentrationMixin:\n    def __init__(self, default_units: str = \"kg/m^3\"): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#builderconcentrationmixinset_concentration","title":"BuilderConcentrationMixin().set_concentration","text":"<p>Show source in builder_mixin.py:125</p> <p>Set the concentration.</p>"},{"location":"API/particula/builder_mixin/#arguments_2","title":"Arguments","text":"<p>concentration : Concentration in the mixture. concentration_units : Units of the concentration.     Default is kg/m^3.</p>"},{"location":"API/particula/builder_mixin/#signature_3","title":"Signature","text":"<pre><code>@validate_inputs({\"concentration\": \"nonnegative\"})\ndef set_concentration(\n    self, concentration: Union[float, NDArray[np.float64]], concentration_units: str\n): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#builderdensitymixin","title":"BuilderDensityMixin","text":"<p>Show source in builder_mixin.py:17</p> <p>Mixin class for Builder classes to set density and density_units.</p>"},{"location":"API/particula/builder_mixin/#methods_2","title":"Methods","text":"<ul> <li><code>set_density</code> - Set the density attribute and units.</li> </ul>"},{"location":"API/particula/builder_mixin/#signature_4","title":"Signature","text":"<pre><code>class BuilderDensityMixin:\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#builderdensitymixinset_density","title":"BuilderDensityMixin().set_density","text":"<p>Show source in builder_mixin.py:27</p> <p>Set the density of the particle in kg/m^3.</p>"},{"location":"API/particula/builder_mixin/#arguments_3","title":"Arguments","text":"<p>density : Density of the particle. density_units : Units of the density. Default is kg/m^3</p>"},{"location":"API/particula/builder_mixin/#signature_5","title":"Signature","text":"<pre><code>@validate_inputs({\"density\": \"positive\"})\ndef set_density(\n    self, density: Union[float, NDArray[np.float64]], density_units: str\n): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#builderlognormalmixin","title":"BuilderLognormalMixin","text":"<p>Show source in builder_mixin.py:331</p> <p>Mixin class for Builder classes to set lognormal distributions.</p>"},{"location":"API/particula/builder_mixin/#methods_3","title":"Methods","text":"<ul> <li><code>set_mode</code> - Set the mode attribute and units.</li> <li><code>set_geometric_standard_deviation</code> - Set the geometric standard deviation     attribute and units.</li> <li><code>set_number_concentration</code> - Set the number concentration attribute and     units.</li> </ul>"},{"location":"API/particula/builder_mixin/#signature_6","title":"Signature","text":"<pre><code>class BuilderLognormalMixin:\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#builderlognormalmixinset_geometric_standard_deviation","title":"BuilderLognormalMixin().set_geometric_standard_deviation","text":"<p>Show source in builder_mixin.py:365</p> <p>Set the geometric standard deviation for the distribution.</p>"},{"location":"API/particula/builder_mixin/#arguments_4","title":"Arguments","text":"<p>geometric_standard_deviation : The geometric standard deviation for     the radius. geometric_standard_deviation_units : Optional, ignored units for     geometric standard deviation [dimensionless].</p>"},{"location":"API/particula/builder_mixin/#signature_7","title":"Signature","text":"<pre><code>@validate_inputs({\"geometric_standard_deviation\": \"positive\"})\ndef set_geometric_standard_deviation(\n    self,\n    geometric_standard_deviation: NDArray[np.float64],\n    geometric_standard_deviation_units: Optional[str] = None,\n): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#builderlognormalmixinset_mode","title":"BuilderLognormalMixin().set_mode","text":"<p>Show source in builder_mixin.py:347</p> <p>Set the mode for distribution.</p>"},{"location":"API/particula/builder_mixin/#arguments_5","title":"Arguments","text":"<p>mode : The modes for the radius. mode_units : The units for the modes, default is [m].</p>"},{"location":"API/particula/builder_mixin/#signature_8","title":"Signature","text":"<pre><code>@validate_inputs({\"mode\": \"positive\"})\ndef set_mode(self, mode: NDArray[np.float64], mode_units: str): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#builderlognormalmixinset_number_concentration","title":"BuilderLognormalMixin().set_number_concentration","text":"<p>Show source in builder_mixin.py:384</p> <p>Set the number concentration for the distribution.</p>"},{"location":"API/particula/builder_mixin/#arguments_6","title":"Arguments","text":"<p>number_concentration : The number concentration for the radius. number_concentration_units : The units for the number     concentration, \"1/m^3\".</p>"},{"location":"API/particula/builder_mixin/#signature_9","title":"Signature","text":"<pre><code>@validate_inputs({\"number_concentration\": \"positive\"})\ndef set_number_concentration(\n    self, number_concentration: NDArray[np.float64], number_concentration_units: str\n): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#buildermassmixin","title":"BuilderMassMixin","text":"<p>Show source in builder_mixin.py:174</p> <p>Mixin class for Builder classes to set mass and mass_units.</p>"},{"location":"API/particula/builder_mixin/#methods_4","title":"Methods","text":"<ul> <li><code>set_mass</code> - Set the mass attribute and units.</li> </ul>"},{"location":"API/particula/builder_mixin/#signature_10","title":"Signature","text":"<pre><code>class BuilderMassMixin:\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#buildermassmixinset_mass","title":"BuilderMassMixin().set_mass","text":"<p>Show source in builder_mixin.py:184</p> <p>Set the mass of the particle in kg.</p>"},{"location":"API/particula/builder_mixin/#arguments_7","title":"Arguments","text":"<p>mass : Mass of the particle. mass_units : Units of the mass. Default is kg.</p>"},{"location":"API/particula/builder_mixin/#signature_11","title":"Signature","text":"<pre><code>@validate_inputs({\"mass\": \"nonnegative\"})\ndef set_mass(self, mass: Union[float, NDArray[np.float64]], mass_units: str): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#buildermolarmassmixin","title":"BuilderMolarMassMixin","text":"<p>Show source in builder_mixin.py:78</p> <p>Mixin class for Builder classes to set molar_mass and molar_mass_units.</p>"},{"location":"API/particula/builder_mixin/#methods_5","title":"Methods","text":"<ul> <li><code>set_molar_mass</code> - Set the molar_mass attribute and units.</li> </ul>"},{"location":"API/particula/builder_mixin/#signature_12","title":"Signature","text":"<pre><code>class BuilderMolarMassMixin:\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#buildermolarmassmixinset_molar_mass","title":"BuilderMolarMassMixin().set_molar_mass","text":"<p>Show source in builder_mixin.py:88</p> <p>Set the molar mass of the particle in kg/mol.</p>"},{"location":"API/particula/builder_mixin/#arguments_8","title":"Arguments","text":"<p>molar_mass : Molar mass of the particle. molar_mass_units : Units of the molar mass. Default is kg/mol.</p>"},{"location":"API/particula/builder_mixin/#signature_13","title":"Signature","text":"<pre><code>@validate_inputs({\"molar_mass\": \"positive\"})\ndef set_molar_mass(\n    self, molar_mass: Union[float, NDArray[np.float64]], molar_mass_units: str\n): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#builderparticleresolvedcountmixin","title":"BuilderParticleResolvedCountMixin","text":"<p>Show source in builder_mixin.py:406</p> <p>Mixin class for Builder classes to set particle_resolved_count.</p>"},{"location":"API/particula/builder_mixin/#methods_6","title":"Methods","text":"<ul> <li><code>set_particle_resolved_count</code> - Set the number of particles to resolve.</li> </ul>"},{"location":"API/particula/builder_mixin/#signature_14","title":"Signature","text":"<pre><code>class BuilderParticleResolvedCountMixin:\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#builderparticleresolvedcountmixinset_particle_resolved_count","title":"BuilderParticleResolvedCountMixin().set_particle_resolved_count","text":"<p>Show source in builder_mixin.py:416</p> <p>Set the number of particles to resolve.</p>"},{"location":"API/particula/builder_mixin/#arguments_9","title":"Arguments","text":"<p>particle_resolved_count : The number of particles to resolve. particle_resolved_count_units : Ignored units for particle     resolved.</p>"},{"location":"API/particula/builder_mixin/#signature_15","title":"Signature","text":"<pre><code>@validate_inputs({\"particle_resolved_count\": \"positive\"})\ndef set_particle_resolved_count(\n    self,\n    particle_resolved_count: int,\n    particle_resolved_count_units: Optional[str] = None,\n): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#builderpressuremixin","title":"BuilderPressureMixin","text":"<p>Show source in builder_mixin.py:298</p> <p>Mixin class for AtmosphereBuilder to set total pressure.</p>"},{"location":"API/particula/builder_mixin/#methods_7","title":"Methods","text":"<ul> <li><code>set_pressure</code> - Set the total pressure attribute and units.</li> </ul>"},{"location":"API/particula/builder_mixin/#signature_16","title":"Signature","text":"<pre><code>class BuilderPressureMixin:\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#builderpressuremixinset_pressure","title":"BuilderPressureMixin().set_pressure","text":"<p>Show source in builder_mixin.py:308</p> <p>Set the total pressure of the atmosphere.</p>"},{"location":"API/particula/builder_mixin/#arguments_10","title":"Arguments","text":"<p>pressure : Total pressure of the gas mixture. pressure_units : Units of the pressure. Options include     'Pa', 'kPa', 'MPa', 'psi', 'bar', 'atm'. Default is 'Pa'.</p>"},{"location":"API/particula/builder_mixin/#returns","title":"Returns","text":"<ul> <li><code>AtmosphereBuilderMixin</code> - This object instance with updated pressure.</li> </ul>"},{"location":"API/particula/builder_mixin/#signature_17","title":"Signature","text":"<pre><code>@validate_inputs({\"pressure\": \"nonnegative\"})\ndef set_pressure(\n    self, pressure: Union[float, NDArray[np.float64]], pressure_units: str\n): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#builderradiusmixin","title":"BuilderRadiusMixin","text":"<p>Show source in builder_mixin.py:232</p> <p>Mixin class for Builder classes to set radius and radius_units.</p>"},{"location":"API/particula/builder_mixin/#methods_8","title":"Methods","text":"<ul> <li><code>set_radius</code> - Set the radius attribute and units.</li> </ul>"},{"location":"API/particula/builder_mixin/#signature_18","title":"Signature","text":"<pre><code>class BuilderRadiusMixin:\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#builderradiusmixinset_radius","title":"BuilderRadiusMixin().set_radius","text":"<p>Show source in builder_mixin.py:242</p> <p>Set the radius of the particle in meters.</p>"},{"location":"API/particula/builder_mixin/#arguments_11","title":"Arguments","text":"<p>radius : Radius of the particle. radius_units : Units of the radius. Default is m.</p>"},{"location":"API/particula/builder_mixin/#signature_19","title":"Signature","text":"<pre><code>@validate_inputs({\"radius\": \"nonnegative\"})\ndef set_radius(self, radius: Union[float, NDArray[np.float64]], radius_units: str): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#buildersurfacetensionmixin","title":"BuilderSurfaceTensionMixin","text":"<p>Show source in builder_mixin.py:47</p> <p>Mixin class for Builder classes to set surface_tension.</p>"},{"location":"API/particula/builder_mixin/#methods_9","title":"Methods","text":"<ul> <li><code>set_surface_tension</code> - Set the surface_tension attribute and units.</li> </ul>"},{"location":"API/particula/builder_mixin/#signature_20","title":"Signature","text":"<pre><code>class BuilderSurfaceTensionMixin:\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#buildersurfacetensionmixinset_surface_tension","title":"BuilderSurfaceTensionMixin().set_surface_tension","text":"<p>Show source in builder_mixin.py:57</p> <p>Set the surface tension of the particle in N/m.</p>"},{"location":"API/particula/builder_mixin/#arguments_12","title":"Arguments","text":"<p>surface_tension : Surface tension of the particle. surface_tension_units : Surface tension units. Default is N/m.</p>"},{"location":"API/particula/builder_mixin/#signature_21","title":"Signature","text":"<pre><code>@validate_inputs({\"surface_tension\": \"positive\"})\ndef set_surface_tension(\n    self, surface_tension: Union[float, NDArray[np.float64]], surface_tension_units: str\n): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#buildertemperaturemixin","title":"BuilderTemperatureMixin","text":"<p>Show source in builder_mixin.py:261</p> <p>Mixin class for AtmosphereBuilder to set temperature.</p>"},{"location":"API/particula/builder_mixin/#methods_10","title":"Methods","text":"<ul> <li><code>set_temperature</code> - Set the temperature attribute and units.</li> </ul>"},{"location":"API/particula/builder_mixin/#signature_22","title":"Signature","text":"<pre><code>class BuilderTemperatureMixin:\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#buildertemperaturemixinset_temperature","title":"BuilderTemperatureMixin().set_temperature","text":"<p>Show source in builder_mixin.py:271</p> <p>Set the temperature of the atmosphere.</p>"},{"location":"API/particula/builder_mixin/#arguments_13","title":"Arguments","text":"<p>temperature : Temperature of the gas mixture. temperature_units : Units of the temperature.     Options include 'degC', 'degF', 'degR', 'K'. Default is 'K'.</p>"},{"location":"API/particula/builder_mixin/#returns_1","title":"Returns","text":"<ul> <li><code>AtmosphereBuilderMixin</code> - This object instance with updated     temperature.</li> </ul>"},{"location":"API/particula/builder_mixin/#raises","title":"Raises","text":"<ul> <li><code>ValueError</code> - If the converted temperature is below absolute zero.</li> </ul>"},{"location":"API/particula/builder_mixin/#signature_23","title":"Signature","text":"<pre><code>@validate_inputs({\"temperature\": \"finite\"})\ndef set_temperature(self, temperature: float, temperature_units: str = \"K\"): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#buildervolumemixin","title":"BuilderVolumeMixin","text":"<p>Show source in builder_mixin.py:203</p> <p>Mixin class for Builder classes to set volume and volume_units.</p>"},{"location":"API/particula/builder_mixin/#methods_11","title":"Methods","text":"<ul> <li><code>set_volume</code> - Set the volume attribute and units.</li> </ul>"},{"location":"API/particula/builder_mixin/#signature_24","title":"Signature","text":"<pre><code>class BuilderVolumeMixin:\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/builder_mixin/#buildervolumemixinset_volume","title":"BuilderVolumeMixin().set_volume","text":"<p>Show source in builder_mixin.py:213</p> <p>Set the volume in m^3.</p>"},{"location":"API/particula/builder_mixin/#arguments_14","title":"Arguments","text":"<p>volume : Volume. volume_units : Units of the volume. Default is m^3.</p>"},{"location":"API/particula/builder_mixin/#signature_25","title":"Signature","text":"<pre><code>@validate_inputs({\"volume\": \"nonnegative\"})\ndef set_volume(self, volume: Union[float, NDArray[np.float64]], volume_units: str): ...\n</code></pre>"},{"location":"API/particula/logger_setup/","title":"Logger Setup","text":"<p>Particula Index / Particula / Logger Setup</p> <p>Auto-generated documentation for particula.logger_setup module.</p>"},{"location":"API/particula/logger_setup/#attributes","title":"Attributes","text":"<ul> <li> <p><code>current_dir</code> - get path of the current directory: os.path.dirname(os.path.abspath(file))</p> </li> <li> <p><code>log_dir</code> - add the logging directory to the path: os.path.join(current_dir, 'logging')</p> </li> </ul>"},{"location":"API/particula/logger_setup/#setup","title":"setup","text":"<p>Show source in logger_setup.py:58</p> <p>Setup for logging in the particula package.</p>"},{"location":"API/particula/logger_setup/#signature","title":"Signature","text":"<pre><code>def setup(): ...\n</code></pre>"},{"location":"API/particula/runnable/","title":"Runnable","text":"<p>Particula Index / Particula / Runnable</p> <p>Auto-generated documentation for particula.runnable module.</p>"},{"location":"API/particula/runnable/#runnable_1","title":"Runnable","text":"<p>Show source in runnable.py:9</p> <p>Runnable process that can modify an aerosol instance.</p> <p>Parameters: None</p>"},{"location":"API/particula/runnable/#methods","title":"Methods","text":"<ul> <li><code>-</code> rate - Return the rate of the process.</li> <li><code>-</code> execute - Execute the process and modify the aerosol instance.</li> <li><code>-</code> or - Chain this process with another process using the | operator.</li> </ul>"},{"location":"API/particula/runnable/#signature","title":"Signature","text":"<pre><code>class Runnable(ABC): ...\n</code></pre>"},{"location":"API/particula/runnable/#runnableor","title":"Runnable().or","text":"<p>Show source in runnable.py:44</p> <p>Chain this process with another process using the | operator.</p>"},{"location":"API/particula/runnable/#signature_1","title":"Signature","text":"<pre><code>def __or__(self, other: \"Runnable\"): ...\n</code></pre>"},{"location":"API/particula/runnable/#runnableexecute","title":"Runnable().execute","text":"<p>Show source in runnable.py:27</p> <p>Execute the process and modify the aerosol instance.</p>"},{"location":"API/particula/runnable/#arguments","title":"Arguments","text":"<ul> <li><code>aerosol</code> Aerosol - The aerosol instance to modify.</li> <li><code>time_step</code> float - The time step for the process in seconds.</li> <li><code>sub_steps</code> int - The number of sub-steps to use for the process,     default is 1. Which means the full time step is used. A value     of 2 would mean the time step is divided into two sub-steps.</li> </ul>"},{"location":"API/particula/runnable/#signature_2","title":"Signature","text":"<pre><code>@abstractmethod\ndef execute(self, aerosol: Aerosol, time_step: float, sub_steps: int = 1) -&gt; Aerosol: ...\n</code></pre>"},{"location":"API/particula/runnable/#see-also","title":"See also","text":"<ul> <li>Aerosol</li> </ul>"},{"location":"API/particula/runnable/#runnablerate","title":"Runnable().rate","text":"<p>Show source in runnable.py:20</p> <p>Return the rate of the process.</p>"},{"location":"API/particula/runnable/#arguments_1","title":"Arguments","text":"<ul> <li>aerosol (Aerosol): The aerosol instance to modify.</li> </ul>"},{"location":"API/particula/runnable/#signature_3","title":"Signature","text":"<pre><code>@abstractmethod\ndef rate(self, aerosol: Aerosol) -&gt; Any: ...\n</code></pre>"},{"location":"API/particula/runnable/#see-also_1","title":"See also","text":"<ul> <li>Aerosol</li> </ul>"},{"location":"API/particula/runnable/#runnablesequence","title":"RunnableSequence","text":"<p>Show source in runnable.py:53</p> <p>A sequence of processes to be executed in order.</p>"},{"location":"API/particula/runnable/#attributes","title":"Attributes","text":"<ul> <li>processes (List[Runnable]): A list of RunnableProcess objects.</li> </ul>"},{"location":"API/particula/runnable/#methods_1","title":"Methods","text":"<ul> <li><code>-</code> add_process - Add a process to the sequence.</li> <li><code>-</code> execute - Execute the sequence of processes on an aerosol instance.</li> <li><code>-</code> or - Add a process to the sequence using the | operator.</li> </ul>"},{"location":"API/particula/runnable/#signature_4","title":"Signature","text":"<pre><code>class RunnableSequence:\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/runnable/#runnablesequenceor","title":"RunnableSequence().or","text":"<p>Show source in runnable.py:79</p> <p>Add a runnable to the sequence using the | operator.</p>"},{"location":"API/particula/runnable/#signature_5","title":"Signature","text":"<pre><code>def __or__(self, process: Runnable): ...\n</code></pre>"},{"location":"API/particula/runnable/#see-also_2","title":"See also","text":"<ul> <li>Runnable</li> </ul>"},{"location":"API/particula/runnable/#runnablesequenceadd_process","title":"RunnableSequence().add_process","text":"<p>Show source in runnable.py:68</p> <p>Add a process to the sequence.</p>"},{"location":"API/particula/runnable/#signature_6","title":"Signature","text":"<pre><code>def add_process(self, process: Runnable): ...\n</code></pre>"},{"location":"API/particula/runnable/#see-also_3","title":"See also","text":"<ul> <li>Runnable</li> </ul>"},{"location":"API/particula/runnable/#runnablesequenceexecute","title":"RunnableSequence().execute","text":"<p>Show source in runnable.py:72</p> <p>Execute the sequence of runnables on an aerosol instance.</p>"},{"location":"API/particula/runnable/#signature_7","title":"Signature","text":"<pre><code>def execute(self, aerosol: Aerosol, time_step: float) -&gt; Aerosol: ...\n</code></pre>"},{"location":"API/particula/runnable/#see-also_4","title":"See also","text":"<ul> <li>Aerosol</li> </ul>"},{"location":"API/particula/activity/","title":"Activity","text":"<p>Particula Index / Particula / Activity</p> <p>Auto-generated documentation for particula.activity module.</p>"},{"location":"API/particula/activity/#modules","title":"Modules","text":"<ul> <li>Activity Coefficients</li> <li>Bat Blending</li> <li>Bat Coefficients</li> <li>Convert Functional Group</li> <li>Gibbs</li> <li>Gibbs Mixing</li> <li>Phase Separation</li> <li>Ratio</li> <li>Species Density</li> <li>Water Activity</li> </ul>"},{"location":"API/particula/activity/activity_coefficients/","title":"Activity Coefficients","text":"<p>Particula Index / Particula / Activity / Activity Coefficients</p> <p>Auto-generated documentation for particula.activity.activity_coefficients module.</p>"},{"location":"API/particula/activity/activity_coefficients/#bat_activity_coefficients","title":"bat_activity_coefficients","text":"<p>Show source in activity_coefficients.py:23</p> <p>Calculate the activity coefficients for water and organic matter in organic-water mixtures.</p>"},{"location":"API/particula/activity/activity_coefficients/#arguments","title":"Arguments","text":"<ul> <li>molar_mass_ratio : Ratio of the molecular weight of water to the   molecular weight of organic matter.</li> <li>organic_mole_fraction : Molar fraction of organic matter in the   mixture.</li> <li>oxygen2carbon : Oxygen to carbon ratio in the organic compound.</li> <li>density : Density of the mixture, in kg/m^3.</li> <li>functional_group : Optional functional group(s) of the organic   compound, if applicable.</li> </ul>"},{"location":"API/particula/activity/activity_coefficients/#returns","title":"Returns","text":"<ul> <li>A tuple containing the activity of water, activity   of organic matter, mass fraction of water, and mass   fraction of organic matter, gamma_water (activity coefficient),   and gamma_organic (activity coefficient).</li> </ul>"},{"location":"API/particula/activity/activity_coefficients/#signature","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"molar_mass_ratio\": \"positive\",\n        \"organic_mole_fraction\": \"nonnegative\",\n        \"density\": \"positive\",\n    }\n)\ndef bat_activity_coefficients(\n    molar_mass_ratio: Union[float, NDArray[np.float64]],\n    organic_mole_fraction: Union[float, NDArray[np.float64]],\n    oxygen2carbon: Union[float, NDArray[np.float64]],\n    density: Union[float, NDArray[np.float64]],\n    functional_group: Optional[Union[str, List[str]]] = None,\n) -&gt; Tuple[\n    Union[float, NDArray[np.float64]],\n    Union[float, NDArray[np.float64]],\n    Union[float, NDArray[np.float64]],\n    Union[float, NDArray[np.float64]],\n    Union[float, NDArray[np.float64]],\n    Union[float, NDArray[np.float64]],\n]: ...\n</code></pre>"},{"location":"API/particula/activity/bat_blending/","title":"Bat Blending","text":"<p>Particula Index / Particula / Activity / Bat Blending</p> <p>Auto-generated documentation for particula.activity.bat_blending module.</p>"},{"location":"API/particula/activity/bat_blending/#_calculate_blending_weights","title":"_calculate_blending_weights","text":"<p>Show source in bat_blending.py:62</p> <p>Helper function to calculate blending weights for a single value of oxygen2carbon.</p>"},{"location":"API/particula/activity/bat_blending/#arguments","title":"Arguments","text":"<ul> <li>oxygen2carbon : The oxygen to carbon ratio.</li> <li>oxygen2carbon_ml : The single-phase oxygen to carbon ratio.</li> </ul>"},{"location":"API/particula/activity/bat_blending/#returns","title":"Returns","text":"<ul> <li>blending_weights : List of blending weights for the BAT model     in the low, mid, and high oxygen2carbon regions.</li> </ul>"},{"location":"API/particula/activity/bat_blending/#signature","title":"Signature","text":"<pre><code>def _calculate_blending_weights(\n    oxygen2carbon: float, oxygen2carbon_ml: float\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/activity/bat_blending/#bat_blending_weights","title":"bat_blending_weights","text":"<p>Show source in bat_blending.py:20</p> <p>Function to estimate the blending weights for the BAT model.</p>"},{"location":"API/particula/activity/bat_blending/#arguments_1","title":"Arguments","text":"<ul> <li>molar_mass_ratio : The molar mass ratio of water to organic     matter.</li> <li>oxygen2carbon : The oxygen to carbon ratio.</li> </ul>"},{"location":"API/particula/activity/bat_blending/#returns_1","title":"Returns","text":"<ul> <li>blending_weights : Array of blending weights for the BAT model     in the low, mid, and high oxygen2carbon regions. The weights     size is (3,) if oxygen2carbon is a single value, or (n, 3)     if oxygen2carbon is an array of size n.</li> </ul>"},{"location":"API/particula/activity/bat_blending/#signature_1","title":"Signature","text":"<pre><code>@validate_inputs({\"molar_mass_ratio\": \"positive\", \"oxygen2carbon\": \"nonnegative\"})\ndef bat_blending_weights(\n    molar_mass_ratio: Union[float, NDArray[np.float64]],\n    oxygen2carbon: Union[float, NDArray[np.float64]],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/activity/bat_coefficients/","title":"Bat Coefficients","text":"<p>Particula Index / Particula / Activity / Bat Coefficients</p> <p>Auto-generated documentation for particula.activity.bat_coefficients module.</p>"},{"location":"API/particula/activity/bat_coefficients/#fitvalues","title":"FitValues","text":"<p>Show source in bat_coefficients.py:17</p> <p>Named tuple for the fit values for the activity model.</p>"},{"location":"API/particula/activity/bat_coefficients/#signature","title":"Signature","text":"<pre><code>class FitValues(NamedTuple): ...\n</code></pre>"},{"location":"API/particula/activity/bat_coefficients/#coefficients_c","title":"coefficients_c","text":"<p>Show source in bat_coefficients.py:46</p> <p>Coefficients for activity model, see Gorkowski (2019). equation S1 S2.</p>"},{"location":"API/particula/activity/bat_coefficients/#arguments","title":"Arguments","text":"<ul> <li>molar_mass_ratio : The molar mass ratio of water to organic   matter.</li> <li>oxygen2carbon : The oxygen to carbon ratio.</li> <li>fit_values : The fit values for the activity model.</li> </ul>"},{"location":"API/particula/activity/bat_coefficients/#returns","title":"Returns","text":"<ul> <li>The coefficients for the activity model.</li> </ul>"},{"location":"API/particula/activity/bat_coefficients/#signature_1","title":"Signature","text":"<pre><code>def coefficients_c(\n    molar_mass_ratio: Union[float, NDArray[np.float64]],\n    oxygen2carbon: Union[float, NDArray[np.float64]],\n    fit_values: List[float],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/activity/convert_functional_group/","title":"Convert Functional Group","text":"<p>Particula Index / Particula / Activity / Convert Functional Group</p> <p>Auto-generated documentation for particula.activity.convert_functional_group module.</p>"},{"location":"API/particula/activity/convert_functional_group/#convert_to_oh_equivalent","title":"convert_to_oh_equivalent","text":"<p>Show source in convert_functional_group.py:17</p> <p>Just a pass through now, but will add the oh equivalent conversion.</p>"},{"location":"API/particula/activity/convert_functional_group/#arguments","title":"Arguments","text":"<ul> <li>oxygen2carbon : The oxygen to carbon ratio.</li> <li>molar_mass_ratio : The molar mass ratio of water to organic   matter.</li> <li>functional_group : Optional functional group(s) of the organic   compound, if applicable.</li> </ul>"},{"location":"API/particula/activity/convert_functional_group/#returns","title":"Returns","text":"<ul> <li>A tuple containing the converted oxygen to carbon ratio and   molar mass ratio.</li> </ul>"},{"location":"API/particula/activity/convert_functional_group/#signature","title":"Signature","text":"<pre><code>def convert_to_oh_equivalent(\n    oxygen2carbon: Union[float, NDArray[np.float64]],\n    molar_mass_ratio: Union[float, NDArray[np.float64]],\n    functional_group: Optional[Union[list[str], str]] = None,\n) -&gt; Tuple[np.ndarray, np.ndarray]: ...\n</code></pre>"},{"location":"API/particula/activity/gibbs/","title":"Gibbs","text":"<p>Particula Index / Particula / Activity / Gibbs</p> <p>Auto-generated documentation for particula.activity.gibbs module.</p>"},{"location":"API/particula/activity/gibbs/#gibbs_free_engery","title":"gibbs_free_engery","text":"<p>Show source in gibbs.py:13</p> <p>Calculate the gibbs free energy of the mixture. Ideal and non-ideal.</p>"},{"location":"API/particula/activity/gibbs/#arguments","title":"Arguments","text":"<ul> <li>organic_mole_fraction : A numpy array of organic mole     fractions.</li> <li>gibbs_mix : A numpy array of gibbs free energy of mixing.</li> </ul>"},{"location":"API/particula/activity/gibbs/#returns","title":"Returns","text":"<ul> <li>gibbs_ideal : The ideal gibbs free energy of mixing.</li> <li>gibbs_real : The real gibbs free energy of mixing.</li> </ul>"},{"location":"API/particula/activity/gibbs/#signature","title":"Signature","text":"<pre><code>def gibbs_free_engery(\n    organic_mole_fraction: NDArray[np.float64], gibbs_mix: NDArray[np.float64]\n) -&gt; Tuple[NDArray[np.float64], NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/activity/gibbs_mixing/","title":"Gibbs Mixing","text":"<p>Particula Index / Particula / Activity / Gibbs Mixing</p> <p>Auto-generated documentation for particula.activity.gibbs_mixing module.</p>"},{"location":"API/particula/activity/gibbs_mixing/#_calculate_gibbs_mix_single","title":"_calculate_gibbs_mix_single","text":"<p>Show source in gibbs_mixing.py:160</p> <p>Calculate Gibbs free energy of mixing for a single set of inputs.</p>"},{"location":"API/particula/activity/gibbs_mixing/#arguments","title":"Arguments","text":"<ul> <li>molar_mass_ratio : The molar mass ratio of water to organic   matter.</li> <li>organic_mole_fraction : The fraction of organic matter.</li> <li>oxygen2carbon : The oxygen to carbon ratio.</li> <li>density : The density of the mixture, in kg/m^3.</li> <li>weights : Blending weights for the BAT model.</li> </ul>"},{"location":"API/particula/activity/gibbs_mixing/#returns","title":"Returns","text":"<ul> <li>gibbs_mix : Gibbs energy of mixing (including 1/RT)</li> <li>derivative_gibbs : derivative of Gibbs energy with respect to   mole fraction of organics (includes 1/RT)</li> </ul>"},{"location":"API/particula/activity/gibbs_mixing/#signature","title":"Signature","text":"<pre><code>def _calculate_gibbs_mix_single(\n    molar_mass_ratio: float,\n    organic_mole_fraction: float,\n    oxygen2carbon: float,\n    density: float,\n    weights: NDArray[np.float64],\n) -&gt; Tuple[np.ndarray, np.ndarray]: ...\n</code></pre>"},{"location":"API/particula/activity/gibbs_mixing/#gibbs_mix_weight","title":"gibbs_mix_weight","text":"<p>Show source in gibbs_mixing.py:99</p> <p>Gibbs free energy of mixing, see Gorkowski (2019), with weighted oxygen2carbon regions. Only can run one compound at a time.</p>"},{"location":"API/particula/activity/gibbs_mixing/#arguments_1","title":"Arguments","text":"<ul> <li>molar_mass_ratio : The molar mass ratio of water to organic   matter.</li> <li>organic_mole_fraction : The fraction of organic matter.</li> <li>oxygen2carbon : The oxygen to carbon ratio.</li> <li>density : The density of the mixture, in kg/m^3.</li> <li>functional_group : Optional functional group(s) of the organic   compound, if applicable.</li> </ul>"},{"location":"API/particula/activity/gibbs_mixing/#returns_1","title":"Returns","text":"<ul> <li>gibbs_mix : Gibbs energy of mixing (including 1/RT)</li> <li>derivative_gibbs : derivative of Gibbs energy with respect to   mole fraction of organics (includes 1/RT)</li> </ul>"},{"location":"API/particula/activity/gibbs_mixing/#signature_1","title":"Signature","text":"<pre><code>def gibbs_mix_weight(\n    molar_mass_ratio: Union[float, NDArray[np.float64]],\n    organic_mole_fraction: Union[float, NDArray[np.float64]],\n    oxygen2carbon: Union[float, NDArray[np.float64]],\n    density: Union[float, NDArray[np.float64]],\n    functional_group: Optional[str] = None,\n) -&gt; Tuple[np.ndarray, np.ndarray]: ...\n</code></pre>"},{"location":"API/particula/activity/gibbs_mixing/#gibbs_of_mixing","title":"gibbs_of_mixing","text":"<p>Show source in gibbs_mixing.py:27</p> <p>Calculate the Gibbs free energy of mixing for a binary mixture.</p>"},{"location":"API/particula/activity/gibbs_mixing/#arguments_2","title":"Arguments","text":"<ul> <li>molar_mass_ratio : The molar mass ratio of water to organic   matter.</li> <li>organic_mole_fraction : The fraction of organic matter.</li> <li>oxygen2carbon : The oxygen to carbon ratio.</li> <li>density : The density of the mixture, in kg/m^3.</li> <li>fit_dict : A dictionary of fit values for the low oxygen2carbon     region</li> </ul>"},{"location":"API/particula/activity/gibbs_mixing/#returns_2","title":"Returns","text":"<ul> <li>A tuple containing the Gibbs free energy of mixing and its   derivative.</li> </ul>"},{"location":"API/particula/activity/gibbs_mixing/#signature_2","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"molar_mass_ratio\": \"positive\",\n        \"organic_mole_fraction\": \"nonnegative\",\n        \"oxygen2carbon\": \"nonnegative\",\n        \"density\": \"positive\",\n    }\n)\ndef gibbs_of_mixing(\n    molar_mass_ratio: Union[float, NDArray[np.float64]],\n    organic_mole_fraction: Union[float, NDArray[np.float64]],\n    oxygen2carbon: Union[float, NDArray[np.float64]],\n    density: Union[float, NDArray[np.float64]],\n    fit_dict: Tuple[str, List[float]],\n) -&gt; Tuple[Union[float, NDArray[np.float64]], Union[float, NDArray[np.float64]]]: ...\n</code></pre>"},{"location":"API/particula/activity/phase_separation/","title":"Phase Separation","text":"<p>Particula Index / Particula / Activity / Phase Separation</p> <p>Auto-generated documentation for particula.activity.phase_separation module.</p>"},{"location":"API/particula/activity/phase_separation/#find_phase_sep_index","title":"find_phase_sep_index","text":"<p>Show source in phase_separation.py:53</p> <p>This function finds phase separation using activity&gt;1 and inflections in the activity curve data. In physical systems activity can not be above one and curve should be monotonic. Or else there will be phase separation.</p>"},{"location":"API/particula/activity/phase_separation/#arguments","title":"Arguments","text":"<ul> <li><code>-</code> activity_data - A array of activity data.</li> </ul>"},{"location":"API/particula/activity/phase_separation/#returns","title":"Returns","text":"<ul> <li><code>dict</code> - A dictionary containing the following keys:<ul> <li><code>-</code> 'phase_sep_activity' - Phase separation via activity     (1 if there is phase separation, 0 otherwise)</li> <li><code>-</code> 'phase_sep_curve' - Phase separation via activity curvature     (1 if there is phase separation, 0 otherwise)</li> <li><code>-</code> 'index_phase_sep_starts' - Index where phase separation starts</li> <li><code>-</code> 'index_phase_sep_end' - Index where phase separation ends</li> </ul> </li> </ul>"},{"location":"API/particula/activity/phase_separation/#signature","title":"Signature","text":"<pre><code>def find_phase_sep_index(activity_data: NDArray[np.float64]) -&gt; dict: ...\n</code></pre>"},{"location":"API/particula/activity/phase_separation/#find_phase_separation","title":"find_phase_separation","text":"<p>Show source in phase_separation.py:143</p> <p>This function checks for phase separation in each activity curve.</p>"},{"location":"API/particula/activity/phase_separation/#arguments_1","title":"Arguments","text":"<ul> <li>activity_water (np.array): A numpy array of water activity values.</li> <li>activity_org (np.array): A numpy array of organic activity values.</li> </ul>"},{"location":"API/particula/activity/phase_separation/#returns_1","title":"Returns","text":"<ul> <li><code>dict</code> - A dictionary containing the following keys:<ul> <li><code>-</code> 'phase_sep_check' - An integer indicating whether phase separation         is present (1) or not (0).</li> <li><code>-</code> 'lower_seperation_index' - The index of the lower separation point         in the activity curve.</li> <li><code>-</code> 'upper_seperation_index' - The index of the upper separation point in         the activity curve.</li> <li><code>-</code> 'matching_upper_seperation_index' - The index where the difference         between activity_water_beta and match_a_w is greater than 0.</li> <li><code>-</code> 'lower_seperation' - The value of water activity at the lower         separation point.</li> <li><code>-</code> 'upper_seperation' - The value of water activity at the upper         separation point.</li> <li><code>-</code> 'matching_upper_seperation' - The value of water activity at the         matching upper separation point.</li> </ul> </li> </ul>"},{"location":"API/particula/activity/phase_separation/#signature_1","title":"Signature","text":"<pre><code>def find_phase_separation(\n    activity_water: NDArray[np.float64], activity_org: NDArray[np.float64]\n) -&gt; dict: ...\n</code></pre>"},{"location":"API/particula/activity/phase_separation/#organic_water_single_phase","title":"organic_water_single_phase","text":"<p>Show source in phase_separation.py:22</p> <p>Convert the given molar mass ratio (MW water / MW organic) to a and oxygen2carbon value were above is a single phase with water and below phase separation is possible.</p>"},{"location":"API/particula/activity/phase_separation/#arguments_2","title":"Arguments","text":"<ul> <li><code>-</code> molar_mass_ratio - The molar mass ratio with respect to water.</li> </ul>"},{"location":"API/particula/activity/phase_separation/#returns_2","title":"Returns","text":"<ul> <li>The single phase cross point.</li> </ul>"},{"location":"API/particula/activity/phase_separation/#references","title":"References","text":"<ul> <li>Gorkowski, K., Preston, T. C., &amp; Zuend, A. (2019).   Relative-humidity-dependent organic aerosol thermodynamics   Via an efficient reduced-complexity model.   Atmospheric Chemistry and Physics   https://doi.org/10.5194/acp-19-13383-2019</li> </ul>"},{"location":"API/particula/activity/phase_separation/#signature_2","title":"Signature","text":"<pre><code>def organic_water_single_phase(\n    molar_mass_ratio: Union[int, float, list, np.ndarray],\n) -&gt; np.ndarray: ...\n</code></pre>"},{"location":"API/particula/activity/phase_separation/#q_alpha","title":"q_alpha","text":"<p>Show source in phase_separation.py:240</p> <p>This function calculates the q_alpha value using a squeezed logistic     function.</p>"},{"location":"API/particula/activity/phase_separation/#arguments_3","title":"Arguments","text":"<ul> <li>seperation_activity (np.array): A numpy array of values representing     the separation activity.</li> <li>activities (np.array): A numpy array of activity values.</li> </ul>"},{"location":"API/particula/activity/phase_separation/#returns_3","title":"Returns","text":"<ul> <li><code>np.array</code> - The q_alpha value.</li> </ul>"},{"location":"API/particula/activity/phase_separation/#notes","title":"Notes","text":"<ul> <li>The q_alpha value represents the transfer from     q_alpha ~0 to q_alpha ~1.</li> <li>The function uses a sigmoid curve parameter to calculate the     q_alpha value.</li> </ul>"},{"location":"API/particula/activity/phase_separation/#signature_3","title":"Signature","text":"<pre><code>def q_alpha(\n    seperation_activity: NDArray[np.float64], activities: NDArray[np.float64]\n) -&gt; np.ndarray: ...\n</code></pre>"},{"location":"API/particula/activity/ratio/","title":"Ratio","text":"<p>Particula Index / Particula / Activity / Ratio</p> <p>Auto-generated documentation for particula.activity.ratio module.</p>"},{"location":"API/particula/activity/ratio/#from_molar_mass_ratio","title":"from_molar_mass_ratio","text":"<p>Show source in ratio.py:22</p> <p>Convert the given molar mass ratio (MW water / MW organic) to a molar mass with respect to the other compound.</p>"},{"location":"API/particula/activity/ratio/#arguments","title":"Arguments","text":"<ul> <li><code>molar_mass_ratio</code> np.array - The molar mass ratio with respect to water.</li> <li><code>other_molar_mass</code> float, optional - The molar mass of the other compound.     Defaults to 18.01528.</li> </ul>"},{"location":"API/particula/activity/ratio/#returns","title":"Returns","text":"<ul> <li><code>np.array</code> - The molar mass of the organic compound.</li> </ul>"},{"location":"API/particula/activity/ratio/#signature","title":"Signature","text":"<pre><code>def from_molar_mass_ratio(molar_mass_ratio, other_molar_mass=18.01528): ...\n</code></pre>"},{"location":"API/particula/activity/ratio/#to_molar_mass_ratio","title":"to_molar_mass_ratio","text":"<p>Show source in ratio.py:4</p> <p>Convert the given molar mass to a molar mass ratio with respect to water. (MW water / MW organic)</p>"},{"location":"API/particula/activity/ratio/#arguments_1","title":"Arguments","text":"<ul> <li><code>molar_mass</code> np.array - The molar mass of the organic compound.</li> <li><code>other_molar_mass</code> float, optional - The molar mass of the other compound.     Defaults to 18.01528.</li> </ul>"},{"location":"API/particula/activity/ratio/#returns_1","title":"Returns","text":"<ul> <li><code>np.array</code> - The molar mass ratio with respect to water.</li> </ul>"},{"location":"API/particula/activity/ratio/#signature_1","title":"Signature","text":"<pre><code>def to_molar_mass_ratio(molar_mass, other_molar_mass=18.01528): ...\n</code></pre>"},{"location":"API/particula/activity/species_density/","title":"Species Density","text":"<p>Particula Index / Particula / Activity / Species Density</p> <p>Auto-generated documentation for particula.activity.species_density module.</p>"},{"location":"API/particula/activity/species_density/#organic_array","title":"organic_array","text":"<p>Show source in species_density.py:93</p> <p>Get densities for an array.</p>"},{"location":"API/particula/activity/species_density/#signature","title":"Signature","text":"<pre><code>def organic_array(\n    molar_mass,\n    oxygen2carbon,\n    hydrogen2carbon=None,\n    nitrogen2carbon=None,\n    mass_ratio_convert=False,\n): ...\n</code></pre>"},{"location":"API/particula/activity/species_density/#organic_density_estimate","title":"organic_density_estimate","text":"<p>Show source in species_density.py:12</p> <p>Function to estimate the density of organic compounds based on the simple model by Girolami (1994). The input parameters include molar mass, O:C and H:C ratios. If the H:C ratio is unknown at input, enter a negative value. The actual H:C will then be estimated based on an initial assumption of H:C = 2. The model also estimates the number of carbon atoms per molecular structure based on molar mass, O:C, and H:C. The density is then approximated by the formula of Girolami.</p> <p>Reference: Girolami, G. S.: A Simple 'Back of the Envelope' Method for Estimating the Densities and Molecular Volumes of Liquids and Solids, J. Chem. Educ., 71(11), 962, doi:10.1021/ed071p962, 1994.</p>"},{"location":"API/particula/activity/species_density/#arguments","title":"Arguments","text":"<ul> <li><code>molar_mass(float)</code> - Molar mass.</li> <li><code>oxygen2carbon</code> float - O:C ratio.</li> <li><code>hydrogen2carbon</code> float - H:C ratio. If unknown, provide a negative     value.</li> <li><code>nitrogen2carbon</code> float, optional - N:C ratio. Defaults to None.</li> </ul>"},{"location":"API/particula/activity/species_density/#returns","title":"Returns","text":"<ul> <li><code>densityEst</code> float - Estimated density in g/cm^3.</li> </ul>"},{"location":"API/particula/activity/species_density/#signature_1","title":"Signature","text":"<pre><code>def organic_density_estimate(\n    molar_mass,\n    oxygen2carbon,\n    hydrogen2carbon=None,\n    nitrogen2carbon=None,\n    mass_ratio_convert=False,\n): ...\n</code></pre>"},{"location":"API/particula/activity/water_activity/","title":"Water Activity","text":"<p>Particula Index / Particula / Activity / Water Activity</p> <p>Auto-generated documentation for particula.activity.water_activity module.</p>"},{"location":"API/particula/activity/water_activity/#biphasic_water_activity_point","title":"biphasic_water_activity_point","text":"<p>Show source in water_activity.py:24</p> <p>This function computes the biphasic to single phase water activity (RH*100).</p>"},{"location":"API/particula/activity/water_activity/#arguments","title":"Arguments","text":"<ul> <li>oxygen2carbon : The oxygen to carbon ratio.</li> <li>hydrogen2carbon : The hydrogen to carbon ratio.</li> <li>molar_mass_ratio : The molar mass ratio of water to organic   matter.</li> <li>functional_group : Optional functional group(s) of the organic   compound, if applicable.</li> </ul>"},{"location":"API/particula/activity/water_activity/#returns","title":"Returns","text":"<ul> <li>The RH cross point array.</li> </ul>"},{"location":"API/particula/activity/water_activity/#signature","title":"Signature","text":"<pre><code>def biphasic_water_activity_point(\n    oxygen2carbon: Union[float, NDArray[np.float64]],\n    hydrogen2carbon: Union[float, NDArray[np.float64]],\n    molar_mass_ratio: Union[float, NDArray[np.float64]],\n    functional_group: Optional[Union[list[str], str]] = None,\n) -&gt; np.ndarray: ...\n</code></pre>"},{"location":"API/particula/activity/water_activity/#fixed_water_activity","title":"fixed_water_activity","text":"<p>Show source in water_activity.py:93</p> <p>Calculate the activity coefficients of water and organic matter in organic-water mixtures.</p> <p>This function assumes a fixed water activity value (e.g., RH = 75% corresponds to 0.75 water activity in equilibrium). It calculates the activity coefficients for different phases and determines phase separations if they occur.</p>"},{"location":"API/particula/activity/water_activity/#arguments_1","title":"Arguments","text":"<ul> <li>water_activity : An array of water activity values.</li> <li>molar_mass_ratio : Array of molar mass ratios of the components.</li> <li>oxygen2carbon : Array of oxygen-to-carbon ratios.</li> <li>density : Array of densities of the mixture, in kg/m^3.</li> </ul>"},{"location":"API/particula/activity/water_activity/#returns_1","title":"Returns","text":"<ul> <li>A tuple containing the activity coefficients for alpha and beta   phases, and the q_alpha (phase separation) value.   If no phase separation occurs, the beta phase values are None.</li> </ul>"},{"location":"API/particula/activity/water_activity/#signature_1","title":"Signature","text":"<pre><code>def fixed_water_activity(\n    water_activity: Union[float, NDArray[np.float64]],\n    molar_mass_ratio: Union[float, NDArray[np.float64]],\n    oxygen2carbon: Union[float, NDArray[np.float64]],\n    density: Union[float, NDArray[np.float64]],\n) -&gt; Tuple[\n    Union[float, NDArray[np.float64]],\n    Union[float, NDArray[np.float64]],\n    Union[float, NDArray[np.float64]],\n]: ...\n</code></pre>"},{"location":"API/particula/dynamics/","title":"Dynamics","text":"<p>Particula Index / Particula / Dynamics</p> <p>Auto-generated documentation for particula.dynamics module.</p>"},{"location":"API/particula/dynamics/#modules","title":"Modules","text":"<ul> <li>Coagulation</li> <li>Condensation</li> <li>Dilution</li> <li>Particle Process</li> <li>Properties</li> <li>Wall Loss</li> </ul>"},{"location":"API/particula/dynamics/dilution/","title":"Dilution","text":"<p>Particula Index / Particula / Dynamics / Dilution</p> <p>Auto-generated documentation for particula.dynamics.dilution module.</p>"},{"location":"API/particula/dynamics/dilution/#get_dilution_rate","title":"get_dilution_rate","text":"<p>Show source in dilution.py:55</p> <p>Calculate the dilution rate of a substance in a system.</p> <p>The dilution rate describes how quickly the concentration of a substance decreases due to the volume dilution coefficient and the current concentration. The calculation is:</p> <ul> <li>R = -(\u03b1 \u00d7 c)<ul> <li>R is the dilution rate [s\u207b\u00b9],</li> <li>\u03b1 is the volume dilution coefficient [s\u207b\u00b9],</li> <li>c is the current concentration [#/m\u00b3].</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/dilution/#arguments","title":"Arguments","text":"<ul> <li>coefficient : The volume dilution coefficient in inverse     seconds (s\u207b\u00b9).</li> <li>concentration : The concentration of the substance in #/m\u00b3     (or relevant units).</li> </ul>"},{"location":"API/particula/dynamics/dilution/#returns","title":"Returns","text":"<ul> <li>The dilution rate in s\u207b\u00b9, returned as a negative value   to indicate a decrease in concentration.</li> </ul>"},{"location":"API/particula/dynamics/dilution/#examples","title":"Examples","text":"Example (float input)<pre><code>get_dilution_rate(coefficient=0.01, concentration=100)\n# Returns -1.0\n</code></pre> Example (array input)<pre><code>get_dilution_rate(\n    coefficient=0.01,\n    concentration=np.array([100, 200, 300]),\n)\n# Returns array([-1., -2., -3.])\n</code></pre>"},{"location":"API/particula/dynamics/dilution/#references","title":"References","text":"<ul> <li>H. Fogler, \"Elements of Chemical Reaction Engineering,\"   5<sup>th</sup> ed., Prentice Hall, 2016. [check]</li> </ul>"},{"location":"API/particula/dynamics/dilution/#signature","title":"Signature","text":"<pre><code>def get_dilution_rate(\n    coefficient: Union[float, NDArray[np.float64]],\n    concentration: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/dilution/#get_volume_dilution_coefficient","title":"get_volume_dilution_coefficient","text":"<p>Show source in dilution.py:10</p> <p>Calculate the volume dilution coefficient.</p> <p>This coefficient represents how quickly a substance is diluted within a system of a given volume when a known input flow rate is supplied. The equation is:</p> <ul> <li>\u03b1 = Q / V<ul> <li>\u03b1 is the volume dilution coefficient [s\u207b\u00b9],</li> <li>Q is the input flow rate [m\u00b3/s],</li> <li>V is the system volume [m\u00b3].</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/dilution/#arguments_1","title":"Arguments","text":"<ul> <li>volume : The volume of the system in cubic meters (m\u00b3).</li> <li>input_flow_rate : The flow rate entering the system in     cubic meters per second (m\u00b3/s).</li> </ul>"},{"location":"API/particula/dynamics/dilution/#returns_1","title":"Returns","text":"<ul> <li>The volume dilution coefficient in inverse seconds (s\u207b\u00b9).</li> </ul>"},{"location":"API/particula/dynamics/dilution/#examples_1","title":"Examples","text":"Example (float input)<pre><code>get_volume_dilution_coefficient(volume=10, input_flow_rate=0.1)\n# Returns 0.01\n</code></pre> Example (array input)<pre><code>get_volume_dilution_coefficient(\n    volume=np.array([10, 20, 30]),\n    input_flow_rate=np.array([0.1, 0.2, 0.3]),\n)\n# Returns array([0.01, 0.01, 0.01])\n</code></pre>"},{"location":"API/particula/dynamics/dilution/#references_1","title":"References","text":"<ul> <li>O. Levenspiel, \"Chemical Reaction Engineering,\" 3<sup>rd</sup> ed., Wiley, 1999. [check]</li> </ul>"},{"location":"API/particula/dynamics/dilution/#signature_1","title":"Signature","text":"<pre><code>def get_volume_dilution_coefficient(\n    volume: Union[float, NDArray[np.float64]],\n    input_flow_rate: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/particle_process/","title":"Particle Process","text":"<p>Particula Index / Particula / Dynamics / Particle Process</p> <p>Auto-generated documentation for particula.dynamics.particle_process module.</p>"},{"location":"API/particula/dynamics/particle_process/#coagulation","title":"Coagulation","text":"<p>Show source in particle_process.py:94</p> <p>A class for running a coagulation strategy.</p>"},{"location":"API/particula/dynamics/particle_process/#arguments","title":"Arguments","text":"<ul> <li><code>coagulation_strategy</code> CoagulationStrategy - The coagulation strategy to     use.</li> </ul>"},{"location":"API/particula/dynamics/particle_process/#methods","title":"Methods","text":"<ul> <li><code>execute</code> - Execute the coagulation process.</li> <li><code>rate</code> - Calculate the rate of coagulation for each particle.</li> </ul>"},{"location":"API/particula/dynamics/particle_process/#signature","title":"Signature","text":"<pre><code>class Coagulation(Runnable):\n    def __init__(self, coagulation_strategy: CoagulationStrategyABC): ...\n</code></pre>"},{"location":"API/particula/dynamics/particle_process/#see-also","title":"See also","text":"<ul> <li>CoagulationStrategyABC</li> <li>Runnable</li> </ul>"},{"location":"API/particula/dynamics/particle_process/#coagulationexecute","title":"Coagulation().execute","text":"<p>Show source in particle_process.py:110</p> <p>Execute the coagulation process.</p>"},{"location":"API/particula/dynamics/particle_process/#arguments_1","title":"Arguments","text":"<ul> <li><code>aerosol</code> Aerosol - The aerosol instance to modify.</li> </ul>"},{"location":"API/particula/dynamics/particle_process/#signature_1","title":"Signature","text":"<pre><code>def execute(self, aerosol: Aerosol, time_step: float, sub_steps: int = 1) -&gt; Aerosol: ...\n</code></pre>"},{"location":"API/particula/dynamics/particle_process/#see-also_1","title":"See also","text":"<ul> <li>Aerosol</li> </ul>"},{"location":"API/particula/dynamics/particle_process/#coagulationrate","title":"Coagulation().rate","text":"<p>Show source in particle_process.py:131</p> <p>Calculate the rate of coagulation for each particle.</p>"},{"location":"API/particula/dynamics/particle_process/#arguments_2","title":"Arguments","text":"<ul> <li><code>aerosol</code> Aerosol - The aerosol instance to modify.</li> </ul>"},{"location":"API/particula/dynamics/particle_process/#returns","title":"Returns","text":"<ul> <li><code>np.ndarray</code> - An array of coagulation rates for each particle.</li> </ul>"},{"location":"API/particula/dynamics/particle_process/#signature_2","title":"Signature","text":"<pre><code>def rate(self, aerosol: Aerosol) -&gt; Any: ...\n</code></pre>"},{"location":"API/particula/dynamics/particle_process/#see-also_2","title":"See also","text":"<ul> <li>Aerosol</li> </ul>"},{"location":"API/particula/dynamics/particle_process/#masscondensation","title":"MassCondensation","text":"<p>Show source in particle_process.py:19</p> <p>A class for running a mass condensation process.</p>"},{"location":"API/particula/dynamics/particle_process/#arguments_3","title":"Arguments","text":"<ul> <li><code>condensation_strategy</code> CondensationStrategy - The condensation strategy     to use.</li> </ul>"},{"location":"API/particula/dynamics/particle_process/#methods_1","title":"Methods","text":"<ul> <li><code>execute</code> - Execute the mass condensation process.</li> <li><code>rate</code> - Calculate the rate of mass condensation for each particle due to     each condensable gas species.</li> </ul>"},{"location":"API/particula/dynamics/particle_process/#signature_3","title":"Signature","text":"<pre><code>class MassCondensation(Runnable):\n    def __init__(self, condensation_strategy: CondensationStrategy): ...\n</code></pre>"},{"location":"API/particula/dynamics/particle_process/#see-also_3","title":"See also","text":"<ul> <li>CondensationStrategy</li> <li>Runnable</li> </ul>"},{"location":"API/particula/dynamics/particle_process/#masscondensationexecute","title":"MassCondensation().execute","text":"<p>Show source in particle_process.py:36</p> <p>Execute the mass condensation process.</p>"},{"location":"API/particula/dynamics/particle_process/#arguments_4","title":"Arguments","text":"<ul> <li><code>aerosol</code> Aerosol - The aerosol instance to modify.</li> </ul>"},{"location":"API/particula/dynamics/particle_process/#signature_4","title":"Signature","text":"<pre><code>def execute(self, aerosol: Aerosol, time_step: float, sub_steps: int = 1) -&gt; Aerosol: ...\n</code></pre>"},{"location":"API/particula/dynamics/particle_process/#see-also_4","title":"See also","text":"<ul> <li>Aerosol</li> </ul>"},{"location":"API/particula/dynamics/particle_process/#masscondensationrate","title":"MassCondensation().rate","text":"<p>Show source in particle_process.py:63</p> <p>Calculate the rate of mass condensation for each particle due to each condensable gas species.</p>"},{"location":"API/particula/dynamics/particle_process/#arguments_5","title":"Arguments","text":"<ul> <li><code>aerosol</code> Aerosol - The aerosol instance to modify.</li> </ul>"},{"location":"API/particula/dynamics/particle_process/#returns_1","title":"Returns","text":"<ul> <li><code>np.ndarray</code> - An array of condensation rates for each particle.</li> </ul>"},{"location":"API/particula/dynamics/particle_process/#signature_5","title":"Signature","text":"<pre><code>def rate(self, aerosol: Aerosol) -&gt; Any: ...\n</code></pre>"},{"location":"API/particula/dynamics/particle_process/#see-also_5","title":"See also","text":"<ul> <li>Aerosol</li> </ul>"},{"location":"API/particula/dynamics/wall_loss/","title":"Wall Loss","text":"<p>Particula Index / Particula / Dynamics / Wall Loss</p> <p>Auto-generated documentation for particula.dynamics.wall_loss module.</p>"},{"location":"API/particula/dynamics/wall_loss/#get_rectangle_wall_loss_rate","title":"get_rectangle_wall_loss_rate","text":"<p>Show source in wall_loss.py:87</p> <p>Calculate the wall loss rate of particles in a rectangular chamber.</p> <p>This function calculates the rate of particle deposition onto the walls of a rectangular chamber, given the wall eddy diffusivity, particle properties (radius, density, concentration), and environmental conditions (temperature, pressure). The final loss rate is computed via:</p> <ul> <li>L = -(k \u00d7 c)<ul> <li>L is the wall loss rate [#/m\u00b3\u00b7s],</li> <li>k is the wall loss coefficient [1/s],</li> <li>c is the particle concentration [#/m\u00b3].</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/wall_loss/#arguments","title":"Arguments","text":"<ul> <li>wall_eddy_diffusivity : Wall eddy diffusivity in s\u207b\u00b9.</li> <li>particle_radius : Particle radius in m.</li> <li>particle_density : Particle density in kg/m\u00b3.</li> <li>particle_concentration : Particle concentration in #/m\u00b3.</li> <li>temperature : System temperature in K.</li> <li>pressure : System pressure in Pa.</li> <li>chamber_dimensions : (length, width, height) of the     rectangular chamber in m.</li> </ul>"},{"location":"API/particula/dynamics/wall_loss/#returns","title":"Returns","text":"<ul> <li>The wall loss rate (float or NDArray[np.float64]) in #/m\u00b3\u00b7s.</li> </ul>"},{"location":"API/particula/dynamics/wall_loss/#examples","title":"Examples","text":"Example<pre><code>import particula as par\nloss_rate = par.dynamics.wall_loss.get_rectangle_wall_loss_rate(\n    wall_eddy_diffusivity=1e-4,\n    particle_radius=5e-8,\n    particle_density=1200,\n    particle_concentration=2e10,\n    temperature=300,\n    pressure=101325,\n    chamber_dimensions=(1.0, 0.5, 0.5)\n)\nprint(loss_rate)\n# Example output: -4.6e7\n</code></pre>"},{"location":"API/particula/dynamics/wall_loss/#references","title":"References","text":"<ul> <li>J. Hinds, \"Aerosol Technology,\" 2<sup>nd</sup> ed., John Wiley &amp; Sons, 1999. [check]</li> </ul>"},{"location":"API/particula/dynamics/wall_loss/#signature","title":"Signature","text":"<pre><code>def get_rectangle_wall_loss_rate(\n    wall_eddy_diffusivity: float,\n    particle_radius: Union[float, NDArray[np.float64]],\n    particle_density: Union[float, NDArray[np.float64]],\n    particle_concentration: Union[float, NDArray[np.float64]],\n    temperature: float,\n    pressure: float,\n    chamber_dimensions: Tuple[float, float, float],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/wall_loss/#get_spherical_wall_loss_rate","title":"get_spherical_wall_loss_rate","text":"<p>Show source in wall_loss.py:16</p> <p>Calculate the wall loss rate of particles in a spherical chamber.</p> <p>This function calculates the rate at which particles deposit onto the walls of a spherical chamber. The calculation is based on the wall eddy diffusivity and key particle properties (radius, density, concentration), together with environmental conditions (temperature, pressure). The loss rate is determined via:</p> <ul> <li>L = -(k \u00d7 c)<ul> <li>L is the wall loss rate [#/m\u00b3\u00b7s],</li> <li>k is the wall loss coefficient [1/s] from the system state,</li> <li>c is the particle concentration [#/m\u00b3].</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/wall_loss/#arguments_1","title":"Arguments","text":"<ul> <li>wall_eddy_diffusivity : Wall eddy diffusivity in s\u207b\u00b9.</li> <li>particle_radius : Particle radius in m.</li> <li>particle_density : Particle density in kg/m\u00b3.</li> <li>particle_concentration : Particle concentration in #/m\u00b3.</li> <li>temperature : System temperature in K.</li> <li>pressure : System pressure in Pa.</li> <li>chamber_radius : Radius of the spherical chamber in m.</li> </ul>"},{"location":"API/particula/dynamics/wall_loss/#returns_1","title":"Returns","text":"<ul> <li>The wall loss rate (float or NDArray[np.float64]) in #/m\u00b3\u00b7s.</li> </ul>"},{"location":"API/particula/dynamics/wall_loss/#examples_1","title":"Examples","text":"Example<pre><code>import particula as par\nrate = par.dynamics.wall_loss.get_spherical_wall_loss_rate(\n    wall_eddy_diffusivity=1e-3,\n    particle_radius=1e-7,\n    particle_density=1000,\n    particle_concentration=1e11,\n    temperature=298,\n    pressure=101325,\n    chamber_radius=0.5\n)\nprint(rate)\n# Example output: -1.2e8\n</code></pre>"},{"location":"API/particula/dynamics/wall_loss/#references_1","title":"References","text":"<ul> <li>Wikipedia contributors, \"Aerosol dynamics,\" Wikipedia,   https://en.wikipedia.org/wiki/Aerosol.</li> </ul>"},{"location":"API/particula/dynamics/wall_loss/#signature_1","title":"Signature","text":"<pre><code>def get_spherical_wall_loss_rate(\n    wall_eddy_diffusivity: float,\n    particle_radius: Union[float, NDArray[np.float64]],\n    particle_density: Union[float, NDArray[np.float64]],\n    particle_concentration: Union[float, NDArray[np.float64]],\n    temperature: float,\n    pressure: float,\n    chamber_radius: float,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/","title":"Coagulation","text":"<p>Particula Index / Particula / Dynamics / Coagulation</p> <p>Auto-generated documentation for particula.dynamics.coagulation module.</p>"},{"location":"API/particula/dynamics/coagulation/#modules","title":"Modules","text":"<ul> <li>Brownian Kernel</li> <li>Charged Dimensionless Kernel</li> <li>Charged Kernel Strategy</li> <li>Coagulation Builder</li> <li>Coagulation Factories</li> <li>Coagulation Rate</li> <li>Coagulation Strategy</li> <li>Particle Resolved Step</li> <li>Sedimentation Kernel</li> <li>Turbulent Dns Kernel</li> <li>Turbulent Shear Kernel</li> </ul>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/","title":"Brownian Kernel","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Brownian Kernel</p> <p>Auto-generated documentation for particula.dynamics.coagulation.brownian_kernel module.</p>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#_brownian_diffusivity","title":"_brownian_diffusivity","text":"<p>Show source in brownian_kernel.py:255</p> <p>Calculate the diffusivity of particles due to Brownian motion.</p> <p>This function calculates the diffusivity of particles due to Brownian motion, which is essentially the scaled aerodynamic mobility of the particles. The equation used is:</p> <ul> <li>D = k \u00d7 T \u00d7 B<ul> <li>D is the diffusivity of the particles [m\u00b2/s].</li> <li>k is the Boltzmann constant [J/K].</li> <li>T is the temperature of the air [K].</li> <li>B is the aerodynamic mobility of the particles [m\u00b2/s].</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#arguments","title":"Arguments","text":"<ul> <li>temperature : The temperature of the air [K].</li> <li>aerodynamic_mobility : The aerodynamic mobility of the particles   [m\u00b2/s].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#returns","title":"Returns","text":"<ul> <li>The diffusivity of the particles due to Brownian motion [m\u00b2/s].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#references","title":"References","text":"<ul> <li>Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric chemistry and   physics, Section 13 TABLE 13.1 Fuchs Form of the Brownian Coagulation   Coefficient K12.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#signature","title":"Signature","text":"<pre><code>def _brownian_diffusivity(\n    temperature: Union[float, NDArray[np.float64]],\n    aerodynamic_mobility: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#_g_collection_term","title":"_g_collection_term","text":"<p>Show source in brownian_kernel.py:216</p> <p>Calculate the <code>g</code> collection term for Brownian coagulation.</p> <p>This function calculates the <code>g</code> collection term for Brownian coagulation, defined as the ratio of the mean free path of the particles to the radius of the particles. The equation used is:</p> <ul> <li>g = ((2r + \u03bb)\u00b3 - (4r\u00b2 + \u03bb\u00b2)^(3/2)) / (6r\u03bb) - 2r<ul> <li>g is the collection term for Brownian coagulation [dimensionless].</li> <li>\u03bb is the mean free path of the particles [m].</li> <li>r is the radius of the particles [m].</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#arguments_1","title":"Arguments","text":"<ul> <li>mean_free_path_particle : The mean free path of the particles [m].</li> <li>particle_radius : The radius of the particles [m].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#returns_1","title":"Returns","text":"<ul> <li>The collection term for Brownian coagulation [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#references_1","title":"References","text":"<ul> <li>Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric chemistry and   physics, Section 13 TABLE 13.1 Fuchs Form of the Brownian Coagulation   Coefficient K12.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#notes","title":"Notes","text":"<p>The np.sqrt(2) term appears to be an error in the text, as the term is not used in the second edition of the book. When it is used, the values are too small, by about 2x.</p>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#signature_1","title":"Signature","text":"<pre><code>def _g_collection_term(\n    mean_free_path_particle: Union[float, NDArray[np.float64]],\n    particle_radius: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#_mean_free_path_l","title":"_mean_free_path_l","text":"<p>Show source in brownian_kernel.py:181</p> <p>Calculate the mean free path of particles for coagulation.</p> <p>Calculate the mean free path of particles for coagulation.</p> <p>This function calculates the mean free path of particles, defined for Brownian coagulation as the ratio of the diffusivity of the particles to their mean thermal speed. This parameter is crucial for understanding particle dynamics in a fluid. The equation used is:</p> <ul> <li>\u03bb = (8 \u00d7 D) / (\u03c0 \u00d7 v)<ul> <li>\u03bb is the mean free path of the particles [m].</li> <li>D is the diffusivity of the particles [m\u00b2/s].</li> <li>v is the mean thermal speed of the particles [m/s].</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#arguments_2","title":"Arguments","text":"<ul> <li>diffusivity_particle : The diffusivity of the particles [m\u00b2/s].</li> <li>mean_thermal_speed_particle : The mean thermal speed of the   particles [m/s].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#returns_2","title":"Returns","text":"<ul> <li>The mean free path of the particles [m].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#references_2","title":"References","text":"<ul> <li>Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric chemistry and   physics, Section 13 TABLE 13.1 Fuchs Form of the Brownian Coagulation   Coefficient K12.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#signature_2","title":"Signature","text":"<pre><code>def _mean_free_path_l(\n    diffusivity_particle: Union[float, NDArray[np.float64]],\n    mean_thermal_speed_particle: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#get_brownian_kernel","title":"get_brownian_kernel","text":"<p>Show source in brownian_kernel.py:17</p> <p>Calculate the Brownian coagulation kernel for aerosol particles.</p> <p>This function computes the Brownian coagulation kernel, which is defined as the product of the diffusivity of the particles, the collection term <code>g</code>, and the radius of the particles. The equation used is:</p> <ul> <li>K = (4\u03c0 \u00d7 D \u00d7 r) / (r / (r + g) + 4D / (r \u00d7 v \u00d7 \u03b1))<ul> <li>K is the Brownian coagulation kernel [m\u00b3/s].</li> <li>D is the diffusivity of the particles [m\u00b2/s].</li> <li>r is the radius of the particles [m].</li> <li>g is the collection term for Brownian coagulation [dimensionless].</li> <li>v is the mean thermal speed of the particles [m/s].</li> <li>\u03b1 is the collision efficiency of the particles [dimensionless].</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#arguments_3","title":"Arguments","text":"<ul> <li>particle_radius : The radius of the particles [m].</li> <li>diffusivity_particle : The diffusivity of the particles [m\u00b2/s].</li> <li>g_collection_term_particle : The collection term for Brownian   coagulation [dimensionless].</li> <li>mean_thermal_speed_particle : The mean thermal speed of the   particles [m/s].</li> <li>alpha_collision_efficiency : The collision efficiency of the   particles [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#returns_3","title":"Returns","text":"<ul> <li>Square matrix of Brownian coagulation kernel for aerosol particles   [m\u00b3/s].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#references_3","title":"References","text":"<ul> <li>Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric chemistry and   physics, Section 13 TABLE 13.1 Fuchs Form of the Brownian Coagulation   Coefficient K12 (with alpha collision efficiency term 13.56).</li> </ul>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#signature_3","title":"Signature","text":"<pre><code>def get_brownian_kernel(\n    particle_radius: Union[float, NDArray[np.float64]],\n    diffusivity_particle: Union[float, NDArray[np.float64]],\n    g_collection_term_particle: Union[float, NDArray[np.float64]],\n    mean_thermal_speed_particle: Union[float, NDArray[np.float64]],\n    alpha_collision_efficiency: Union[float, NDArray[np.float64]] = 1.0,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#get_brownian_kernel_via_system_state","title":"get_brownian_kernel_via_system_state","text":"<p>Show source in brownian_kernel.py:98</p> <p>Calculate the Brownian coagulation kernel using system state parameters.</p> <p>This function calculates the Brownian coagulation kernel for aerosol particles by determining the necessary intermediate properties such as particle diffusivity and mean thermal speed. The equation used is:</p> <ul> <li>K = (4\u03c0 \u00d7 D \u00d7 r) / (r / (r + g) + 4D / (r \u00d7 v \u00d7 \u03b1))<ul> <li>K is the Brownian coagulation kernel [m\u00b3/s].</li> <li>D is the diffusivity of the particles [m\u00b2/s].</li> <li>r is the radius of the particles [m].</li> <li>g is the collection term for Brownian coagulation [dimensionless].</li> <li>v is the mean thermal speed of the particles [m/s].</li> <li>\u03b1 is the collision efficiency of the particles [dimensionless].</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#arguments_4","title":"Arguments","text":"<ul> <li>particle_radius : The radius of the particles [m].</li> <li>mass_particle : The mass of the particles [kg].</li> <li>temperature : The temperature of the air [K].</li> <li>pressure : The pressure of the air [Pa].</li> <li>alpha_collision_efficiency : The collision efficiency of the   particles [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#returns_4","title":"Returns","text":"<ul> <li>Square matrix of Brownian coagulation kernel for aerosol particles   [m\u00b3/s].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#references_4","title":"References","text":"<ul> <li>Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric chemistry and   physics, Section 13 TABLE 13.1 Fuchs Form of the Brownian Coagulation   Coefficient K12.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/brownian_kernel/#signature_4","title":"Signature","text":"<pre><code>def get_brownian_kernel_via_system_state(\n    particle_radius: Union[float, NDArray[np.float64]],\n    mass_particle: Union[float, NDArray[np.float64]],\n    temperature: float,\n    pressure: float,\n    alpha_collision_efficiency: Union[float, NDArray[np.float64]] = 1.0,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/","title":"Charged Dimensionless Kernel","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Charged Dimensionless Kernel</p> <p>Auto-generated documentation for particula.dynamics.coagulation.charged_dimensionless_kernel module.</p>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#get_coulomb_kernel_chahl2019","title":"get_coulomb_kernel_chahl2019","text":"<p>Show source in charged_dimensionless_kernel.py:283</p> <p>Chahl and Gopalakrishnan (2019) approximation for the dimensionless coagulation kernel.</p> <p>This function accounts for the Coulomb potential between particles using the Chahl and Gopalakrishnan (2019) approximation.</p>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#arguments","title":"Arguments","text":"<ul> <li>diffusive_knudsen : The diffusive Knudsen number (K_nD)     [dimensionless].</li> <li>coulomb_potential_ratio : The Coulomb potential ratio (phi_E)   [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#returns","title":"Returns","text":"<ul> <li>The dimensionless coagulation kernel (H) [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#references","title":"References","text":"<ul> <li>Chahl, H. S., &amp; Gopalakrishnan, R. (2019). High potential, near free   molecular regime Coulombic collisions in aerosols and dusty plasmas.   Aerosol Science and Technology, 53(8), 933-957.   https://doi.org/10.1080/02786826.2019.1614522</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#signature","title":"Signature","text":"<pre><code>def get_coulomb_kernel_chahl2019(\n    diffusive_knudsen: Union[float, NDArray[np.float64]],\n    coulomb_potential_ratio: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#get_coulomb_kernel_dyachkov2007","title":"get_coulomb_kernel_dyachkov2007","text":"<p>Show source in charged_dimensionless_kernel.py:110</p> <p>Dyachkov et al. (2007) approximation for the dimensionless coagulation kernel.</p> <p>This function accounts for the Coulomb potential between particles using the Dyachkov et al. (2007) approximation.</p>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#arguments_1","title":"Arguments","text":"<ul> <li>diffusive_knudsen : The diffusive Knudsen number (K_nD)     [dimensionless].</li> <li>coulomb_potential_ratio : The Coulomb potential ratio (phi_E)   [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#returns_1","title":"Returns","text":"<ul> <li>The dimensionless coagulation kernel (H) [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#references_1","title":"References","text":"<ul> <li>Dyachkov, S. A., Kustova, E. V., &amp; Kustov, A. V. (2007). Coagulation of   particles in the transition regime: The effect of the Coulomb potential.   Journal of Chemical Physics, 126(12).   https://doi.org/10.1063/1.2713719</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#signature_1","title":"Signature","text":"<pre><code>def get_coulomb_kernel_dyachkov2007(\n    diffusive_knudsen: Union[float, NDArray[np.float64]],\n    coulomb_potential_ratio: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#get_coulomb_kernel_gatti2008","title":"get_coulomb_kernel_gatti2008","text":"<p>Show source in charged_dimensionless_kernel.py:171</p> <p>Gatti et al. (2008) approximation for the dimensionless coagulation kernel.</p> <p>This function accounts for the Coulomb potential between particles using the Gatti et al. (2008) approximation.</p>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#arguments_2","title":"Arguments","text":"<ul> <li>diffusive_knudsen : The diffusive Knudsen number (K_nD)     [dimensionless].</li> <li>coulomb_potential_ratio : The Coulomb potential ratio (phi_E)   [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#returns_2","title":"Returns","text":"<ul> <li>The dimensionless coagulation kernel (H) [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#references_2","title":"References","text":"<ul> <li>Gatti, M., &amp; Kortshagen, U. (2008). Analytical model of particle   charging in plasmas over a wide range of collisionality. Physical Review   E - Statistical, Nonlinear, and Soft Matter Physics, 78(4).   https://doi.org/10.1103/PhysRevE.78.046402</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#signature_2","title":"Signature","text":"<pre><code>def get_coulomb_kernel_gatti2008(\n    diffusive_knudsen: Union[float, NDArray[np.float64]],\n    coulomb_potential_ratio: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#get_coulomb_kernel_gopalakrishnan2012","title":"get_coulomb_kernel_gopalakrishnan2012","text":"<p>Show source in charged_dimensionless_kernel.py:241</p> <p>Gopalakrishnan and Hogan (2012) approximation for the dimensionless coagulation kernel.</p> <p>This function accounts for the Coulomb potential between particles using the Gopalakrishnan and Hogan (2012) approximation.</p>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#arguments_3","title":"Arguments","text":"<ul> <li>diffusive_knudsen : The diffusive Knudsen number (K_nD)     [dimensionless].</li> <li>coulomb_potential_ratio : The Coulomb potential ratio (phi_E)   [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#returns_3","title":"Returns","text":"<ul> <li>The dimensionless coagulation kernel (H) [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#references_3","title":"References","text":"<ul> <li>Gopalakrishnan, R., &amp; Hogan, C. J. (2012). Coulomb-influenced collisions   in aerosols and dusty plasmas. Physical Review E - Statistical, Nonlinear,   and Soft Matter Physics, 85(2).   https://doi.org/10.1103/PhysRevE.85.026410</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#signature_3","title":"Signature","text":"<pre><code>def get_coulomb_kernel_gopalakrishnan2012(\n    diffusive_knudsen: Union[float, NDArray[np.float64]],\n    coulomb_potential_ratio: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#get_dimensional_kernel","title":"get_dimensional_kernel","text":"<p>Show source in charged_dimensionless_kernel.py:11</p> <p>Calculate the dimensioned coagulation kernel for each particle pair.</p> <p>This function computes the dimensioned coagulation kernel from the dimensionless coagulation kernel and the reduced quantities. All inputs are square matrices, representing all particle-particle interactions.</p>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#arguments_4","title":"Arguments","text":"<ul> <li>dimensionless_kernel : The dimensionless coagulation kernel (H)   [dimensionless].</li> <li>coulomb_potential_ratio : The Coulomb potential ratio [dimensionless].</li> <li>sum_of_radii : The sum of the radii of the particles [m].</li> <li>reduced_mass : The reduced mass of the particles [kg].</li> <li>reduced_friction_factor : The reduced friction factor of the   particles [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#returns_4","title":"Returns","text":"<ul> <li>The dimensioned coagulation kernel, as a square matrix, of all   particle-particle interactions [m\u00b3/s].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#references_4","title":"References","text":"<ul> <li>Chahl, H. S., &amp; Gopalakrishnan, R. (2019). High potential, near free   molecular regime Coulombic collisions in aerosols and dusty plasmas.   Aerosol Science and Technology, 53(8), 933-957.   https://doi.org/10.1080/02786826.2019.1614522</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#signature_4","title":"Signature","text":"<pre><code>def get_dimensional_kernel(\n    dimensionless_kernel: NDArray[np.float64],\n    coulomb_potential_ratio: NDArray[np.float64],\n    sum_of_radii: NDArray[np.float64],\n    reduced_mass: NDArray[np.float64],\n    reduced_friction_factor: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#get_hard_sphere_kernel","title":"get_hard_sphere_kernel","text":"<p>Show source in charged_dimensionless_kernel.py:59</p> <p>Hard sphere approximation for the dimensionless coagulation kernel.</p> <p>This function provides a hard sphere approximation for the dimensionless coagulation kernel based on the diffusive Knudsen number.</p>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#arguments_5","title":"Arguments","text":"<ul> <li>diffusive_knudsen : The diffusive Knudsen number (K_nD)   [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#returns_5","title":"Returns","text":"<ul> <li>The dimensionless coagulation kernel (H) [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#raises","title":"Raises","text":"<ul> <li>ValueError : If diffusive_knudsen contains negative values, NaN, or   infinity.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#references_5","title":"References","text":"<ul> <li>Dyachkov, S. A., Kustova, E. V., &amp; Kustov, A. V. (2007). Coagulation of   particles in the transition regime: The effect of the Coulomb potential.   Journal of Chemical Physics, 126(12).   https://doi.org/10.1063/1.2713719</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_dimensionless_kernel/#signature_5","title":"Signature","text":"<pre><code>def get_hard_sphere_kernel(\n    diffusive_knudsen: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/","title":"Charged Kernel Strategy","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Charged Kernel Strategy</p> <p>Auto-generated documentation for particula.dynamics.coagulation.charged_kernel_strategy module.</p>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#chargedkernelstrategyabc","title":"ChargedKernelStrategyABC","text":"<p>Show source in charged_kernel_strategy.py:32</p> <p>Abstract class for dimensionless coagulation strategies. This class defines the dimensionless kernel (H) method that must be implemented by any dimensionless coagulation strategy.</p>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#methods","title":"Methods","text":"<ul> <li>dimensionless (abstractmethod): Calculate the dimensionless coagulation kernel.</li> <li><code>-</code> kernel - Calculate the dimensioned coagulation kernel.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#signature","title":"Signature","text":"<pre><code>class ChargedKernelStrategyABC(ABC): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#chargedkernelstrategyabcdimensionless","title":"ChargedKernelStrategyABC().dimensionless","text":"<p>Show source in charged_kernel_strategy.py:45</p> <p>Return the dimensionless coagulation kernel (H)</p>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#arguments","title":"Arguments","text":"<ul> <li><code>-</code> diffusive_knudsen - The diffusive Knudsen number (K_nD) [dimensionless].</li> <li><code>-</code> coulomb_potential_ratio - The Coulomb potential ratio (phi_E) [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#returns","title":"Returns","text":"<p>The dimensionless coagulation kernel (H) [dimensionless].</p>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#references","title":"References","text":"<ul> <li>Dyachkov, S. A., Kustova, E. V., &amp; Kustov, A. V. (2007). Coagulation of particles in the transition regime: The effect of the Coulomb potential. Journal of Chemical Physics, 126(12). https://doi.org/10.1063/1.2713719</li> <li>Gatti, M., &amp; Kortshagen, U. (2008). Analytical model of particle charging in plasmas over a wide range of collisionality. Physical Review E - Statistical, Nonlinear, and Soft Matter Physics, 78(4). https://doi.org/10.1103/PhysRevE.78.046402</li> <li>Gopalakrishnan, R., &amp; Hogan, C. J. (2011). Determination of the transition regime collision kernel from mean first passage times. Aerosol Science and Technology, 45(12), 1499-1509. https://doi.org/10.1080/02786826.2011.601775</li> <li>Gopalakrishnan, R., &amp; Hogan, C. J. (2012). Coulomb-influenced collisions in aerosols and dusty plasmas. Physical Review E - Statistical, Nonlinear, and Soft Matter Physics, 85(2). https://doi.org/10.1103/PhysRevE.85.026410</li> <li>Chahl, H. S., &amp; Gopalakrishnan, R. (2019). High potential, near free molecular regime Coulombic collisions in aerosols and dusty plasmas. Aerosol Science and Technology, 53(8), 933-957. https://doi.org/10.1080/02786826.2019.1614522</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#signature_1","title":"Signature","text":"<pre><code>@abstractmethod\ndef dimensionless(\n    self,\n    diffusive_knudsen: NDArray[np.float64],\n    coulomb_potential_ratio: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#chargedkernelstrategyabckernel","title":"ChargedKernelStrategyABC().kernel","text":"<p>Show source in charged_kernel_strategy.py:88</p> <p>The dimensioned coagulation kernel for each particle pair, calculated from the dimensionless coagulation kernel and the reduced quantities. All inputs are square matrices, for all particle-particle interactions.</p>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#arguments_1","title":"Arguments","text":"<ul> <li>dimensionless_kernel : The dimensionless coagulation kernel     [dimensionless].</li> <li>coulomb_potential_ratio : The Coulomb potential ratio     [dimensionless].</li> <li>sum_of_radii : The sum of the radii of the particles [m].</li> <li>reduced_mass : The reduced mass of the particles [kg].</li> <li>reduced_friction_factor : The reduced friction factor of the     particles [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#returns_1","title":"Returns","text":"<ul> <li>The dimensioned coagulation kernel, as a square matrix, of all     particle-particle interactions [m^3/s].</li> </ul> <p>References: - Chahl, H. S., &amp; Gopalakrishnan, R. (2019). High potential, near free molecular regime Coulombic collisions in aerosols and dusty plasmas. Aerosol Science and Technology, 53(8), 933-957. https://doi.org/10.1080/02786826.2019.1614522</p>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#signature_2","title":"Signature","text":"<pre><code>def kernel(\n    self,\n    dimensionless_kernel: NDArray[np.float64],\n    coulomb_potential_ratio: NDArray[np.float64],\n    sum_of_radii: NDArray[np.float64],\n    reduced_mass: NDArray[np.float64],\n    reduced_friction_factor: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#coulombdyachkov2007kernelstrategy","title":"CoulombDyachkov2007KernelStrategy","text":"<p>Show source in charged_kernel_strategy.py:148</p> <p>Dyachkov et al. (2007) approximation for the dimensionless coagulation kernel. Accounts for the Coulomb potential between particles.</p>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#references_1","title":"References","text":"<ul> <li>Dyachkov, S. A., Kustova, E. V., &amp; Kustov, A. V. (2007). Coagulation of particles in the transition regime: The effect of the Coulomb potential. Journal of Chemical Physics, 126(12). https://doi.org/10.1063/1.2713719</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#signature_3","title":"Signature","text":"<pre><code>class CoulombDyachkov2007KernelStrategy(ChargedKernelStrategyABC): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#see-also","title":"See also","text":"<ul> <li>ChargedKernelStrategyABC</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#coulombdyachkov2007kernelstrategydimensionless","title":"CoulombDyachkov2007KernelStrategy().dimensionless","text":"<p>Show source in charged_kernel_strategy.py:160</p>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#signature_4","title":"Signature","text":"<pre><code>def dimensionless(\n    self,\n    diffusive_knudsen: NDArray[np.float64],\n    coulomb_potential_ratio: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#coulombgatti2008kernelstrategy","title":"CoulombGatti2008KernelStrategy","text":"<p>Show source in charged_kernel_strategy.py:170</p> <p>Gatti and Kortshagen (2008) approximation for the dimensionless coagulation kernel. Accounts for the Coulomb potential between particles.</p>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#references_2","title":"References","text":"<ul> <li>Gatti, M., &amp; Kortshagen, U. (2008). Analytical model of particle charging in plasmas over a wide range of collisionality. Physical Review E - Statistical, Nonlinear, and Soft Matter Physics, 78(4). https://doi.org/10.1103/PhysRevE.78.046402</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#signature_5","title":"Signature","text":"<pre><code>class CoulombGatti2008KernelStrategy(ChargedKernelStrategyABC): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#see-also_1","title":"See also","text":"<ul> <li>ChargedKernelStrategyABC</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#coulombgatti2008kernelstrategydimensionless","title":"CoulombGatti2008KernelStrategy().dimensionless","text":"<p>Show source in charged_kernel_strategy.py:183</p>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#signature_6","title":"Signature","text":"<pre><code>def dimensionless(\n    self,\n    diffusive_knudsen: NDArray[np.float64],\n    coulomb_potential_ratio: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#coulombgopalakrishnan2012kernelstrategy","title":"CoulombGopalakrishnan2012KernelStrategy","text":"<p>Show source in charged_kernel_strategy.py:193</p> <p>Gopalakrishnan and Hogan (2012) approximation for the dimensionless coagulation kernel. Accounts for the Coulomb potential between particles.</p>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#references_3","title":"References","text":"<ul> <li>Gopalakrishnan, R., &amp; Hogan, C. J. (2012). Coulomb-influenced collisions in aerosols and dusty plasmas. Physical Review E - Statistical, Nonlinear, and Soft Matter Physics, 85(2). https://doi.org/10.1103/PhysRevE.85.026410</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#signature_7","title":"Signature","text":"<pre><code>class CoulombGopalakrishnan2012KernelStrategy(ChargedKernelStrategyABC): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#see-also_2","title":"See also","text":"<ul> <li>ChargedKernelStrategyABC</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#coulombgopalakrishnan2012kernelstrategydimensionless","title":"CoulombGopalakrishnan2012KernelStrategy().dimensionless","text":"<p>Show source in charged_kernel_strategy.py:206</p>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#signature_8","title":"Signature","text":"<pre><code>def dimensionless(\n    self,\n    diffusive_knudsen: NDArray[np.float64],\n    coulomb_potential_ratio: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#coulumbchahl2019kernelstrategy","title":"CoulumbChahl2019KernelStrategy","text":"<p>Show source in charged_kernel_strategy.py:218</p> <p>Chahl and Gopalakrishnan (2019) approximation for the dimensionless coagulation kernel. Accounts for the Coulomb potential between particles.</p>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#references_4","title":"References","text":"<ul> <li>Chahl, H. S., &amp; Gopalakrishnan, R. (2019). High potential, near free molecular regime Coulombic collisions in aerosols and dusty plasmas. Aerosol Science and Technology, 53(8), 933-957. https://doi.org/10.1080/02786826.2019.1614522</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#signature_9","title":"Signature","text":"<pre><code>class CoulumbChahl2019KernelStrategy(ChargedKernelStrategyABC): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#see-also_3","title":"See also","text":"<ul> <li>ChargedKernelStrategyABC</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#coulumbchahl2019kernelstrategydimensionless","title":"CoulumbChahl2019KernelStrategy().dimensionless","text":"<p>Show source in charged_kernel_strategy.py:231</p>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#signature_10","title":"Signature","text":"<pre><code>def dimensionless(\n    self,\n    diffusive_knudsen: NDArray[np.float64],\n    coulomb_potential_ratio: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#hardspherekernelstrategy","title":"HardSphereKernelStrategy","text":"<p>Show source in charged_kernel_strategy.py:133</p> <p>Hard sphere dimensionless coagulation strategy.</p>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#signature_11","title":"Signature","text":"<pre><code>class HardSphereKernelStrategy(ChargedKernelStrategyABC): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#see-also_4","title":"See also","text":"<ul> <li>ChargedKernelStrategyABC</li> </ul>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#hardspherekernelstrategydimensionless","title":"HardSphereKernelStrategy().dimensionless","text":"<p>Show source in charged_kernel_strategy.py:138</p>"},{"location":"API/particula/dynamics/coagulation/charged_kernel_strategy/#signature_12","title":"Signature","text":"<pre><code>def dimensionless(\n    self, diffusive_knudsen: NDArray[np.float64], coulomb_potential_ratio: ignore\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_factories/","title":"Coagulation Factories","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Coagulation Factories</p> <p>Auto-generated documentation for particula.dynamics.coagulation.coagulation_factories module.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_factories/#coagulationfactory","title":"CoagulationFactory","text":"<p>Show source in coagulation_factories.py:29</p> <p>Factory class for creating coagulation strategy instances based on a given type string. Supported types include:     - 'brownian'     - 'charged'     - 'turbulent_shear'     - 'turbulent_dns'     - 'combine'</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_factories/#methods","title":"Methods","text":"<ul> <li>get_builders() : Returns the mapping of strategy types to builder     instances.</li> <li>get_strategy(strategy_type, parameters): Gets the strategy instance     for the specified strategy type.<ul> <li><code>-</code> strategy_type - Type of coagulation strategy to use, can be     'brownian', 'charged', 'turbulent_shear', 'turbulent_dns', or     'combine'.</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_factories/#signature","title":"Signature","text":"<pre><code>class CoagulationFactory(\n    StrategyFactoryABC[\n        Union[\n            BrownianCoagulationBuilder,\n            ChargedCoagulationBuilder,\n            TurbulentShearCoagulationBuilder,\n            TurbulentDNSCoagulationBuilder,\n            CombineCoagulationStrategyBuilder,\n        ],\n        CoagulationStrategyABC,\n    ]\n): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_factories/#see-also","title":"See also","text":"<ul> <li>BrownianCoagulationBuilder</li> <li>ChargedCoagulationBuilder</li> <li>CoagulationStrategyABC</li> <li>CombineCoagulationStrategyBuilder</li> <li>TurbulentDNSCoagulationBuilder</li> <li>TurbulentShearCoagulationBuilder</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_factories/#coagulationfactoryget_builders","title":"CoagulationFactory().get_builders","text":"<p>Show source in coagulation_factories.py:60</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_factories/#signature_1","title":"Signature","text":"<pre><code>def get_builders(self) -&gt; Dict[str, Any]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/","title":"Coagulation Rate","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Coagulation Rate</p> <p>Auto-generated documentation for particula.dynamics.coagulation.coagulation_rate module.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#get_coagulation_gain_rate_continuous","title":"get_coagulation_gain_rate_continuous","text":"<p>Show source in coagulation_rate.py:172</p> <p>Calculate the coagulation gain rate via continuous integration.</p> <p>This function converts the distribution to a continuous form, then uses RectBivariateSpline to interpolate and integrate:</p> <ul> <li>gain_rate\u00ae = \u222b kernel(r, r') \u00d7 concentration\u00ae \u00d7 concentration(r') dr'</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#arguments","title":"Arguments","text":"<ul> <li>radius : The particle radius array [m].</li> <li>concentration : The particle distribution.</li> <li>kernel : Coagulation kernel matrix.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#returns","title":"Returns","text":"<ul> <li>The coagulation gain rate, in the shape of radius.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#examples","title":"Examples","text":"<pre><code>import numpy as np\nimport particula as par\n\nr = np.array([1e-7, 2e-7, 3e-7])\nconc = np.array([1.0, 0.5, 0.2])\nkern = np.ones((3, 3)) * 1e-9\n\ngain_cont = par.dynamics.get_coagulation_gain_rate_continuous(\n    r, conc, kern\n)\nprint(gain_cont)\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#references","title":"References","text":"<ul> <li>Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric chemistry and   physics, Chapter 13, Equation 13.61.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#signature","title":"Signature","text":"<pre><code>def get_coagulation_gain_rate_continuous(\n    radius: Union[float, NDArray[np.float64]],\n    concentration: Union[float, NDArray[np.float64]],\n    kernel: NDArray[np.float64],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#get_coagulation_gain_rate_discrete","title":"get_coagulation_gain_rate_discrete","text":"<p>Show source in coagulation_rate.py:58</p> <p>Calculate the coagulation gain rate (using a quasi-continuous approach).</p> <p>Though named \"discrete,\" this function converts the discrete distribution to a PDF and uses interpolation (RectBivariateSpline) to approximate the gain term. The concept is:</p> <ul> <li>gain_rate\u00ae = \u222b kernel(r, r') \u00d7 PDF\u00ae \u00d7 PDF(r') dr'   (implemented via numeric integration)</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#arguments_1","title":"Arguments","text":"<ul> <li>radius : The particle radius array [m].</li> <li>concentration : The particle distribution.</li> <li>kernel : Coagulation kernel matrix.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#returns_1","title":"Returns","text":"<ul> <li>The coagulation gain rate, matched to the shape of radius.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#examples_1","title":"Examples","text":"<pre><code>import numpy as np\nimport particula as par\n\nr = np.array([1e-7, 2e-7, 3e-7])\nconc = np.array([1.0, 0.5, 0.2])\nkern = np.ones((3, 3)) * 1e-9\n\ngain_val = par.dynamics.get_coagulation_gain_rate_discrete(\n    r, conc, kern\n)\nprint(gain_val)\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#references_1","title":"References","text":"<ul> <li>Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric chemistry and   physics, Chapter 13, Equation 13.61.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#signature_1","title":"Signature","text":"<pre><code>def get_coagulation_gain_rate_discrete(\n    radius: Union[float, NDArray[np.float64]],\n    concentration: Union[float, NDArray[np.float64]],\n    kernel: NDArray[np.float64],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#get_coagulation_loss_rate_continuous","title":"get_coagulation_loss_rate_continuous","text":"<p>Show source in coagulation_rate.py:128</p> <p>Calculate the coagulation loss rate via continuous integration.</p> <p>This method integrates the product of kernel and concentration over the radius grid. The equation is:</p> <ul> <li>loss_rate\u00ae = concentration\u00ae \u00d7 \u222b kernel(r, r') \u00d7 concentration(r') dr'</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#arguments_2","title":"Arguments","text":"<ul> <li>radius : The particle radius array [m].</li> <li>concentration : The particle distribution.</li> <li>kernel : Coagulation kernel matrix (NDArray[np.float64]).</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#returns_2","title":"Returns","text":"<ul> <li>The coagulation loss rate.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#examples_2","title":"Examples","text":"<pre><code>import numpy as np\nimport particula as par\n\nr = np.array([1e-7, 2e-7, 3e-7])\nconc = np.array([1.0, 0.5, 0.2])\nkern = np.ones((3, 3)) * 1e-9\n\nloss_cont = par.dynamics.get_coagulation_loss_rate_continuous(\n    r, conc, kern\n)\nprint(loss_cont)\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#references_2","title":"References","text":"<ul> <li>Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric chemistry and   physics, Chapter 13, Equation 13.61.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#signature_2","title":"Signature","text":"<pre><code>def get_coagulation_loss_rate_continuous(\n    radius: Union[float, NDArray[np.float64]],\n    concentration: Union[float, NDArray[np.float64]],\n    kernel: NDArray[np.float64],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#get_coagulation_loss_rate_discrete","title":"get_coagulation_loss_rate_discrete","text":"<p>Show source in coagulation_rate.py:20</p> <p>Calculate the coagulation loss rate via a discrete summation approach.</p> <p>This function computes the loss rate of particles from collisions by summing over all size classes. The equation is:</p> <ul> <li>loss_rate = \u03a3\u1d62\u03a3\u2c7c [kernel(i, j) \u00d7 concentration(i) \u00d7 concentration(j)]</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#arguments_3","title":"Arguments","text":"<ul> <li>concentration : The distribution of particles.</li> <li>kernel : The coagulation kernel matrix (NDArray[np.float64]).</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#returns_3","title":"Returns","text":"<ul> <li>The coagulation loss rate (float or NDArray[np.float64]).</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#examples_3","title":"Examples","text":"<pre><code>import numpy as np\nimport particula as par\n\nconc = np.array([1.0, 2.0, 3.0])\nkern = np.ones((3, 3))\nloss = par.dynamics.get_coagulation_loss_rate_discrete(conc, kern)\nprint(loss)\n# Example output: 36.0\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#references_3","title":"References","text":"<ul> <li>Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric chemistry and   physics, Chapter 13, Equation 13.61.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_rate/#signature_3","title":"Signature","text":"<pre><code>def get_coagulation_loss_rate_discrete(\n    concentration: Union[float, NDArray[np.float64]], kernel: NDArray[np.float64]\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/sedimentation_kernel/","title":"Sedimentation Kernel","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Sedimentation Kernel</p> <p>Auto-generated documentation for particula.dynamics.coagulation.sedimentation_kernel module.</p>"},{"location":"API/particula/dynamics/coagulation/sedimentation_kernel/#calculate_collision_efficiency_function","title":"calculate_collision_efficiency_function","text":"<p>Show source in sedimentation_kernel.py:29</p> <p>Calculate the collision efficiency between two particles (placeholder).</p> <p>This function calculates the collision efficiency E for two particles of radii radius1 and radius2, which can depend on additional factors (e.g., fluid flow or electrostatic forces). Currently not implemented.</p>"},{"location":"API/particula/dynamics/coagulation/sedimentation_kernel/#arguments","title":"Arguments","text":"<ul> <li>radius1 : The radius of the first particle [m].</li> <li>radius2 : The radius of the second particle [m].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/sedimentation_kernel/#returns","title":"Returns","text":"<ul> <li>Collision efficiency [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/sedimentation_kernel/#examples","title":"Examples","text":"<pre><code># Not implemented\ncalculate_collision_efficiency_function(1e-7, 2e-7)\n# Raises NotImplementedError\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/sedimentation_kernel/#references","title":"References","text":"<ul> <li>Saffman, P. G., &amp; Turner, J. S. (1956). On the collision of drops   in turbulent clouds. Journal of Fluid Mechanics, 1(1), 16-30.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/sedimentation_kernel/#signature","title":"Signature","text":"<pre><code>def calculate_collision_efficiency_function(radius1: float, radius2: float) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/sedimentation_kernel/#get_sedimentation_kernel_sp2016","title":"get_sedimentation_kernel_sp2016","text":"<p>Show source in sedimentation_kernel.py:63</p> <p>Calculate the sedimentation kernel for aerosol particles (Equation 13A.4).</p> <p>This function computes the coagulation kernel due to gravitational settling, where larger particles settle faster and overtake smaller ones. The kernel is based on the combined diameters, the settling velocity difference, and the collision efficiency.</p> <p>Equation: - K(i, j) = (\u03c0 / 4) \u00d7 (D\u1d62 + D\u2c7c)\u00b2 \u00d7 |v\u1d62 - v\u2c7c| \u00d7 E\u1d62\u2c7c     - D\u1d62, D\u2c7c : diameters of particle i and j [m],     - v\u1d62, v\u2c7c : settling velocities [m/s],     - E\u1d62\u2c7c : collision efficiency (dimensionless).</p>"},{"location":"API/particula/dynamics/coagulation/sedimentation_kernel/#arguments_1","title":"Arguments","text":"<ul> <li>particle_radius : Array of particle radii [m].</li> <li>settling_velocities : Array of particle settling velocities [m/s].</li> <li>calculate_collision_efficiency : Whether to calculate collision   efficiency or use 1. Defaults to True.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/sedimentation_kernel/#returns_1","title":"Returns","text":"<ul> <li>Sedimentation kernel matrix [m\u00b3/s], shape (n, n).</li> </ul>"},{"location":"API/particula/dynamics/coagulation/sedimentation_kernel/#examples_1","title":"Examples","text":"Example<pre><code>import numpy as np\n\nrads = np.array([1e-7, 2e-7])\nvels = np.array([5e-3, 1e-2])\nkernel = get_sedimentation_kernel_sp2016(rads, vels)\nprint(kernel)\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/sedimentation_kernel/#references_1","title":"References","text":"<ul> <li>Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric chemistry   and physics (3<sup>rd</sup> ed.). John Wiley &amp; Sons. Chapter 13, Equation 13A.4.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/sedimentation_kernel/#signature_1","title":"Signature","text":"<pre><code>def get_sedimentation_kernel_sp2016(\n    particle_radius: NDArray[np.float64],\n    settling_velocities: NDArray[np.float64],\n    calculate_collision_efficiency: bool = True,\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/sedimentation_kernel/#get_sedimentation_kernel_sp2016_via_system_state","title":"get_sedimentation_kernel_sp2016_via_system_state","text":"<p>Show source in sedimentation_kernel.py:128</p> <p>Calculate the sedimentation kernel (Equation 13A.4) via system state.</p> <p>This function first derives settling velocities using the system state (particle radius, density, temperature, pressure), then calls get_sedimentation_kernel_sp2016.</p>"},{"location":"API/particula/dynamics/coagulation/sedimentation_kernel/#arguments_2","title":"Arguments","text":"<ul> <li>particle_radius : Array of particle radii [m].</li> <li>particle_density : Array of particle densities [kg/m\u00b3].</li> <li>temperature : Temperature [K].</li> <li>pressure : Pressure [Pa].</li> <li>calculate_collision_efficiency : Whether to calculate collision   efficiency or use 1. Defaults to True.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/sedimentation_kernel/#returns_2","title":"Returns","text":"<ul> <li>Sedimentation kernel matrix [m\u00b3/s], shape (n, n).</li> </ul>"},{"location":"API/particula/dynamics/coagulation/sedimentation_kernel/#examples_2","title":"Examples","text":"Example<pre><code>import numpy as np\nrads = np.array([1e-7, 2e-7])\ndens = np.array([1000, 1200])\nkernel = get_sedimentation_kernel_sp2016_via_system_state(\n    particle_radius=rads,\n    particle_density=dens,\n    temperature=298,\n    pressure=101325\n)\nprint(kernel)\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/sedimentation_kernel/#references_2","title":"References","text":"<ul> <li>Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric chemistry   and physics (3<sup>rd</sup> ed.). John Wiley &amp; Sons. Chapter 13, Equation 13A.4.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/sedimentation_kernel/#signature_2","title":"Signature","text":"<pre><code>@validate_inputs({\"temperature\": \"positive\", \"pressure\": \"positive\"})\ndef get_sedimentation_kernel_sp2016_via_system_state(\n    particle_radius: NDArray[np.float64],\n    particle_density: NDArray[np.float64],\n    temperature: float,\n    pressure: float,\n    calculate_collision_efficiency: bool = True,\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_shear_kernel/","title":"Turbulent Shear Kernel","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Turbulent Shear Kernel</p> <p>Auto-generated documentation for particula.dynamics.coagulation.turbulent_shear_kernel module.</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_shear_kernel/#get_turbulent_shear_kernel_st1956","title":"get_turbulent_shear_kernel_st1956","text":"<p>Show source in turbulent_shear_kernel.py:31</p> <p>Calculate the turbulent shear kernel (Equation 13A.2, Saffman &amp; Turner, 1956).</p> <p>This function implements the formula for collisions induced by turbulent shear. The turbulent dissipation rate and kinematic viscosity determine how rapidly eddies drive particle collisions.</p> <p>Equation: - K(D\u2081, D\u2082) = \u221a(\u03c0 \u00d7 e\u2096 / (120 \u00d7 \u03bd)) \u00d7 (D\u2081 + D\u2082)\u00b3     - e\u2096 : Turbulent kinetic energy dissipation rate [m\u00b2/s\u00b3],     - \u03bd : Kinematic viscosity [m\u00b2/s],     - D\u2081, D\u2082 : diameters of particles [m].</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_shear_kernel/#arguments","title":"Arguments","text":"<ul> <li>particle_radius : Array of particle radii [m].</li> <li>turbulent_dissipation : Turbulent energy dissipation rate [m\u00b2/s\u00b3].</li> <li>kinematic_viscosity : Kinematic viscosity [m\u00b2/s].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_shear_kernel/#returns","title":"Returns","text":"<ul> <li>Turbulent shear kernel matrix [m\u00b3/s], shape (n, n).</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_shear_kernel/#examples","title":"Examples","text":"Example<pre><code>import numpy as np\n\nr = np.array([1e-7, 2e-7])\nk_matrix = get_turbulent_shear_kernel_st1956(\n    particle_radius=r,\n    turbulent_dissipation=1e-3,\n    kinematic_viscosity=1.5e-5\n)\nprint(k_matrix)\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_shear_kernel/#references","title":"References","text":"<ul> <li>Saffman, P. G., &amp; Turner, J. S. (1956). On the collision of drops   in turbulent clouds. Journal of Fluid Mechanics, 1(1), 16-30.</li> <li>Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric chemistry and   physics (3<sup>rd</sup> ed.). John Wiley &amp; Sons. Chapter 13, Equation 13A.2.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_shear_kernel/#signature","title":"Signature","text":"<pre><code>def get_turbulent_shear_kernel_st1956(\n    particle_radius: NDArray[np.float64],\n    turbulent_dissipation: float,\n    kinematic_viscosity: float,\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_shear_kernel/#get_turbulent_shear_kernel_st1956_via_system_state","title":"get_turbulent_shear_kernel_st1956_via_system_state","text":"<p>Show source in turbulent_shear_kernel.py:86</p> <p>Calculate the turbulent shear kernel using system state data.</p> <p>This version derives the kinematic viscosity from the temperature and fluid density, then uses get_turbulent_shear_kernel_st1956 for the Saffman &amp; Turner (1956) formula:</p> <p>Equation:     - K(D\u2081, D\u2082) = \u221a(\u03c0 \u00d7 e\u2096 / (120 \u00d7 \u03bd)) \u00d7 (D\u2081 + D\u2082)\u00b3       - e\u2096 : Turbulent dissipation rate [m\u00b2/s\u00b3],       - \u03bd : Kinematic viscosity [m\u00b2/s],       - D\u2081, D\u2082 : particle diameters [m].</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_shear_kernel/#arguments_1","title":"Arguments","text":"<ul> <li>particle_radius : Array of particle radii [m].</li> <li>turbulent_dissipation : Turbulent dissipation rate [m\u00b2/s\u00b3].</li> <li>temperature : Temperature [K].</li> <li>fluid_density : Fluid density [kg/m\u00b3].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_shear_kernel/#returns_1","title":"Returns","text":"<ul> <li>Turbulent shear kernel matrix [m\u00b3/s], shape (n, n).</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_shear_kernel/#examples_1","title":"Examples","text":"Example<pre><code>import numpy as np\n\nr = np.array([1e-7, 2e-7])\nkernel_matrix = get_turbulent_shear_kernel_st1956_via_system_state(\n    particle_radius=r,\n    turbulent_dissipation=1e-3,\n    temperature=300,\n    fluid_density=1.2\n)\nprint(kernel_matrix)\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_shear_kernel/#references_1","title":"References","text":"<ul> <li>Saffman, P. G., &amp; Turner, J. S. (1956). On the collision of drops   in turbulent clouds. Journal of Fluid Mechanics, 1(1), 16-30.</li> <li>Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric chemistry and   physics (3<sup>rd</sup> ed.). John Wiley &amp; Sons. Chapter 13, Equation 13A.2.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_shear_kernel/#signature_1","title":"Signature","text":"<pre><code>def get_turbulent_shear_kernel_st1956_via_system_state(\n    particle_radius: NDArray[np.float64],\n    turbulent_dissipation: float,\n    temperature: float,\n    fluid_density: float,\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/","title":"Coagulation Builder","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Coagulation Builder</p> <p>Auto-generated documentation for particula.dynamics.coagulation.coagulation_builder module.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/#modules","title":"Modules","text":"<ul> <li>BrownianCoagulationBuilder</li> <li>ChargedCoagulationBuilder</li> <li>Coagulation Builder Mixin</li> <li>CombineCoagulationStrategyBuilder</li> <li>TurbulentDNSCoagulationBuilder</li> <li>TurbulentShearCoagulationBuilder</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/brownian_coagulation_builder/","title":"BrownianCoagulationBuilder","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Coagulation Builder / BrownianCoagulationBuilder</p> <p>Auto-generated documentation for particula.dynamics.coagulation.coagulation_builder.brownian_coagulation_builder module.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/brownian_coagulation_builder/#browniancoagulationbuilder_1","title":"BrownianCoagulationBuilder","text":"<p>Show source in brownian_coagulation_builder.py:18</p> <p>Brownian Coagulation Builder class for coagulation strategies.</p> <p>This class is used to create coagulation strategies based on the specified distribution type and kernel strategy. This provides a validation layer to ensure that the correct values are passed to the coagulation strategy.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/brownian_coagulation_builder/#methods","title":"Methods","text":"<ul> <li><code>set_distribution_type(distribution_type)</code> - Set the distribution type.</li> <li><code>set_kernel_strategy(kernel_strategy)</code> - Set the kernel strategy.</li> <li><code>set_parameters(params)</code> - Set the parameters of the CoagulationStrategy     object from a dictionary including optional units.</li> <li><code>build()</code> - Validate and return the CoagulationStrategy object.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/brownian_coagulation_builder/#signature","title":"Signature","text":"<pre><code>class BrownianCoagulationBuilder(BuilderABC, BuilderDistributionTypeMixin):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/brownian_coagulation_builder/#see-also","title":"See also","text":"<ul> <li>BuilderABC</li> <li>BuilderDistributionTypeMixin</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/brownian_coagulation_builder/#browniancoagulationbuilderbuild","title":"BrownianCoagulationBuilder().build","text":"<p>Show source in brownian_coagulation_builder.py:41</p> <p>Validate and return the CoagulationStrategy object.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/brownian_coagulation_builder/#returns","title":"Returns","text":"<ul> <li><code>CoagulationStrategy</code> - Instance of the CoagulationStrategy object.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/brownian_coagulation_builder/#signature_1","title":"Signature","text":"<pre><code>def build(self) -&gt; CoagulationStrategyABC: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/brownian_coagulation_builder/#see-also_1","title":"See also","text":"<ul> <li>CoagulationStrategyABC</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/charged_coagulation_builder/","title":"ChargedCoagulationBuilder","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Coagulation Builder / ChargedCoagulationBuilder</p> <p>Auto-generated documentation for particula.dynamics.coagulation.coagulation_builder.charged_coagulation_builder module.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/charged_coagulation_builder/#chargedcoagulationbuilder_1","title":"ChargedCoagulationBuilder","text":"<p>Show source in charged_coagulation_builder.py:23</p> <p>Charged Coagulation Builder class for coagulation strategies.</p> <p>This class is used to create charged coagulation strategies based on the specified distribution type and kernel strategy. This provides a validation layer to ensure that the correct values are passed to the coagulation strategy.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/charged_coagulation_builder/#methods","title":"Methods","text":"<ul> <li><code>set_distribution_type(distribution_type)</code> - Set the distribution type.</li> <li><code>set_kernel_strategy(kernel_strategy)</code> - Set the kernel strategy.</li> <li><code>set_parameters(params)</code> - Set the parameters of the CoagulationStrategy     object from a dictionary including optional units.</li> <li><code>build()</code> - Validate and return the CoagulationStrategy object.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/charged_coagulation_builder/#signature","title":"Signature","text":"<pre><code>class ChargedCoagulationBuilder(BuilderABC, BuilderDistributionTypeMixin):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/charged_coagulation_builder/#see-also","title":"See also","text":"<ul> <li>BuilderABC</li> <li>BuilderDistributionTypeMixin</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/charged_coagulation_builder/#chargedcoagulationbuilderbuild","title":"ChargedCoagulationBuilder().build","text":"<p>Show source in charged_coagulation_builder.py:79</p> <p>Validate and return the ChargedCoagulationStrategy object.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/charged_coagulation_builder/#returns","title":"Returns","text":"<ul> <li><code>CoagulationStrategy</code> - Instance of the CoagulationStrategy object.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/charged_coagulation_builder/#signature_1","title":"Signature","text":"<pre><code>def build(self) -&gt; CoagulationStrategyABC: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/charged_coagulation_builder/#see-also_1","title":"See also","text":"<ul> <li>CoagulationStrategyABC</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/charged_coagulation_builder/#chargedcoagulationbuilderset_charged_kernel_strategy","title":"ChargedCoagulationBuilder().set_charged_kernel_strategy","text":"<p>Show source in charged_coagulation_builder.py:48</p> <p>Set the kernel strategy.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/charged_coagulation_builder/#arguments","title":"Arguments","text":"<p>charged_kernel_strategy : The kernel strategy to be set. charged_kernel_strategy_units : Not used.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/charged_coagulation_builder/#raises","title":"Raises","text":"<ul> <li><code>ValueError</code> - If the kernel strategy is not valid.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/charged_coagulation_builder/#signature_2","title":"Signature","text":"<pre><code>def set_charged_kernel_strategy(\n    self,\n    charged_kernel_strategy: ChargedKernelStrategyABC,\n    charged_kernel_strategy_units: Optional[str] = None,\n): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/charged_coagulation_builder/#see-also_2","title":"See also","text":"<ul> <li>ChargedKernelStrategyABC</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/coagulation_builder_mixin/","title":"Coagulation Builder Mixin","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Coagulation Builder / Coagulation Builder Mixin</p> <p>Auto-generated documentation for particula.dynamics.coagulation.coagulation_builder.coagulation_builder_mixin module.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/coagulation_builder_mixin/#builderdistributiontypemixin","title":"BuilderDistributionTypeMixin","text":"<p>Show source in coagulation_builder_mixin.py:22</p> <p>Mixin class for distribution type in coagulation strategies.</p> <p>This mixin class is used to set the distribution type for coagulation strategies. It provides a validation layer to ensure that the correct distribution type is passed to the coagulation strategy.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/coagulation_builder_mixin/#methods","title":"Methods","text":"<ul> <li><code>set_distribution_type(distribution_type)</code> - Set the distribution type.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/coagulation_builder_mixin/#signature","title":"Signature","text":"<pre><code>class BuilderDistributionTypeMixin:\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/coagulation_builder_mixin/#builderdistributiontypemixinset_distribution_type","title":"BuilderDistributionTypeMixin().set_distribution_type","text":"<p>Show source in coagulation_builder_mixin.py:36</p> <p>Set the distribution type.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/coagulation_builder_mixin/#arguments","title":"Arguments","text":"<p>distribution_type : The distribution type to be set.     Options are \"discrete\", \"continuous_pdf\", \"particle_resolved\". distribution_type_units : Not used.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/coagulation_builder_mixin/#raises","title":"Raises","text":"<ul> <li><code>ValueError</code> - If the distribution type is not valid.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/coagulation_builder_mixin/#signature_1","title":"Signature","text":"<pre><code>def set_distribution_type(\n    self, distribution_type: str, distribution_type_units: str = None\n): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/coagulation_builder_mixin/#builderfluiddensitymixin","title":"BuilderFluidDensityMixin","text":"<p>Show source in coagulation_builder_mixin.py:107</p> <p>Mixin class for fluid density parameters.</p> <p>This mixin class is used to set the fluid density for turbulent shear coagulation strategies. It provides a validation layer to ensure that the correct values are passed.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/coagulation_builder_mixin/#signature_2","title":"Signature","text":"<pre><code>class BuilderFluidDensityMixin:\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/coagulation_builder_mixin/#builderfluiddensitymixinset_fluid_density","title":"BuilderFluidDensityMixin().set_fluid_density","text":"<p>Show source in coagulation_builder_mixin.py:118</p> <p>Set the density of the particle in kg/m^3.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/coagulation_builder_mixin/#arguments_1","title":"Arguments","text":"<p>density : Density of the particle. density_units : Units of the density. Default is kg/m^3</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/coagulation_builder_mixin/#signature_3","title":"Signature","text":"<pre><code>@validate_inputs({\"fluid_density\": \"positive\"})\ndef set_fluid_density(\n    self, fluid_density: Union[float, NDArray[np.float64]], fluid_density_units: str\n): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/coagulation_builder_mixin/#builderturbulentdissipationmixin","title":"BuilderTurbulentDissipationMixin","text":"<p>Show source in coagulation_builder_mixin.py:73</p> <p>Mixin class for turbulent shear parameters.</p> <p>This mixin class is used to set the turbulent dissipation and fluid density for turbulent shear coagulation strategies. It provides a validation layer to ensure that the correct values are passed.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/coagulation_builder_mixin/#signature_4","title":"Signature","text":"<pre><code>class BuilderTurbulentDissipationMixin:\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/coagulation_builder_mixin/#builderturbulentdissipationmixinset_turbulent_dissipation","title":"BuilderTurbulentDissipationMixin().set_turbulent_dissipation","text":"<p>Show source in coagulation_builder_mixin.py:84</p> <p>Set the turbulent dissipation rate.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/coagulation_builder_mixin/#arguments_2","title":"Arguments","text":"<p>turbulent_dissipation : Turbulent dissipation rate. turbulent_dissipation_units : Units of the turbulent dissipation     rate. Default is m<sup>2/s</sup>3.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/coagulation_builder_mixin/#signature_5","title":"Signature","text":"<pre><code>@validate_inputs({\"turbulent_dissipation\": \"nonnegative\"})\ndef set_turbulent_dissipation(\n    self, turbulent_dissipation: float, turbulent_dissipation_units: str\n): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/combine_coagulation_strategy_builder/","title":"CombineCoagulationStrategyBuilder","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Coagulation Builder / CombineCoagulationStrategyBuilder</p> <p>Auto-generated documentation for particula.dynamics.coagulation.coagulation_builder.combine_coagulation_strategy_builder module.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/combine_coagulation_strategy_builder/#combinecoagulationstrategybuilder_1","title":"CombineCoagulationStrategyBuilder","text":"<p>Show source in combine_coagulation_strategy_builder.py:22</p> <p>Builder used to create a CombineCoagulationStrategy object.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/combine_coagulation_strategy_builder/#attributes","title":"Attributes","text":"<p>strategies (List[CoagulationStrategyABC]):     Collection of CoagulationStrategyABC objects to be combined.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/combine_coagulation_strategy_builder/#signature","title":"Signature","text":"<pre><code>class CombineCoagulationStrategyBuilder(BuilderABC):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/combine_coagulation_strategy_builder/#see-also","title":"See also","text":"<ul> <li>BuilderABC</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/combine_coagulation_strategy_builder/#combinecoagulationstrategybuilderbuild","title":"CombineCoagulationStrategyBuilder().build","text":"<p>Show source in combine_coagulation_strategy_builder.py:59</p> <p>Builds and returns the combined coagulation strategy.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/combine_coagulation_strategy_builder/#returns","title":"Returns","text":"<p>CombineCoagulationStrategy :     A strategy that combines all the previously added     sub-strategies.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/combine_coagulation_strategy_builder/#signature_1","title":"Signature","text":"<pre><code>def build(self) -&gt; CombineCoagulationStrategy: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/combine_coagulation_strategy_builder/#see-also_1","title":"See also","text":"<ul> <li>CombineCoagulationStrategy</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/combine_coagulation_strategy_builder/#combinecoagulationstrategybuilderset_strategies","title":"CombineCoagulationStrategyBuilder().set_strategies","text":"<p>Show source in combine_coagulation_strategy_builder.py:36</p> <p>Sets a list of CoagulationStrategyABC objects to be combined.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/combine_coagulation_strategy_builder/#arguments","title":"Arguments","text":"<p>strategies : A list of coagulation strategies to be combined. strategies_units : For interface consistency, not used.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/combine_coagulation_strategy_builder/#returns_1","title":"Returns","text":"<p>CombineCoagulationStrategyBuilder:     The builder instance, for fluent chaining.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/combine_coagulation_strategy_builder/#signature_2","title":"Signature","text":"<pre><code>def set_strategies(\n    self,\n    strategies: List[CoagulationStrategyABC],\n    strategies_units: Optional[str] = None,\n): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/turbulent_dns_coagulation_builder/","title":"TurbulentDNSCoagulationBuilder","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Coagulation Builder / TurbulentDNSCoagulationBuilder</p> <p>Auto-generated documentation for particula.dynamics.coagulation.coagulation_builder.turbulent_dns_coagulation_builder module.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/turbulent_dns_coagulation_builder/#turbulentdnscoagulationbuilder_1","title":"TurbulentDNSCoagulationBuilder","text":"<p>Show source in turbulent_dns_coagulation_builder.py:29</p> <p>Turbulent DNS Coagulation Builder class.</p> <p>This class is used to create coagulation strategies for turbulent DNS coagulation and ensures that the correct values (distribution_type, turbulent_dissipation, fluid_density, reynolds_lambda, relative_velocity) are passed.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/turbulent_dns_coagulation_builder/#signature","title":"Signature","text":"<pre><code>class TurbulentDNSCoagulationBuilder(\n    BuilderABC,\n    BuilderDistributionTypeMixin,\n    BuilderTurbulentDissipationMixin,\n    BuilderFluidDensityMixin,\n):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/turbulent_dns_coagulation_builder/#see-also","title":"See also","text":"<ul> <li>BuilderABC</li> <li>BuilderDistributionTypeMixin</li> <li>BuilderFluidDensityMixin</li> <li>BuilderTurbulentDissipationMixin</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/turbulent_dns_coagulation_builder/#turbulentdnscoagulationbuilderbuild","title":"TurbulentDNSCoagulationBuilder().build","text":"<p>Show source in turbulent_dns_coagulation_builder.py:107</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/turbulent_dns_coagulation_builder/#signature_1","title":"Signature","text":"<pre><code>def build(self) -&gt; CoagulationStrategyABC: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/turbulent_dns_coagulation_builder/#see-also_1","title":"See also","text":"<ul> <li>CoagulationStrategyABC</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/turbulent_dns_coagulation_builder/#turbulentdnscoagulationbuilderset_relative_velocity","title":"TurbulentDNSCoagulationBuilder().set_relative_velocity","text":"<p>Show source in turbulent_dns_coagulation_builder.py:83</p> <p>Set the relative vertical velocity. This is the relative velocity between particles and airflow, (excluding turbulence, and gravity).</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/turbulent_dns_coagulation_builder/#arguments","title":"Arguments","text":"<ul> <li>relative_velocity : Relative velocity.</li> <li>relative_velocity_units : Units of the relative velocity     [m/s].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/turbulent_dns_coagulation_builder/#signature_2","title":"Signature","text":"<pre><code>@validate_inputs({\"relative_velocity\": \"finite\"})\ndef set_relative_velocity(\n    self, relative_velocity: float, relative_velocity_units: str\n): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/turbulent_dns_coagulation_builder/#turbulentdnscoagulationbuilderset_reynolds_lambda","title":"TurbulentDNSCoagulationBuilder().set_reynolds_lambda","text":"<p>Show source in turbulent_dns_coagulation_builder.py:59</p> <p>Set the Reynolds lambda. This is a measure of the turbulence length scale, of airflow, and is used in the turbulent DNS model. Shorthand for the Taylor-scale Reynolds number, Re\u03bb.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/turbulent_dns_coagulation_builder/#arguments_1","title":"Arguments","text":"<ul> <li>reynolds_lambda : Reynolds lambda.</li> <li>reynolds_lambda_units : Units of the Reynolds lambda     [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/turbulent_dns_coagulation_builder/#signature_3","title":"Signature","text":"<pre><code>@validate_inputs({\"reynolds_lambda\": \"nonnegative\"})\ndef set_reynolds_lambda(\n    self, reynolds_lambda: float, reynolds_lambda_units: Optional[str] = None\n): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/turbulent_shear_coagulation_builder/","title":"TurbulentShearCoagulationBuilder","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Coagulation Builder / TurbulentShearCoagulationBuilder</p> <p>Auto-generated documentation for particula.dynamics.coagulation.coagulation_builder.turbulent_shear_coagulation_builder module.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/turbulent_shear_coagulation_builder/#turbulentshearcoagulationbuilder_1","title":"TurbulentShearCoagulationBuilder","text":"<p>Show source in turbulent_shear_coagulation_builder.py:23</p> <p>Turbulent Shear Coagulation Builder class.</p> <p>This class is used to create coagulation strategies for turbulent shear coagulation. This provides a validation layer to ensure that the correct values are passed to the coagulation strategy.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/turbulent_shear_coagulation_builder/#methods","title":"Methods","text":"<ul> <li><code>set_distribution_type(distribution_type)</code> - Set the distribution type.</li> <li><code>set_turbulent_dissipation(turbulent_dissipation)</code> - Set the turbulent     dissipation rate.</li> <li><code>set_fluid_density(fluid_density)</code> - Set the fluid density.</li> <li><code>build()</code> - Validate and return the TurbulentShearCoagulationStrategy     object.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/turbulent_shear_coagulation_builder/#signature","title":"Signature","text":"<pre><code>class TurbulentShearCoagulationBuilder(\n    BuilderABC,\n    BuilderDistributionTypeMixin,\n    BuilderTurbulentDissipationMixin,\n    BuilderFluidDensityMixin,\n):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/turbulent_shear_coagulation_builder/#see-also","title":"See also","text":"<ul> <li>BuilderABC</li> <li>BuilderDistributionTypeMixin</li> <li>BuilderFluidDensityMixin</li> <li>BuilderTurbulentDissipationMixin</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/turbulent_shear_coagulation_builder/#turbulentshearcoagulationbuilderbuild","title":"TurbulentShearCoagulationBuilder().build","text":"<p>Show source in turbulent_shear_coagulation_builder.py:55</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/turbulent_shear_coagulation_builder/#signature_1","title":"Signature","text":"<pre><code>def build(self) -&gt; CoagulationStrategyABC: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_builder/turbulent_shear_coagulation_builder/#see-also_1","title":"See also","text":"<ul> <li>CoagulationStrategyABC</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/","title":"Coagulation Strategy","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Coagulation Strategy</p> <p>Auto-generated documentation for particula.dynamics.coagulation.coagulation_strategy module.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/#modules","title":"Modules","text":"<ul> <li>BrownianCoagulationStrategy</li> <li>ChargedCoagulationStrategy</li> <li>CoagulationStrategyABC</li> <li>CombineCoagulationStrategy</li> <li>SedimentationCoagulationStrategy</li> <li>Trubulent Dns Coagulation Strategy</li> <li>TurbulentShearCoagulationStrategy</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/brownian_coagulation_strategy/","title":"BrownianCoagulationStrategy","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Coagulation Strategy / BrownianCoagulationStrategy</p> <p>Auto-generated documentation for particula.dynamics.coagulation.coagulation_strategy.brownian_coagulation_strategy module.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/brownian_coagulation_strategy/#browniancoagulationstrategy_1","title":"BrownianCoagulationStrategy","text":"<p>Show source in brownian_coagulation_strategy.py:22</p> <p>Discrete Brownian coagulation strategy class. This class implements the methods defined in the CoagulationStrategy abstract class.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/brownian_coagulation_strategy/#attributes","title":"Attributes","text":"<ul> <li>distribution_type : The type of distribution to be used with the     coagulation strategy. Options are \"discrete\", \"continuous_pdf\",     and \"particle_resolved\".</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/brownian_coagulation_strategy/#methods","title":"Methods","text":"<ul> <li><code>-</code> kernel - Calculate the coagulation kernel.</li> <li><code>-</code> loss_rate - Calculate the coagulation loss rate.</li> <li><code>-</code> gain_rate - Calculate the coagulation gain rate.</li> <li><code>-</code> net_rate - Calculate the net coagulation rate.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/brownian_coagulation_strategy/#references","title":"References","text":"<ul> <li>function <code>brownian_coagulation_kernel_via_system_state</code></li> <li>Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric chemistry and     physics, Section 13 TABLE 13.1 Fuchs Form of the Brownian Coagulation     Coefficient K12.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/brownian_coagulation_strategy/#signature","title":"Signature","text":"<pre><code>class BrownianCoagulationStrategy(CoagulationStrategyABC):\n    def __init__(self, distribution_type: str): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/brownian_coagulation_strategy/#see-also","title":"See also","text":"<ul> <li>CoagulationStrategyABC</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/brownian_coagulation_strategy/#browniancoagulationstrategydimensionless_kernel","title":"BrownianCoagulationStrategy().dimensionless_kernel","text":"<p>Show source in brownian_coagulation_strategy.py:50</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/brownian_coagulation_strategy/#signature_1","title":"Signature","text":"<pre><code>def dimensionless_kernel(\n    self,\n    diffusive_knudsen: NDArray[np.float64],\n    coulomb_potential_ratio: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/brownian_coagulation_strategy/#browniancoagulationstrategykernel","title":"BrownianCoagulationStrategy().kernel","text":"<p>Show source in brownian_coagulation_strategy.py:62</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/brownian_coagulation_strategy/#signature_2","title":"Signature","text":"<pre><code>def kernel(\n    self, particle: ParticleRepresentation, temperature: float, pressure: float\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/brownian_coagulation_strategy/#see-also_1","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/charged_coagulation_strategy/","title":"ChargedCoagulationStrategy","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Coagulation Strategy / ChargedCoagulationStrategy</p> <p>Auto-generated documentation for particula.dynamics.coagulation.coagulation_strategy.charged_coagulation_strategy module.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/charged_coagulation_strategy/#chargedcoagulationstrategy_1","title":"ChargedCoagulationStrategy","text":"<p>Show source in charged_coagulation_strategy.py:23</p> <p>General charged dependent brownian coagulation strategy.</p> <p>This class implements the methods defined in the CoagulationStrategy abstract class. The kernel strategy is passed as an argument to the class, to use a dimensionless kernel representation.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/charged_coagulation_strategy/#arguments","title":"Arguments","text":"<ul> <li>kernel_strategy : The kernel strategy to be used for the coagulation,     from the KernelStrategy class.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/charged_coagulation_strategy/#methods","title":"Methods","text":"<ul> <li><code>-</code> kernel - Calculate the coagulation kernel.</li> <li><code>-</code> loss_rate - Calculate the coagulation loss rate.</li> <li><code>-</code> gain_rate - Calculate the coagulation gain rate.</li> <li><code>-</code> net_rate - Calculate the net coagulation rate.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/charged_coagulation_strategy/#signature","title":"Signature","text":"<pre><code>class ChargedCoagulationStrategy(CoagulationStrategyABC):\n    def __init__(\n        self, distribution_type: str, kernel_strategy: ChargedKernelStrategyABC\n    ): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/charged_coagulation_strategy/#see-also","title":"See also","text":"<ul> <li>ChargedKernelStrategyABC</li> <li>CoagulationStrategyABC</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/charged_coagulation_strategy/#chargedcoagulationstrategydimensionless_kernel","title":"ChargedCoagulationStrategy().dimensionless_kernel","text":"<p>Show source in charged_coagulation_strategy.py:50</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/charged_coagulation_strategy/#signature_1","title":"Signature","text":"<pre><code>def dimensionless_kernel(\n    self,\n    diffusive_knudsen: NDArray[np.float64],\n    coulomb_potential_ratio: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/charged_coagulation_strategy/#chargedcoagulationstrategykernel","title":"ChargedCoagulationStrategy().kernel","text":"<p>Show source in charged_coagulation_strategy.py:60</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/charged_coagulation_strategy/#signature_2","title":"Signature","text":"<pre><code>def kernel(\n    self, particle: ParticleRepresentation, temperature: float, pressure: float\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/charged_coagulation_strategy/#see-also_1","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/","title":"CoagulationStrategyABC","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Coagulation Strategy / CoagulationStrategyABC</p> <p>Auto-generated documentation for particula.dynamics.coagulation.coagulation_strategy.coagulation_strategy_abc module.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#coagulationstrategyabc_1","title":"CoagulationStrategyABC","text":"<p>Show source in coagulation_strategy_abc.py:23</p> <p>Abstract class for defining a coagulation strategy. This class defines the methods that must be implemented by any coagulation strategy.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#attributes","title":"Attributes","text":"<ul> <li><code>-</code> distribution_type - The type of distribution to be used with the     coagulation strategy. Default is \"discrete\", options are     \"discrete\", \"continuous_pdf\", and \"particle_resolved\".</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#methods","title":"Methods","text":"<ul> <li><code>kernel</code> - Calculate the coagulation kernel.</li> <li><code>loss_rate</code> - Calculate the coagulation loss rate.</li> <li><code>gain_rate</code> - Calculate the coagulation gain rate.</li> <li><code>net_rate</code> - Calculate the net coagulation rate.</li> <li><code>diffusive_knudsen</code> - Calculate the diffusive Knudsen number.</li> <li><code>coulomb_potential_ratio</code> - Calculate the Coulomb potential ratio.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#signature","title":"Signature","text":"<pre><code>class CoagulationStrategyABC(ABC):\n    def __init__(\n        self,\n        distribution_type: str,\n        particle_resolved_kernel_radius: Optional[NDArray[np.float64]] = None,\n        particle_resolved_kernel_bins_number: Optional[int] = None,\n        particle_resolved_kernel_bins_per_decade: int = 10,\n    ): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#coagulationstrategyabccoulomb_potential_ratio","title":"CoagulationStrategyABC().coulomb_potential_ratio","text":"<p>Show source in coagulation_strategy_abc.py:328</p> <p>Calculate the Coulomb potential ratio based on the particle properties and temperature.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#arguments","title":"Arguments","text":"<ul> <li><code>particle</code> - The particles for which the Coulomb     potential ratio is to be calculated.</li> <li><code>temperature</code> - The temperature of the gas phase [K].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#returns","title":"Returns","text":"<p>The Coulomb potential ratio for the particle     [dimensionless].</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#signature_1","title":"Signature","text":"<pre><code>def coulomb_potential_ratio(\n    self, particle: ParticleRepresentation, temperature: float\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#see-also","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#coagulationstrategyabcdiffusive_knudsen","title":"CoagulationStrategyABC().diffusive_knudsen","text":"<p>Show source in coagulation_strategy_abc.py:292</p> <p>Calculate the diffusive Knudsen number based on the particle properties, temperature, and pressure.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#arguments_1","title":"Arguments","text":"<ul> <li><code>particle</code> - The particle for which the diffusive     Knudsen number is to be calculated.</li> <li><code>temperature</code> - The temperature of the gas phase [K].</li> <li><code>pressure</code> - The pressure of the gas phase [Pa].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#returns_1","title":"Returns","text":"<ul> <li><code>NDArray[np.float64]</code> - The diffusive Knudsen number for the particle     [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#signature_2","title":"Signature","text":"<pre><code>def diffusive_knudsen(\n    self, particle: ParticleRepresentation, temperature: float, pressure: float\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#see-also_1","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#coagulationstrategyabcdimensionless_kernel","title":"CoagulationStrategyABC().dimensionless_kernel","text":"<p>Show source in coagulation_strategy_abc.py:69</p> <p>Calculate the dimensionless coagulation kernel based on the particle properties interactions, diffusive Knudsen number and Coulomb potential.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#arguments_2","title":"Arguments","text":"<ul> <li>diffusive_knudsen : The diffusive Knudsen number     for the particle [dimensionless].</li> <li>coulomb_potential_ratio : The Coulomb potential     ratio for the particle [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#returns_2","title":"Returns","text":"<p>The dimensionless coagulation kernel for the particle     [dimensionless].</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#signature_3","title":"Signature","text":"<pre><code>@abstractmethod\ndef dimensionless_kernel(\n    self,\n    diffusive_knudsen: NDArray[np.float64],\n    coulomb_potential_ratio: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#coagulationstrategyabcfriction_factor","title":"CoagulationStrategyABC().friction_factor","text":"<p>Show source in coagulation_strategy_abc.py:350</p> <p>Calculate the friction factor based on the particle properties, temperature, and pressure.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#arguments_3","title":"Arguments","text":"<ul> <li><code>particle</code> - The particle for which the friction factor     is to be calculated.</li> <li><code>temperature</code> - The temperature of the gas phase [K].</li> <li><code>pressure</code> - The pressure of the gas phase [Pa].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#returns_3","title":"Returns","text":"<p>The friction factor for the particle [dimensionless].</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#signature_4","title":"Signature","text":"<pre><code>def friction_factor(\n    self, particle: ParticleRepresentation, temperature: float, pressure: float\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#see-also_2","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#coagulationstrategyabcgain_rate","title":"CoagulationStrategyABC().gain_rate","text":"<p>Show source in coagulation_strategy_abc.py:149</p> <p>Calculate the coagulation gain rate based on the particle radius, distribution, and the coagulation kernel. Used for discrete and continuous PDF distributions.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#arguments_4","title":"Arguments","text":"<ul> <li><code>particle</code> - The particle for which the coagulation     gain rate is to be calculated.</li> <li>CoagulationStrategyABC().kernel - The coagulation kernel.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#returns_4","title":"Returns","text":"<p>The coagulation gain rate for the particle [kg/s].</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#raises","title":"Raises","text":"<p>ValueError : If the distribution type is not valid. Only     'discrete' and 'continuous_pdf' are valid.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#signature_5","title":"Signature","text":"<pre><code>def gain_rate(\n    self, particle: ParticleRepresentation, kernel: NDArray[np.float64]\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#see-also_3","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#coagulationstrategyabckernel","title":"CoagulationStrategyABC().kernel","text":"<p>Show source in coagulation_strategy_abc.py:91</p> <p>Calculate the coagulation kernel based on the particle properties, temperature, and pressure.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#arguments_5","title":"Arguments","text":"<ul> <li><code>particle</code> - The particle for which the coagulation     kernel is to be calculated.</li> <li><code>temperature</code> - The temperature of the gas phase [K].</li> <li><code>pressure</code> - The pressure of the gas phase [Pa].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#returns_5","title":"Returns","text":"<p>The coagulation kernel for the particle [m^3/s].</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#signature_6","title":"Signature","text":"<pre><code>@abstractmethod\ndef kernel(\n    self, particle: ParticleRepresentation, temperature: float, pressure: float\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#see-also_4","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#coagulationstrategyabcloss_rate","title":"CoagulationStrategyABC().loss_rate","text":"<p>Show source in coagulation_strategy_abc.py:112</p> <p>Calculate the coagulation loss rate based on the particle radius, distribution, and the coagulation kernel.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#arguments_6","title":"Arguments","text":"<ul> <li><code>particle</code> - The particle for which the coagulation     loss rate is to be calculated.</li> <li>CoagulationStrategyABC().kernel - The coagulation kernel.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#returns_6","title":"Returns","text":"<p>The coagulation loss rate for the particle [kg/s].</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#raises_1","title":"Raises","text":"<p>ValueError : If the distribution type is not valid. Only     'discrete' and 'continuous_pdf' are valid.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#signature_7","title":"Signature","text":"<pre><code>def loss_rate(\n    self, particle: ParticleRepresentation, kernel: NDArray[np.float64]\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#see-also_5","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#coagulationstrategyabcnet_rate","title":"CoagulationStrategyABC().net_rate","text":"<p>Show source in coagulation_strategy_abc.py:188</p> <p>Calculate the net coagulation rate based on the particle radius, distribution, and the coagulation kernel.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#arguments_7","title":"Arguments","text":"<ul> <li>particle : The particle class for which the     coagulation net rate is to be calculated.</li> <li>temperature : The temperature of the gas phase [K].</li> <li>pressure : The pressure of the gas phase [Pa].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#returns_7","title":"Returns","text":"<ul> <li><code>Union[float,</code> NDArray[np.float64]] - The net coagulation rate for the     particle [kg/s].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#signature_8","title":"Signature","text":"<pre><code>def net_rate(\n    self, particle: ParticleRepresentation, temperature: float, pressure: float\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#see-also_6","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#coagulationstrategyabcstep","title":"CoagulationStrategyABC().step","text":"<p>Show source in coagulation_strategy_abc.py:216</p> <p>Perform a single step of the coagulation process.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#arguments_8","title":"Arguments","text":"<ul> <li><code>particle</code> - The particle for which the coagulation step     is to be performed.</li> <li><code>temperature</code> - The temperature of the gas phase [K].</li> <li><code>pressure</code> - The pressure of the gas phase [Pa].</li> <li><code>time_step</code> - The time step for the coagulation process [s].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#returns_8","title":"Returns","text":"<ul> <li><code>ParticleRepresentation</code> - The particle after the coagulation step.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#signature_9","title":"Signature","text":"<pre><code>def step(\n    self,\n    particle: ParticleRepresentation,\n    temperature: float,\n    pressure: float,\n    time_step: float,\n) -&gt; ParticleRepresentation: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/coagulation_strategy_abc/#see-also_7","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/combine_coagulation_strategy/","title":"CombineCoagulationStrategy","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Coagulation Strategy / CombineCoagulationStrategy</p> <p>Auto-generated documentation for particula.dynamics.coagulation.coagulation_strategy.combine_coagulation_strategy module.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/combine_coagulation_strategy/#combinecoagulationstrategy_1","title":"CombineCoagulationStrategy","text":"<p>Show source in combine_coagulation_strategy.py:19</p> <p>Combines multiple coagulation strategies into one.</p> <p>This class takes a list of coagulation strategies and combines their kernels by summing them. All strategies must have the same distribution type.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/combine_coagulation_strategy/#arguments","title":"Arguments","text":"<ul> <li><code>-</code> strategies - A list of coagulation strategies to combine.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/combine_coagulation_strategy/#methods","title":"Methods","text":"<ul> <li><code>-</code> kernel - Calculate the combined coagulation kernel.</li> <li><code>-</code> loss_rate - Calculate the combined coagulation loss rate.</li> <li><code>-</code> gain_rate - Calculate the combined coagulation gain rate.</li> <li><code>-</code> net_rate - Calculate the combined net coagulation rate.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/combine_coagulation_strategy/#signature","title":"Signature","text":"<pre><code>class CombineCoagulationStrategy(CoagulationStrategyABC):\n    def __init__(self, strategies: List[CoagulationStrategyABC]): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/combine_coagulation_strategy/#see-also","title":"See also","text":"<ul> <li>CoagulationStrategyABC</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/combine_coagulation_strategy/#combinecoagulationstrategydimensionless_kernel","title":"CombineCoagulationStrategy().dimensionless_kernel","text":"<p>Show source in combine_coagulation_strategy.py:51</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/combine_coagulation_strategy/#signature_1","title":"Signature","text":"<pre><code>def dimensionless_kernel(\n    self,\n    diffusive_knudsen: NDArray[np.float64],\n    coulomb_potential_ratio: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/combine_coagulation_strategy/#combinecoagulationstrategykernel","title":"CombineCoagulationStrategy().kernel","text":"<p>Show source in combine_coagulation_strategy.py:63</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/combine_coagulation_strategy/#signature_2","title":"Signature","text":"<pre><code>def kernel(\n    self, particle: ParticleRepresentation, temperature: float, pressure: float\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/combine_coagulation_strategy/#see-also_1","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/sedimentation_coagulation_strategy/","title":"SedimentationCoagulationStrategy","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Coagulation Strategy / SedimentationCoagulationStrategy</p> <p>Auto-generated documentation for particula.dynamics.coagulation.coagulation_strategy.sedimentation_coagulation_strategy module.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/sedimentation_coagulation_strategy/#sedimentationcoagulationstrategy_1","title":"SedimentationCoagulationStrategy","text":"<p>Show source in sedimentation_coagulation_strategy.py:21</p> <p>Sedimentation coagulation strategy.</p> <p>This implements the methods defined in <code>CoagulationStrategy</code> abstract class. Applied to the Seinfeld and Pandis (2016) sedimentation coagulation kernel.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/sedimentation_coagulation_strategy/#arguments","title":"Arguments","text":"<ul> <li>distribution_type : The type of distribution to be used with the     coagulation strategy. Must be \"discrete\", \"continuous_pdf\", or     \"particle_resolved\".</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/sedimentation_coagulation_strategy/#methods","title":"Methods","text":"<ul> <li>kernel : Calculate the coagulation kernel.</li> <li>loss_rate : Calculate the coagulation loss rate.</li> <li>gain_rate : Calculate the coagulation gain rate.</li> <li>net_rate : Calculate the net coagulation rate.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/sedimentation_coagulation_strategy/#references","title":"References","text":"<ul> <li>Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric chemistry and     physics, Chapter 13, Equation 13A.4.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/sedimentation_coagulation_strategy/#signature","title":"Signature","text":"<pre><code>class SedimentationCoagulationStrategy(CoagulationStrategyABC):\n    def __init__(self, distribution_type: str): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/sedimentation_coagulation_strategy/#see-also","title":"See also","text":"<ul> <li>CoagulationStrategyABC</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/sedimentation_coagulation_strategy/#sedimentationcoagulationstrategydimensionless_kernel","title":"SedimentationCoagulationStrategy().dimensionless_kernel","text":"<p>Show source in sedimentation_coagulation_strategy.py:53</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/sedimentation_coagulation_strategy/#signature_1","title":"Signature","text":"<pre><code>def dimensionless_kernel(\n    self,\n    diffusive_knudsen: NDArray[np.float64],\n    coulomb_potential_ratio: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/sedimentation_coagulation_strategy/#sedimentationcoagulationstrategykernel","title":"SedimentationCoagulationStrategy().kernel","text":"<p>Show source in sedimentation_coagulation_strategy.py:65</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/sedimentation_coagulation_strategy/#signature_2","title":"Signature","text":"<pre><code>def kernel(\n    self, particle: ParticleRepresentation, temperature: float, pressure: float\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/sedimentation_coagulation_strategy/#see-also_1","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/trubulent_dns_coagulation_strategy/","title":"Trubulent Dns Coagulation Strategy","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Coagulation Strategy / Trubulent Dns Coagulation Strategy</p> <p>Auto-generated documentation for particula.dynamics.coagulation.coagulation_strategy.trubulent_dns_coagulation_strategy module.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/trubulent_dns_coagulation_strategy/#turbulentdnscoagulationstrategy","title":"TurbulentDNSCoagulationStrategy","text":"<p>Show source in trubulent_dns_coagulation_strategy.py:22</p> <p>Turbulent DNS coagulation strategy.</p> <p>This implements the methods defined in <code>CoagulationStrategy</code> abstract class. Applied with the turbulent DNS kernel from Ayala et al. (2008).</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/trubulent_dns_coagulation_strategy/#arguments","title":"Arguments","text":"<ul> <li>distribution_type : The type of distribution to be used with the     coagulation strategy. Must be \"discrete\", \"continuous_pdf\", or     \"particle_resolved\".</li> <li>turbulent_dissipation : The turbulent kinetic energy of the system     [m<sup>2/s</sup>2]. DNS fits are for 0.001, 0.01, and 0.04 [m<sup>2/s</sup>2].</li> <li>fluid_density : The density of the fluid [kg/m^3].</li> <li>reynolds_lambda : The Reynolds lambda of air, DNS fits are for     23 and 74 [dimensionless].</li> <li>relative_velocity : The relative velocity of the air [m/s].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/trubulent_dns_coagulation_strategy/#methods","title":"Methods","text":"<ul> <li>kernel : Calculate the coagulation kernel.</li> <li>loss_rate : Calculate the coagulation loss rate.</li> <li>gain_rate : Calculate the coagulation gain rate.</li> <li>net_rate : Calculate the net coagulation rate.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/trubulent_dns_coagulation_strategy/#references","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on     the geometric collision rate of sedimenting droplets. Part 2.     Theory and parameterization. New Journal of Physics, 10.     https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/trubulent_dns_coagulation_strategy/#signature","title":"Signature","text":"<pre><code>class TurbulentDNSCoagulationStrategy(CoagulationStrategyABC):\n    def __init__(\n        self,\n        distribution_type: str,\n        turbulent_dissipation: float,\n        fluid_density: float,\n        reynolds_lambda: float,\n        relative_velocity: float,\n    ): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/trubulent_dns_coagulation_strategy/#see-also","title":"See also","text":"<ul> <li>CoagulationStrategyABC</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/trubulent_dns_coagulation_strategy/#turbulentdnscoagulationstrategydimensionless_kernel","title":"TurbulentDNSCoagulationStrategy().dimensionless_kernel","text":"<p>Show source in trubulent_dns_coagulation_strategy.py:85</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/trubulent_dns_coagulation_strategy/#signature_1","title":"Signature","text":"<pre><code>def dimensionless_kernel(\n    self,\n    diffusive_knudsen: NDArray[np.float64],\n    coulomb_potential_ratio: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/trubulent_dns_coagulation_strategy/#turbulentdnscoagulationstrategykernel","title":"TurbulentDNSCoagulationStrategy().kernel","text":"<p>Show source in trubulent_dns_coagulation_strategy.py:97</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/trubulent_dns_coagulation_strategy/#signature_2","title":"Signature","text":"<pre><code>def kernel(\n    self, particle: ParticleRepresentation, temperature: float, pressure: float\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/trubulent_dns_coagulation_strategy/#see-also_1","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/trubulent_dns_coagulation_strategy/#turbulentdnscoagulationstrategyset_relative_velocity","title":"TurbulentDNSCoagulationStrategy().set_relative_velocity","text":"<p>Show source in trubulent_dns_coagulation_strategy.py:80</p> <p>Set the relative velocity.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/trubulent_dns_coagulation_strategy/#signature_3","title":"Signature","text":"<pre><code>def set_relative_velocity(self, relative_velocity: float): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/trubulent_dns_coagulation_strategy/#turbulentdnscoagulationstrategyset_reynolds_lambda","title":"TurbulentDNSCoagulationStrategy().set_reynolds_lambda","text":"<p>Show source in trubulent_dns_coagulation_strategy.py:75</p> <p>Set the Reynolds lambda.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/trubulent_dns_coagulation_strategy/#signature_4","title":"Signature","text":"<pre><code>def set_reynolds_lambda(self, reynolds_lambda: float): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/trubulent_dns_coagulation_strategy/#turbulentdnscoagulationstrategyset_turbulent_dissipation","title":"TurbulentDNSCoagulationStrategy().set_turbulent_dissipation","text":"<p>Show source in trubulent_dns_coagulation_strategy.py:70</p> <p>Set the turbulent kinetic energy.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/trubulent_dns_coagulation_strategy/#signature_5","title":"Signature","text":"<pre><code>def set_turbulent_dissipation(self, turbulent_dissipation: float): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/turbulent_shear_coagulation_strategy/","title":"TurbulentShearCoagulationStrategy","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Coagulation Strategy / TurbulentShearCoagulationStrategy</p> <p>Auto-generated documentation for particula.dynamics.coagulation.coagulation_strategy.turbulent_shear_coagulation_strategy module.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/turbulent_shear_coagulation_strategy/#turbulentshearcoagulationstrategy_1","title":"TurbulentShearCoagulationStrategy","text":"<p>Show source in turbulent_shear_coagulation_strategy.py:21</p> <p>Turbulent Shear coagulation strategy.</p> <p>This implements the methods defined in <code>CoagulationStrategy</code> abstract class. Applied to the Saffman and Turner (1956) turbulent shear coagulation kernel.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/turbulent_shear_coagulation_strategy/#arguments","title":"Arguments","text":"<ul> <li>distribution_type : The type of distribution to be used with the     coagulation strategy. Must be \"discrete\", \"continuous_pdf\", or     \"particle_resolved\".</li> <li>turbulent_dissipation : The turbulent kinetic energy of the system     [m<sup>2/s</sup>2].</li> <li>fluid_density : The density of the fluid [kg/m^3].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/turbulent_shear_coagulation_strategy/#methods","title":"Methods","text":"<ul> <li>kernel : Calculate the coagulation kernel.</li> <li>loss_rate : Calculate the coagulation loss rate.</li> <li>gain_rate : Calculate the coagulation gain rate.</li> <li>net_rate : Calculate the net coagulation rate.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/turbulent_shear_coagulation_strategy/#references","title":"References","text":"<ul> <li>Saffman, P. G., &amp; Turner, J. S. (1956). On the collision of drops in     turbulent clouds. Journal of Fluid Mechanics, 1(1), 16-30.     https://doi.org/10.1017/S0022112056000020</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/turbulent_shear_coagulation_strategy/#signature","title":"Signature","text":"<pre><code>class TurbulentShearCoagulationStrategy(CoagulationStrategyABC):\n    def __init__(\n        self, distribution_type: str, turbulent_dissipation: float, fluid_density: float\n    ): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/turbulent_shear_coagulation_strategy/#see-also","title":"See also","text":"<ul> <li>CoagulationStrategyABC</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/turbulent_shear_coagulation_strategy/#turbulentshearcoagulationstrategydimensionless_kernel","title":"TurbulentShearCoagulationStrategy().dimensionless_kernel","text":"<p>Show source in turbulent_shear_coagulation_strategy.py:66</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/turbulent_shear_coagulation_strategy/#signature_1","title":"Signature","text":"<pre><code>def dimensionless_kernel(\n    self,\n    diffusive_knudsen: NDArray[np.float64],\n    coulomb_potential_ratio: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/turbulent_shear_coagulation_strategy/#turbulentshearcoagulationstrategykernel","title":"TurbulentShearCoagulationStrategy().kernel","text":"<p>Show source in turbulent_shear_coagulation_strategy.py:78</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/turbulent_shear_coagulation_strategy/#signature_2","title":"Signature","text":"<pre><code>def kernel(\n    self, particle: ParticleRepresentation, temperature: float, pressure: float\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/turbulent_shear_coagulation_strategy/#see-also_1","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/turbulent_shear_coagulation_strategy/#turbulentshearcoagulationstrategyset_turbulent_dissipation","title":"TurbulentShearCoagulationStrategy().set_turbulent_dissipation","text":"<p>Show source in turbulent_shear_coagulation_strategy.py:61</p> <p>Set the turbulent kinetic energy.</p>"},{"location":"API/particula/dynamics/coagulation/coagulation_strategy/turbulent_shear_coagulation_strategy/#signature_3","title":"Signature","text":"<pre><code>def set_turbulent_dissipation(self, turbulent_dissipation: float): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/","title":"Particle Resolved Step","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Particle Resolved Step</p> <p>Auto-generated documentation for particula.dynamics.coagulation.particle_resolved_step module.</p>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/#modules","title":"Modules","text":"<ul> <li>Particle Resolved Method</li> <li>Super Droplet Method</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/","title":"Particle Resolved Method","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Particle Resolved Step / Particle Resolved Method</p> <p>Auto-generated documentation for particula.dynamics.coagulation.particle_resolved_step.particle_resolved_method module.</p>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#_calculate_probabilities","title":"_calculate_probabilities","text":"<p>Show source in particle_resolved_method.py:312</p> <p>Calculate coagulation probabilities based on kernel values and system parameters.</p> <p>This function multiplies the kernel values by the time step and a factor derived from the ratio of (events / tests) over the volume to obtain the probability of coagulation.</p>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#arguments","title":"Arguments","text":"<ul> <li>kernel_values : Interpolated kernel values for a given particle pair,   may be scalar or array.</li> <li>time_step : Duration of one coagulation step in seconds.</li> <li>events : Number of possible collisions for the pair(s).</li> <li>tests : Number of trials for the random selection procedure.</li> <li>volume : System volume in m\u00b3.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#returns","title":"Returns","text":"<ul> <li>The probability (or array of probabilities) that a collision occurs   during this time step.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#examples","title":"Examples","text":"<pre><code>prob = _calculate_probabilities(0.5, 1.0, 20, 10, 1e-3)\n# prob ~ 0.5 * 1.0 * 20 / (10 * 1e-3) = 1000\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#signature","title":"Signature","text":"<pre><code>def _calculate_probabilities(\n    kernel_values: Union[float, NDArray[np.float64]],\n    time_step: float,\n    events: int,\n    tests: int,\n    volume: float,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#_final_coagulation_state","title":"_final_coagulation_state","text":"<p>Show source in particle_resolved_method.py:348</p> <p>Resolve the final state of particles that have undergone multiple coagulation events.</p> <p>This function ensures that each small particle index merges correctly to a final large particle index, preventing logical conflicts (e.g., a single particle merging into multiple large particles in the same step).</p>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#arguments_1","title":"Arguments","text":"<ul> <li>small_indices : Array of smaller particle indices in coagulation.</li> <li>large_indices : Array of larger particle indices in coagulation.</li> <li>particle_radius : Array of current particle radii.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#returns_1","title":"Returns","text":"<ul> <li>A tuple (updated_small_indices, updated_large_indices) that resolves   multiple merges for the same particle.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#examples_1","title":"Examples","text":"<pre><code>import numpy as np\nsmall = np.array([0, 1, 2])\nlarge = np.array([2, 3, 4])\nr = np.array([1e-9, 1.5e-9, 2e-9, 3e-9, 4e-9])\ns_final, l_final = _final_coagulation_state(small, large, r)\n# ensures each index in s_final merges to a single large index\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#signature_1","title":"Signature","text":"<pre><code>def _final_coagulation_state(\n    small_indices: NDArray[np.int64],\n    large_indices: NDArray[np.int64],\n    particle_radius: NDArray[np.float64],\n) -&gt; Tuple[NDArray[np.int64], NDArray[np.int64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#_interpolate_kernel","title":"_interpolate_kernel","text":"<p>Show source in particle_resolved_method.py:267</p> <p>Create an interpolation function for the coagulation kernel with out-of-bounds handling.</p> <p>This function returns a RegularGridInterpolator that performs linear interpolation for values within the domain of the kernel and clamps to the nearest value outside of it.</p>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#arguments_2","title":"Arguments","text":"<ul> <li>kernel : 2D coagulation kernel values.</li> <li>kernel_radius : Radii corresponding to kernel bins.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#returns_2","title":"Returns","text":"<ul> <li>A RegularGridInterpolator object for retrieving kernel values based     on radius pairs.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#examples_2","title":"Examples","text":"<pre><code>import numpy as np\nfrom particula.dynamics.coagulation.particle_resolved_step import\n    particle_resolved_method\nkernel_vals = np.random.rand(10,10)\nrad = np.linspace(1e-9, 1e-7, 10)\ninterpolator = particle_resolved_method._interpolate_kernel(\n    kernel_vals, rad\n)\n# Use interpolator([[r_small, r_large]]) to get kernel value\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#signature_2","title":"Signature","text":"<pre><code>def _interpolate_kernel(\n    kernel: NDArray[np.float64], kernel_radius: NDArray[np.float64]\n) -&gt; RegularGridInterpolator: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#get_particle_resolved_coagulation_step","title":"get_particle_resolved_coagulation_step","text":"<p>Show source in particle_resolved_method.py:88</p> <p>Perform a single step of particle coagulation, updating particle radii with a stochastic approach.</p> <p>This function models collisions between particles based on a given coagulation kernel. It identifies potential collision pairs, randomly selects which collisions occur according to a probability derived from the kernel value, and then tracks which particles have coagulated.</p> <p>The main calculation for the probability of coagulation is:</p> <ul> <li>Probability = K \u00d7 \u0394t \u00d7 (possible collisions) / (tests \u00d7 volume)<ul> <li>K is the interpolated kernel value,</li> <li>\u0394t is the timestep,</li> <li>volume is the system volume.</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#arguments_3","title":"Arguments","text":"<ul> <li>particle_radius : Array of particle radii.</li> <li>kernel : 2D coagulation kernel matrix matching the size of     kernel_radius.</li> <li>kernel_radius : Radii used to index or interpolate the kernel.</li> <li>volume : Volume of the system in m\u00b3.</li> <li>time_step : Time step for each coagulation iteration in seconds.</li> <li>random_generator : Random number generator for the stochastic     approach.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#returns_3","title":"Returns","text":"<ul> <li>An array of shape (N, 2), where each row contains     [small_index, large_index] for coagulation events.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#examples_3","title":"Examples","text":"Example Usage<pre><code>import numpy as np\nfrom particula.dynamics.coagulation.particle_resolved_step import\n    particle_resolved_method\n\nr = np.array([1e-9, 2e-9, 3e-9])\nkernel_values = np.ones((50, 50))\nkernel_r = np.linspace(1e-10, 1e-7, 50)\nvol = 1e-3\ndt = 0.01\nrng = np.random.default_rng(42)\nevent_pairs =\nparticle_resolved_method.get_particle_resolved_coagulation_step(\n    particle_radius=r,\n    kernel=kernel_values,\n    kernel_radius=kernel_r,\n    volume=vol,\n    time_step=dt,\n    random_generator=rng\n)\n# event_pairs contains the pairs of [small, large] indices that\n# coagulated.\n\nReferences:\n- Seinfeld, J. H., &amp; Pandis, S. N. *Atmospheric Chemistry and Physics*,\n  Wiley, 2016.\n\n#### Signature\n\n```python\ndef get_particle_resolved_coagulation_step(\n    particle_radius: NDArray[np.float64],\n    kernel: NDArray[np.float64],\n    kernel_radius: NDArray[np.float64],\n    volume: float,\n    time_step: float,\n    random_generator: np.random.Generator,\n) -&gt; NDArray[np.int64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#get_particle_resolved_update_step","title":"get_particle_resolved_update_step","text":"<p>Show source in particle_resolved_method.py:14</p> <p>Update particle radii and track lost/gained particles after coagulation events.</p> <p>This function simulates the immediate effect of coagulation on particle radii, marking smaller particles as lost and updating the larger particles to the new radius computed from volume conservation. The calculation is:</p> <ul> <li>r_new = cbrt(r_small\u00b3 + r_large\u00b3)<ul> <li>r_new is the new radius in meters,</li> <li>r_small is the smaller particle's radius in meters,</li> <li>r_large is the larger particle's radius in meters.</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#arguments_4","title":"Arguments","text":"<ul> <li>particle_radius : Array of particle radii.</li> <li>loss : Array to store lost particle radii.</li> <li>gain : Array to store gained particle radii.</li> <li>small_index : Indices of smaller particles.</li> <li>large_index : Indices of larger particles.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#returns_4","title":"Returns","text":"<ul> <li>Updated array of particle radii after coagulation events.</li> <li>Updated array for the radii of particles that were lost.</li> <li>Updated array for the radii of particles that were gained.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/particle_resolved_method/#examples_4","title":"Examples","text":"Example Usage<pre><code>import numpy as np\nfrom particula.dynamics.coagulation.particle_resolved_step import\n    particle_resolved_method\n\nr = np.array([1e-9, 2e-9, 3e-9, 1e-9])\nlost = np.zeros_like(r)\ngained = np.zeros_like(r)\ns_idx = np.array([0, 1])\nl_idx = np.array([2, 3])\nupdated_r, lost_r, gained_r = (\n    particle_resolved_method.get_particle_resolved_update_step(\n        r, lost, gained, s_idx, l_idx\n    ))\n# updated_r now has coagulated radii, lost_r and gained_r are tracked.\n\n#### Signature\n\n```python\ndef get_particle_resolved_update_step(\n    particle_radius: NDArray[np.float64],\n    loss: NDArray[np.float64],\n    gain: NDArray[np.float64],\n    small_index: NDArray[np.int64],\n    large_index: NDArray[np.int64],\n) -&gt; Tuple[NDArray[np.float64], NDArray[np.float64], NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/","title":"Super Droplet Method","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Particle Resolved Step / Super Droplet Method</p> <p>Auto-generated documentation for particula.dynamics.coagulation.particle_resolved_step.super_droplet_method module.</p>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#_bin_particles","title":"_bin_particles","text":"<p>Show source in super_droplet_method.py:541</p> <p>Divide the sorted particle radii into bins and count how many fall into each bin.</p> <p>This function uses <code>radius_bins</code> as edges and assigns each particle radius to a bin index via <code>np.digitize</code>. The result is (1) a histogram with the number of particles in each bin, and (2) an array of per-particle bin indices.</p>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#arguments","title":"Arguments","text":"<ul> <li>particle_radius : Array of sorted particle radii.</li> <li>radius_bins : Edges used to define the bins.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#returns","title":"Returns","text":"<ul> <li><code>number_in_bins</code> : Counts of how many radii lie in each bin.</li> <li><code>bin_indices</code> : The bin index assigned to each particle.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#examples","title":"Examples","text":"<pre><code>import numpy as np\nrad = np.array([1e-9, 1.5e-9, 2e-9, 5e-9])\nbin_edges = np.array([1e-9, 2e-9, 3e-9, 1e-8])\nn_in_bins, bin_idx = _bin_particles(rad, bin_edges)\n# n_in_bins -&gt; [1, 2, 1]\n# bin_idx might be [0, 1, 1, 2]\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#signature","title":"Signature","text":"<pre><code>def _bin_particles(\n    particle_radius: NDArray[np.float64], radius_bins: NDArray[np.float64]\n) -&gt; Tuple[NDArray[np.int64], NDArray[np.int64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#_bin_to_particle_indices","title":"_bin_to_particle_indices","text":"<p>Show source in super_droplet_method.py:327</p> <p>Map bin-relative indices back to absolute positions in the particle array.</p> <p>This function adjusts the offsets for each bin so that the pairwise indices used for collision are mapped onto the actual sorted particle array. For instance, if <code>lower_indices</code> are all within bin 0, and bin 0 particles occupy positions [0..9], this method adds that offset to each index in <code>lower_indices</code>.</p>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#arguments_1","title":"Arguments","text":"<ul> <li>lower_indices : Relative indices (local to the bin) of smaller     particles.</li> <li>upper_indices : Relative indices (local to the bin) of larger     particles.</li> <li>lower_bin : The bin representing the smaller particles.</li> <li>upper_bin : The bin representing the larger particles.</li> <li>bin_indices : Cumulative offsets to determine where each bin begins.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#returns_1","title":"Returns","text":"<ul> <li><code>small_index</code> : Absolute positions of smaller particles in the   sorted particle array.</li> <li><code>large_index</code> : Absolute positions of the larger particles in   the sorted array.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#examples_1","title":"Examples","text":"<pre><code>bins = np.array([0, 10, 20])\nlw_rel = np.array([0, 1])\nup_rel = np.array([2, 3])\n# Convert these local indices for bin 1 (start=10) and bin 2 (start=20)\ns_idx, l_idx = _bin_to_particle_indices(lw_rel, up_rel, 1, 2, bins)\n# s_idx -&gt; [10, 11]\n# l_idx -&gt; [22, 23]\n\n#### Signature\n\n```python\ndef _bin_to_particle_indices(\n    lower_indices: NDArray[np.int64],\n    upper_indices: NDArray[np.int64],\n    lower_bin: int,\n    upper_bin: int,\n    bin_indices: NDArray[np.int64],\n) -&gt; Tuple[NDArray[np.int64], NDArray[np.int64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#_calculate_concentration_in_bins","title":"_calculate_concentration_in_bins","text":"<p>Show source in super_droplet_method.py:613</p> <p>Sum the particle concentrations in each bin.</p> <p>Given per-particle <code>bin_indices</code> and <code>particle_concentration</code>, this function accumulates the total concentration of all particles that fall into each bin. The <code>number_in_bins</code> array is used mainly for shape reference but can also confirm the count of particles.</p>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#arguments_2","title":"Arguments","text":"<ul> <li>bin_indices : Array of bin indices for each particle.</li> <li>particle_concentration : 1D array of concentrations matching   each particle.</li> <li>number_in_bins : Array with the count of particles in each bin.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#returns_2","title":"Returns","text":"<ul> <li>A 1D array whose length is the number of unique bins, containing   the summed concentration per bin.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#examples_2","title":"Examples","text":"<pre><code>import numpy as np\nb_idx = np.array([0, 0, 1, 1, 2])\nconc = np.array([10., 5., 2., 3., 4.])\nn_in_bins = np.array([2, 2, 1])  # might match the bin partition\nbin_c = _calculate_concentration_in_bins(b_idx, conc, n_in_bins)\n# bin_c -&gt; [15., 5., 4.]\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#signature_1","title":"Signature","text":"<pre><code>def _calculate_concentration_in_bins(\n    bin_indices: NDArray[np.int64],\n    particle_concentration: NDArray[np.float64],\n    number_in_bins: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#_coagulation_events","title":"_coagulation_events","text":"<p>Show source in super_droplet_method.py:438</p> <p>Stochastically pick which collisions (among possible pairs) actually happen.</p> <p>This function computes a collision probability for each <code>(small_index, large_index)</code> pair by taking the ratio of <code>kernel_values / kernel_max</code>. Next, a random uniform draw decides if each collision occurs.</p>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#arguments_3","title":"Arguments","text":"<ul> <li>small_index : Array of indices representing smaller particles.</li> <li>large_index : Array of indices representing larger particles.</li> <li>kernel_values : Collision kernel values for each pair.</li> <li>kernel_max : A maximum kernel value used for normalization.</li> <li>generator : Random generator to compare probabilities vs.   uniform draws.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#returns_3","title":"Returns","text":"<ul> <li>Filtered <code>small_index</code> containing only those that coagulated.</li> <li>Filtered <code>large_index</code> containing only those that coagulated.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#examples_3","title":"Examples","text":"<pre><code>rng = np.random.default_rng(999)\ns_idx = np.array([0, 1, 2])\nl_idx = np.array([3, 4, 5])\nkv = np.array([0.5, 1.0, 0.1])\nkmax = 1.0\ns_new, l_new = _coagulation_events(s_idx, l_idx, kv, kmax, rng)\n# Each pair has probability kv/kmax =&gt; [0.5, 1.0, 0.1]\n# The final s_new, l_new depends on random draws\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#signature_2","title":"Signature","text":"<pre><code>def _coagulation_events(\n    small_index: NDArray[np.int64],\n    large_index: NDArray[np.int64],\n    kernel_values: NDArray[np.float64],\n    kernel_max: float,\n    generator: np.random.Generator,\n) -&gt; Tuple[NDArray[np.int64], NDArray[np.int64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#_event_pairs","title":"_event_pairs","text":"<p>Show source in super_droplet_method.py:119</p> <p>Calculate an approximate count of particle-pair interactions.</p> <p>This function estimates the number of collisions or interactions that might occur between two bins of particles, given a maximum kernel value and the current population of each bin. When the bins are the same, a correction factor is applied to avoid double-counting pairs.</p>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#arguments_4","title":"Arguments","text":"<ul> <li>lower_bin : Index of the lower bin in the distribution.</li> <li>upper_bin : Index of the upper bin in the distribution.</li> <li>kernel_max : Maximum kernel value used to weight collisions.</li> <li>number_in_bins : The population of particles per bin.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#returns_4","title":"Returns","text":"<ul> <li>A float representing the expected number of particle-pair   collision events.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#examples_4","title":"Examples","text":"<pre><code>max_kernel = 1.0e-9\nn_bins = np.array([100, 150, 200])\n# lower_bin=0, upper_bin=1 =&gt; collisions between bin 0 and bin 1\nevents_est = _event_pairs(0, 1, max_kernel, n_bins)\n# events_est is ~ 1.0e-9 * 100 * 150\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#signature_3","title":"Signature","text":"<pre><code>def _event_pairs(\n    lower_bin: int,\n    upper_bin: int,\n    kernel_max: Union[float, NDArray[np.float64]],\n    number_in_bins: Union[NDArray[np.float64], NDArray[np.int64]],\n) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#_filter_valid_indices","title":"_filter_valid_indices","text":"<p>Show source in super_droplet_method.py:380</p> <p>Remove invalid pairs of particles based on radius and optional event limit.</p> <p>This function checks each pair of <code>(small_index, large_index)</code> to ensure both have radius &gt; 0. If <code>single_event_counter</code> is provided, it further enforces that each particle has had &lt; 1 event so far (or you can define your own threshold). The pairs failing these checks are removed.</p>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#arguments_5","title":"Arguments","text":"<ul> <li>small_index : Indices for the smaller particles in each pair.</li> <li>large_index : Indices for the larger particles in each pair.</li> <li>particle_radius : Array of radii for each particle.</li> <li>single_event_counter : Optional array counting how many events   each particle has undergone. If provided, only particles with   counter &lt; 1 pass the filter.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#returns_5","title":"Returns","text":"<ul> <li>Filtered <code>small_index</code> with only valid pairs.</li> <li>Filtered <code>large_index</code> that corresponds to valid pairs.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#examples_5","title":"Examples","text":"<pre><code>r = np.array([0.1, 0.0, 0.08, 0.02])\nc = np.array([0, 0, 0, 0])\nsmall_i = np.array([0, 1, 2])\nlarge_i = np.array([3, 0, 1])\n# Filter out pairs with radius &lt;= 0 or event_counter &gt;= 1\ns_valid, l_valid = _filter_valid_indices(\n    small_i, large_i, r, single_event_counter=c\n)\n# Indices with r&gt;0 remain in s_valid, l_valid\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#signature_4","title":"Signature","text":"<pre><code>def _filter_valid_indices(\n    small_index: NDArray[np.int64],\n    large_index: NDArray[np.int64],\n    particle_radius: NDArray[np.float64],\n    single_event_counter: Optional[NDArray[np.int64]] = None,\n) -&gt; Tuple[NDArray[np.int64], NDArray[np.int64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#_get_bin_pairs","title":"_get_bin_pairs","text":"<p>Show source in super_droplet_method.py:583</p> <p>Produce the list of all unique (binA, binB) pairs using combinations with replacement.</p> <p>This function is useful when we want to iterate over all bin pairs (including binA == binB) for collision computations. The combination ensures each pair is returned only once.</p>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#arguments_6","title":"Arguments","text":"<ul> <li>bin_indices : Array of bin indices for each particle (though   only the unique values matter).</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#returns_6","title":"Returns","text":"<ul> <li>A list of (lower_bin, upper_bin) pairs covering all unique   bins in <code>bin_indices</code>.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#examples_6","title":"Examples","text":"<pre><code>bins = np.array([0, 0, 1, 2, 2])\npairs = _get_bin_pairs(bins)\n# pairs -&gt; [(0, 0), (0, 1), (0, 2), (1, 1), (1, 2), (2, 2)]\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#signature_5","title":"Signature","text":"<pre><code>def _get_bin_pairs(bin_indices: NDArray[np.int64]) -&gt; list[Tuple[int, int]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#_sample_events","title":"_sample_events","text":"<p>Show source in super_droplet_method.py:166</p> <p>Determine how many collisions actually occur using a Poisson draw.</p> <p>This function uses the expected collision count (<code>events</code>) and normalizes by system <code>volume</code> to compute an effective collision rate. It then samples from a Poisson distribution to obtain the actual number of collisions happening within the current <code>time_step</code>.</p>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#arguments_7","title":"Arguments","text":"<ul> <li>events : The calculated number of particle pairs that could   interact.</li> <li>volume : The volume of the simulation space (m\u00b3).</li> <li>time_step : The time span (seconds) over which collisions are   considered.</li> <li>generator : A NumPy random Generator to sample the Poisson   distribution.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#returns_7","title":"Returns","text":"<ul> <li>The sampled number of coagulation events as an integer.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#examples_7","title":"Examples","text":"<pre><code>from numpy.random import default_rng\nrng = default_rng(42)\ncollisions = _sample_events(events=5e3, volume=0.1, time_step=0.01,\n    generator=rng)\n# collisions might be ~ Poisson( 5e3 / 0.1 * 0.01 ) =&gt; Poisson(5)\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#signature_6","title":"Signature","text":"<pre><code>def _sample_events(\n    events: float, volume: float, time_step: float, generator: np.random.Generator\n) -&gt; int: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#_select_random_indices","title":"_select_random_indices","text":"<p>Show source in super_droplet_method.py:267</p> <p>Randomly choose indices within each bin to represent collision partners.</p> <p>This function picks <code>events</code> indices from the population of the <code>lower_bin</code> and <code>upper_bin</code>, ignoring any radius or event-limit checks (those may happen later). The result is two arrays of equal size, each containing random picks within the respective bins.</p>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#arguments_8","title":"Arguments","text":"<ul> <li>lower_bin : Index for the \"smaller\" bin.</li> <li>upper_bin : Index for the \"larger\" bin.</li> <li>events : How many pairs to select.</li> <li>number_in_bins : Array with the count of particles in each bin.</li> <li>generator : Random number generator to draw the indices.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#returns_8","title":"Returns","text":"<ul> <li>An array of size <code>events</code> with random picks from <code>lower_bin</code>.</li> <li>An array of size <code>events</code> with random picks from <code>upper_bin</code>.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#examples_8","title":"Examples","text":"<pre><code>import numpy as np\nrng = np.random.default_rng(42)\nn_in_bins = np.array([5, 10, 7])\ni_lw, i_up = _select_random_indices(\n    lower_bin=0,\n    upper_bin=2,\n    events=3,\n    number_in_bins=n_in_bins,\n    generator=rng\n)\n# i_lw -&gt; random indices in [0..4]\n# i_up -&gt; random indices in [0..6]\n\n#### Signature\n\n```python\ndef _select_random_indices(\n    lower_bin: int,\n    upper_bin: int,\n    events: int,\n    number_in_bins: NDArray[np.int64],\n    generator: np.random.Generator,\n) -&gt; Tuple[NDArray[np.int64], NDArray[np.int64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#_sort_particles","title":"_sort_particles","text":"<p>Show source in super_droplet_method.py:491</p> <p>Sort particle radii (and optionally concentrations) in ascending order.</p> <p>The function returns an array of <code>unsort_indices</code> that can be used to restore the particles to their original order after manipulations.</p>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#arguments_9","title":"Arguments","text":"<ul> <li>particle_radius : 1D NumPy array of particle radii.</li> <li>particle_concentration : Optional array of corresponding   concentrations.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#returns_9","title":"Returns","text":"<ul> <li><code>unsort_indices</code> : Indices to revert sorting to the original order.</li> <li><code>sorted_radius</code> : Sorted array of radii in ascending order.</li> <li><code>sorted_concentration</code> : Sorted array of concentrations, if   provided; otherwise <code>None</code>.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#examples_9","title":"Examples","text":"<pre><code>import numpy as np\nr = np.array([0.3, 0.1, 0.5])\nc = np.array([10, 30, 20])\nu_idx, s_r, s_c = _sort_particles(r, c)\n# s_r -&gt; [0.1, 0.3, 0.5]\n# s_c -&gt; [30, 10, 20]\n# u_idx can be used to get them back in [0.3, 0.1, 0.5] order\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#signature_7","title":"Signature","text":"<pre><code>def _sort_particles(\n    particle_radius: NDArray[np.float64],\n    particle_concentration: Optional[NDArray[np.float64]] = None,\n) -&gt; Tuple[NDArray[np.int64], NDArray[np.float64], Optional[NDArray[np.float64]]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#_super_droplet_update_step","title":"_super_droplet_update_step","text":"<p>Show source in super_droplet_method.py:15</p> <p>Update particle radii and concentrations when two particles coagulate.</p> <p>This function merges smaller and larger particles by combining their volumes and redistributing particle concentrations. The resulting radii are computed via volume conservation, and an event counter tracks how many coagulation events each particle has undergone.</p>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#arguments_10","title":"Arguments","text":"<ul> <li>particle_radius : Array of particle radii (m).</li> <li>concentration : Array representing the concentration of each   particle (number or mass, depending on usage).</li> <li>single_event_counter : Tracks the number of coagulation events   each particle has experienced in the current iteration.</li> <li>small_index : Indices for smaller particles in a coagulation event.</li> <li>large_index : Indices for larger particles in a coagulation event.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#returns_10","title":"Returns","text":"<ul> <li>An updated array of particle radii (m) following coagulation.</li> <li>An updated array representing the concentration of particles.</li> <li>An updated array tracking the index-wise number of events.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#examples_10","title":"Examples","text":"<pre><code>import numpy as np\nr = np.array([1e-9, 2e-9, 3e-9])\nconc = np.array([100., 50., 75.])\nevents = np.zeros_like(r, dtype=int)\ns_idx = np.array([0])\nl_idx = np.array([2])\nout_r, out_c, out_ev = _super_droplet_update_step(\n    r, conc, events, s_idx, l_idx)\n# out_r[0] is updated via volume combination with out_r[2].\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#signature_8","title":"Signature","text":"<pre><code>def _super_droplet_update_step(\n    particle_radius: NDArray[np.float64],\n    concentration: NDArray[np.float64],\n    single_event_counter: NDArray[np.int64],\n    small_index: NDArray[np.int64],\n    large_index: NDArray[np.int64],\n) -&gt; Tuple[NDArray[np.float64], NDArray[np.float64], NDArray[np.int64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#get_super_droplet_coagulation_step","title":"get_super_droplet_coagulation_step","text":"<p>Show source in super_droplet_method.py:658</p> <p>Carry out one time-step of super-droplet-based coagulation.</p> <p>This function sorts particles by radius, bins them, and then stochastically computes collision events according to the coagulation kernel. It updates the particle radii/concentrations, then unsorts them back to the original order.</p>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#arguments_11","title":"Arguments","text":"<ul> <li>particle_radius : Array of particle radii (m).</li> <li>particle_concentration : Array of per-particle concentration.</li> <li>kernel : 2D matrix of coagulation kernel values, dimension   ~ len(kernel_radius) \u00d7 len(kernel_radius).</li> <li>kernel_radius : Array of radius points defining the kernel dimension.</li> <li>volume : System volume or domain size in m\u00b3.</li> <li>time_step : The length of this coagulation iteration in seconds.</li> <li>random_generator : Random number generator for sampling collisions.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#returns_11","title":"Returns","text":"<ul> <li>Updated radii array after processing coagulation.</li> <li>Updated concentrations array after processing coagulation.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#examples_11","title":"Examples","text":"<pre><code>import numpy as np\nfrom numpy.random import default_rng\nradius = np.array([1e-9, 2e-9, 5e-9])\nconc = np.array([100., 50., 10.])\nker_vals = np.ones((3,3))\nker_r = np.array([1e-9, 2e-9, 5e-9])\nrng = default_rng(42)\nr_new, c_new = get_super_droplet_coagulation_step(\n    radius, conc, ker_vals, ker_r, 1e-3, 1.0, rng)\n# r_new, c_new have updated values after one super droplet\n# coagulation step.\n\nReferences:\n- E. W. Tedford and L. A. Perugini, \"Superdroplet method\n  in cloud microphysics simulations,\" J. Atmos. Sci., 2020.\n- Seinfeld, J. H., &amp; Pandis, S. N. *Atmospheric Chemistry and Physics*,\n  Wiley, 2016.\n\n#### Signature\n\n```python\ndef get_super_droplet_coagulation_step(\n    particle_radius: NDArray[np.float64],\n    particle_concentration: NDArray[np.float64],\n    kernel: NDArray[np.float64],\n    kernel_radius: NDArray[np.float64],\n    volume: float,\n    time_step: float,\n    random_generator: np.random.Generator,\n) -&gt; Tuple[NDArray[np.float64], NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#random_choice_indices","title":"random_choice_indices","text":"<p>Show source in super_droplet_method.py:209</p> <p>Select valid particle indices in two bins for coagulation events.</p> <p>This function tries to choose <code>events</code> valid indices from <code>lower_bin</code> and <code>upper_bin</code>, discarding any particles with radius \u2264 0. It uses the provided random generator to perform the sampling with replacement if needed.</p>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#arguments_12","title":"Arguments","text":"<ul> <li>lower_bin : Index of the lower bin to filter particles from.</li> <li>upper_bin : Index of the upper bin to filter particles from.</li> <li>events : Number of events (indices) to sample for each bin.</li> <li>particle_radius : Array of particle radii; only those &gt; 0   are considered valid.</li> <li>bin_indices : Array of bin labels corresponding to each particle.</li> <li>generator : Random number generator used for index selection.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#returns_12","title":"Returns","text":"<ul> <li>Indices of particles from the lower bin.</li> <li>Indices of particles from the upper bin.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#examples_12","title":"Examples","text":"<pre><code>import numpy as np\nrng = np.random.default_rng(123)\nradius = np.array([0.3, 0.1, 0.0, 0.5])\nbins = np.array([0, 0, 1, 1])\nlw_bin, up_bin = random_choice_indices(0, 1, 2, radius, bins, rng)\n# lw_bin -&gt; array of valid picks from bin 0\n# up_bin -&gt; array of valid picks from bin 1\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/particle_resolved_step/super_droplet_method/#signature_9","title":"Signature","text":"<pre><code>def random_choice_indices(\n    lower_bin: int,\n    upper_bin: int,\n    events: int,\n    particle_radius: NDArray[np.float64],\n    bin_indices: NDArray[np.int64],\n    generator: np.random.Generator,\n) -&gt; Tuple[NDArray[np.int64], NDArray[np.int64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/","title":"Turbulent Dns Kernel","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Turbulent Dns Kernel</p> <p>Auto-generated documentation for particula.dynamics.coagulation.turbulent_dns_kernel module.</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/#modules","title":"Modules","text":"<ul> <li>G12 Radial Distribution Ao2008</li> <li>Phi Ao2008</li> <li>Psi Ao2008</li> <li>Radial Velocity Module</li> <li>Sigma Relative Velocity Ao2008</li> <li>Turbulent Dns Kernel Ao2008</li> <li>Velocity Correlation F2 Ao2008</li> <li>Velocity Correlation Terms Ao2008</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/g12_radial_distribution_ao2008/","title":"G12 Radial Distribution Ao2008","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Turbulent Dns Kernel / G12 Radial Distribution Ao2008</p> <p>Auto-generated documentation for particula.dynamics.coagulation.turbulent_dns_kernel.g12_radial_distribution_ao2008 module.</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/g12_radial_distribution_ao2008/#_calculate_c1","title":"_calculate_c1","text":"<p>Show source in g12_radial_distribution_ao2008.py:122</p> <p>Compute C_1 based on Stokes number and turbulence properties.</p> <p>C_1 is given by:</p> <p>C_1 = y(St) / (|g| / (v_k / \u03c4_k))^f_3(R_\u03bb)</p> <ul> <li>y(St) = -0.1988 St^4 + 1.5275 St^3 - 4.2942 St^2 + 5.3406 St</li> <li>f_3(R_\u03bb) = 0.1886 * exp(20.306 / R_\u03bb)</li> <li>|g| : Gravitational acceleration [m/s\u00b2]</li> <li>v_k : Kolmogorov velocity scale [m/s]</li> <li>\u03c4_k : Kolmogorov timescale [s]</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/g12_radial_distribution_ao2008/#signature","title":"Signature","text":"<pre><code>def _calculate_c1(\n    stokes_number: NDArray[np.float64],\n    reynolds_lambda: float,\n    kolmogorov_velocity: float,\n    kolmogorov_time: float,\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/g12_radial_distribution_ao2008/#_calculate_rc","title":"_calculate_rc","text":"<p>Show source in g12_radial_distribution_ao2008.py:174</p> <p>Compute r_c, the turbulence-driven correction to the collision kernel.</p> <p>The equation is:</p> <p>(r_c / \u03b7)^2 = |St_2 - St_1| * F(a_Og, R_\u03bb)</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/g12_radial_distribution_ao2008/#signature_1","title":"Signature","text":"<pre><code>def _calculate_rc(\n    stokes_diff_matrix: NDArray[np.float64],\n    kolmogorov_length_scale: float,\n    normalized_accel_variance: float,\n    reynolds_lambda: float,\n    kolmogorov_velocity: float,\n    kolmogorov_time: float,\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/g12_radial_distribution_ao2008/#_compute_a_og","title":"_compute_a_og","text":"<p>Show source in g12_radial_distribution_ao2008.py:201</p> <p>Compute aOg, which accounts for the effect of gravity on turbulence-driven clustering.</p> <ul> <li>a_Og = a_o + (\u03c0 / 8) * (|g| / (v_k / \u03c4_k))^2</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/g12_radial_distribution_ao2008/#signature_2","title":"Signature","text":"<pre><code>def _compute_a_og(\n    normalized_accel_variance: float, kolmogorov_velocity: float, kolmogorov_time: float\n) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/g12_radial_distribution_ao2008/#_compute_f","title":"_compute_f","text":"<p>Show source in g12_radial_distribution_ao2008.py:218</p> <p>Compute F(aOg, R_lambda), an empirical scaling factor for turbulence effects.</p> <ul> <li>F(a_Og, R_\u03bb) = 20.115 * (a_Og / R_\u03bb)^0.5</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/g12_radial_distribution_ao2008/#signature_3","title":"Signature","text":"<pre><code>def _compute_f(a_og: float, reynolds_lambda: float) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/g12_radial_distribution_ao2008/#_compute_f3_lambda","title":"_compute_f3_lambda","text":"<p>Show source in g12_radial_distribution_ao2008.py:169</p> <p>Compute f_3(R_lambda), an empirical turbulence factor.</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/g12_radial_distribution_ao2008/#signature_4","title":"Signature","text":"<pre><code>def _compute_f3_lambda(reynolds_lambda: float) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/g12_radial_distribution_ao2008/#_compute_y_stokes","title":"_compute_y_stokes","text":"<p>Show source in g12_radial_distribution_ao2008.py:150</p> <p>Compute y(St), ensuring values remain non-negative.</p> <p>y(St) = -0.1988 St^4 + 1.5275 St^3 - 4.2942 St^2 + 5.3406 St</p> <p>Ensures y(St) \u2265 0 (if negative, sets to 0).</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/g12_radial_distribution_ao2008/#signature_5","title":"Signature","text":"<pre><code>def _compute_y_stokes(stokes_number: NDArray[np.float64]) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/g12_radial_distribution_ao2008/#get_g12_radial_distribution_ao2008","title":"get_g12_radial_distribution_ao2008","text":"<p>Show source in g12_radial_distribution_ao2008.py:14</p> <p>Compute the radial distribution function g\u2081\u2082 for particles in a turbulent flow.</p> <p>This function describes the clustering of particles in a turbulent flow. The equation is:</p> <ul> <li>g\u2081\u2082 = ((\u03b7\u00b2 + r_c\u00b2) / (R\u00b2 + r_c\u00b2))^(C\u2081/2)<ul> <li>g\u2081\u2082 is the radial distribution function (dimensionless),</li> <li>\u03b7 is the Kolmogorov length scale (m),</li> <li>r_c is the turbulence-driven correction length (m),</li> <li>R is the collision radius (sum of the two particle radii) (m),</li> <li>C\u2081 is a dimensionless function dependent on the Stokes numbers,   Reynolds number, etc.</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/g12_radial_distribution_ao2008/#arguments","title":"Arguments","text":"<ul> <li>particle_radius : Array of particle radii in meters.</li> <li>stokes_number : Array of particle Stokes numbers (dimensionless).</li> <li>kolmogorov_length_scale : Kolmogorov length scale in meters.</li> <li>reynolds_lambda : Taylor-microscale Reynolds number (dimensionless).</li> <li>normalized_accel_variance : Normalized acceleration variance     (dimensionless).</li> <li>kolmogorov_velocity : Kolmogorov velocity scale in m/s.</li> <li>kolmogorov_time : Kolmogorov timescale in seconds.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/g12_radial_distribution_ao2008/#returns","title":"Returns","text":"<ul> <li>The radial distribution function g\u2081\u2082 (dimensionless).</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/g12_radial_distribution_ao2008/#examples","title":"Examples","text":"Example Usage<pre><code>import numpy as np\nfrom particula.dynamics.coagulation.turbulent_dns_kernel\n    .g12_radial_distribution_ao2008 import (\n        get_g12_radial_distribution_ao2008,\n    )\n\nradii = np.array([1e-7, 1e-6])\nstks = np.array([0.1, 0.2])\nresult = get_g12_radial_distribution_ao2008(\n    particle_radius=radii,\n    stokes_number=stks,\n    kolmogorov_length_scale=1e-4,\n    reynolds_lambda=100,\n    normalized_accel_variance=0.5,\n    kolmogorov_velocity=0.1,\n    kolmogorov_time=0.001,\n)\nprint(result)\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/g12_radial_distribution_ao2008/#references","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on   the geometric collision rate of sedimenting droplets. Part 2.   Theory and parameterization. New Journal of Physics, 10.   https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/g12_radial_distribution_ao2008/#signature_6","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"particle_radius\": \"positive\",\n        \"stokes_number\": \"positive\",\n        \"kolmogorov_length_scale\": \"positive\",\n        \"reynolds_lambda\": \"positive\",\n        \"normalized_accel_variance\": \"positive\",\n        \"kolmogorov_velocity\": \"positive\",\n        \"kolmogorov_time\": \"positive\",\n    }\n)\ndef get_g12_radial_distribution_ao2008(\n    particle_radius: NDArray[np.float64],\n    stokes_number: NDArray[np.float64],\n    kolmogorov_length_scale: float,\n    reynolds_lambda: float,\n    normalized_accel_variance: float,\n    kolmogorov_velocity: float,\n    kolmogorov_time: float,\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/phi_ao2008/","title":"Phi Ao2008","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Turbulent Dns Kernel / Phi Ao2008</p> <p>Auto-generated documentation for particula.dynamics.coagulation.turbulent_dns_kernel.phi_ao2008 module.</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/phi_ao2008/#phicomputeterms","title":"PhiComputeTerms","text":"<p>Show source in phi_ao2008.py:12</p> <p>Parameters for computing \u03a6 function terms.</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/phi_ao2008/#signature","title":"Signature","text":"<pre><code>class PhiComputeTerms(NamedTuple): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/phi_ao2008/#_compute_phi_term1","title":"_compute_phi_term1","text":"<p>Show source in phi_ao2008.py:121</p> <p>Compute the first term of the \u03a6 function.</p> <p>term_1 = {     1 / ( (v\u209a\u2082 / \u03c6) - (1 / \u03c4\u209a\u2082) - (1 / \u03b1) )        -  1 / ( (v\u209a\u2081 / \u03c6) + (1 / \u03c4\u209a\u2081) + (1 / \u03b1) ) }        \u00d7  ( v\u209a\u2081 - v\u209a\u2082 ) / ( 2 \u03c6 ( (v\u209a\u2081 - v\u209a\u2082 / \u03c6) + (1 / \u03c4\u209a\u2081) + (1 / \u03c4\u209a\u2082) )\u00b2 )</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/phi_ao2008/#signature_1","title":"Signature","text":"<pre><code>def _compute_phi_term1(terms: PhiComputeTerms) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/phi_ao2008/#see-also","title":"See also","text":"<ul> <li>PhiComputeTerms</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/phi_ao2008/#_compute_phi_term2","title":"_compute_phi_term2","text":"<p>Show source in phi_ao2008.py:146</p> <p>Compute the second term of the \u03a6 function.</p> <p>term\u2082 = {   4 / [ (v\u2082 / \u03c6)\u00b2 \u2212 ( (1 / \u03c4\u2082) + (1 / \u03b1) )\u00b2 ]       \u2212 1 / [ (v\u2082 / \u03c6) + (1 / \u03c4\u2082) + (1 / \u03b1) ]\u00b2       \u2212 1 / [ (v\u2082 / \u03c6) \u2212 (1 / \u03c4\u2082) \u2212 (1 / \u03b1) ]\u00b2     } \u00d7 v\u2082 /       [ 2 \u03c6 ( (1 / \u03c4\u2081) \u2212 (1 / \u03b1) + ( (1 / \u03c4\u2082) + (1 / \u03b1) ) \u00d7 (v\u2081 / v\u2082) ) ]</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/phi_ao2008/#signature_2","title":"Signature","text":"<pre><code>def _compute_phi_term2(terms: PhiComputeTerms) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/phi_ao2008/#see-also_1","title":"See also","text":"<ul> <li>PhiComputeTerms</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/phi_ao2008/#_compute_phi_term3","title":"_compute_phi_term3","text":"<p>Show source in phi_ao2008.py:181</p> <p>Compute the third term of the \u03a6 function.</p> <p>term_3 = {     2\u03c6 / ( (v\u209a\u2081 / \u03c6) + (1 / \u03c4\u209a\u2081) + (1 / \u03b1) )        -  2\u03c6 / ( (v\u209a\u2082 / \u03c6) - (1 / \u03c4\u209a\u2082) - (1 / \u03b1) )        -  v\u209a\u2081 / ( ( (v\u209a\u2081 / \u03c6) + (1 / \u03c4\u209a\u2081) + (1 / \u03b1) )\u00b2 )        +  v\u209a\u2082 / ( ( (v\u209a\u2082 / \u03c6) - (1 / \u03c4\u209a\u2082) - (1 / \u03b1) )\u00b2 ) }     \u00d7  1 / ( 2\u03c6 ( (v\u209a\u2081 - v\u209a\u2082/\u03c6 ) + (1 / \u03c4\u209a\u2081) + (1 / \u03c4\u209a\u2082) ) )</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/phi_ao2008/#signature_3","title":"Signature","text":"<pre><code>def _compute_phi_term3(terms: PhiComputeTerms) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/phi_ao2008/#see-also_2","title":"See also","text":"<ul> <li>PhiComputeTerms</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/phi_ao2008/#get_phi_ao2008","title":"get_phi_ao2008","text":"<p>Show source in phi_ao2008.py:23</p> <p>Compute the function \u03a6(\u03b1, \u03c6) for the given particle properties using Ayala et al. (2008).</p> <p>This function calculates \u03a6(\u03b1, \u03c6) when v\u209a\u2081 &gt; v\u209a\u2082 by considering the velocities (v\u209a\u2081, v\u209a\u2082) and inertia times (\u03c4\u209a\u2081, \u03c4\u209a\u2082). The equation is:</p> <p>\u03a6(\u03b1, \u03c6), for v\u209a\u2081 &gt; v\u209a\u2082 =     {  1 / ( (v\u209a\u2082 / \u03c6) - (1 / \u03c4\u209a\u2082) - (1 / \u03b1) )        -  1 / ( (v\u209a\u2081 / \u03c6) + (1 / \u03c4\u209a\u2081) + (1 / \u03b1) ) }        \u00d7  ( v\u209a\u2081 - v\u209a\u2082 ) / ( 2 \u03c6 ( (v\u209a\u2081 - v\u209a\u2082 / \u03c6) + (1 / \u03c4\u209a\u2081) + (1 / \u03c4\u209a\u2082) )\u00b2 )</p> <ul> <li> <p>{  4 / ( (v\u209a\u2082 / \u03c6)\u00b2 - ( (1 / \u03c4\u209a\u2082) + (1 / \u03b1) )\u00b2 )        -  1 / ( (v\u209a\u2082 / \u03c6) + (1 / \u03c4\u209a\u2082) + (1 / \u03b1) )\u00b2        -  1 / ( (v\u209a\u2082 / \u03c6) - (1 / \u03c4\u209a\u2082) - (1 / \u03b1) )\u00b2  }        \u00d7  ( v\u209a\u2082 / ( 2 \u03c6 ( (1 / \u03c4\u209a\u2081) - (1 / \u03b1)         + ( (1 / \u03c4\u209a\u2082) + (1 / \u03b1) ) (v\u209a\u2081 / v\u209a\u2082) ) ) )</p> </li> <li> <p>{  2\u03c6 / ( (v\u209a\u2081 / \u03c6) + (1 / \u03c4\u209a\u2081) + (1 / \u03b1) )        -  2\u03c6 / ( (v\u209a\u2082 / \u03c6) - (1 / \u03c4\u209a\u2082) - (1 / \u03b1) )        -  v\u209a\u2081 / ( ( (v\u209a\u2081 / \u03c6) + (1 / \u03c4\u209a\u2081) + (1 / \u03b1) )\u00b2 )        +  v\u209a\u2082 / ( ( (v\u209a\u2082 / \u03c6) - (1 / \u03c4\u209a\u2082) - (1 / \u03b1) )\u00b2 )  }        \u00d7  1 / ( 2\u03c6 ( (v\u209a\u2081 - v\u209a\u2082 / \u03c6) + (1 / \u03c4\u209a\u2081) + (1 / \u03c4\u209a\u2082) ) )</p> </li> <li> <p>v\u2081 and v\u2082: Velocities of particles 1 and 2 in m/s.</p> </li> <li>\u03c4\u2081 and \u03c4\u2082: Inertia timescales of particles 1 and 2 in s.</li> <li>\u03b1: Turbulent interaction parameter (dimensionless).</li> <li>\u03c6: Characteristic velocity (m/s).</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/phi_ao2008/#arguments","title":"Arguments","text":"<ul> <li>alpha : Turbulence/droplet interaction parameter (dimensionless).</li> <li>phi : Characteristic velocity parameter (m/s).</li> <li>particle_inertia_time : Inertia timescales \u03c4\u209a\u2081 and \u03c4\u209a\u2082 (s).</li> <li>particle_velocity : Velocities v\u209a\u2081 and v\u209a\u2082 (m/s).</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/phi_ao2008/#returns","title":"Returns","text":"<ul> <li>The computed \u03a6(\u03b1, \u03c6) (dimensionless).</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/phi_ao2008/#examples","title":"Examples","text":"<pre><code>import numpy as np\nfrom particula.dynamics.coagulation.turbulent_dns_kernel.phi_ao2008\n    import get_phi_ao2008\n\nalpha_val = 0.3\nphi_val = 0.1\ninertia_times = np.array([0.05, 0.06])\nvelocities = np.array([0.2, 0.18])\nresult = get_phi_ao2008(alpha_val, phi_val, inertia_times, velocities)\nprint(result)\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/phi_ao2008/#references","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on   the geometric collision rate of sedimenting droplets. Part 2.   Theory and parameterization. New Journal of Physics, 10.   https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/phi_ao2008/#signature_4","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"alpha\": \"positive\",\n        \"phi\": \"positive\",\n        \"particle_inertia_time\": \"positive\",\n        \"particle_velocity\": \"positive\",\n    }\n)\ndef get_phi_ao2008(\n    alpha: Union[float, NDArray[np.float64]],\n    phi: Union[float, NDArray[np.float64]],\n    particle_inertia_time: Union[float, NDArray[np.float64]],\n    particle_velocity: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/psi_ao2008/","title":"Psi Ao2008","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Turbulent Dns Kernel / Psi Ao2008</p> <p>Auto-generated documentation for particula.dynamics.coagulation.turbulent_dns_kernel.psi_ao2008 module.</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/psi_ao2008/#get_psi_ao2008","title":"get_psi_ao2008","text":"<p>Show source in psi_ao2008.py:12</p> <p>Compute the function \u03a8(\u03b1, \u03c6) for the k-th droplet.</p> <p>This function calculates \u03a8(\u03b1, \u03c6) for the droplet collision kernel in the turbulent DNS model. The equation is:</p> <ul> <li>\u03a8(\u03b1, \u03c6) = 1 / ((1/\u03c4\u209a\u2096) + (1/\u03b1) + (v\u209a\u2096/\u03c6))             - (v\u209a\u2096 / (2\u03c6 ((1/\u03c4\u209a\u2096) + (1/\u03b1) + (v\u209a\u2096/\u03c6))\u00b2))<ul> <li>\u03c4\u209a\u2096 is the inertia timescale of the droplet (s),</li> <li>\u03b1 is a parameter related to turbulence (dimensionless),</li> <li>\u03c6 is a characteristic velocity/timescale parameter (m/s),</li> <li>v\u209a\u2096 is the droplet velocity (m/s).</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/psi_ao2008/#arguments","title":"Arguments","text":"<ul> <li>alpha : Parameter related to turbulence (dimensionless).</li> <li>phi : Characteristic velocity or timescale parameter (m/s).</li> <li>particle_inertia_time : Inertia timescale of the droplet \u03c4\u209a\u2096 (s).</li> <li>particle_velocity : Velocity of the droplet v\u209a\u2096 (m/s).</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/psi_ao2008/#returns","title":"Returns","text":"<ul> <li>The value of \u03a8(\u03b1, \u03c6) (dimensionless).</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/psi_ao2008/#examples","title":"Examples","text":"<pre><code>import numpy as np\nimport particula as par\n\nalpha = 0.5\nphi = 0.2\nparticle_inertia_time = 0.05\nparticle_velocity = 0.3\n\npsi_value = par.dyanmics.get_psi_ao2008(\n    alpha, phi, particle_inertia_time, particle_velocity\n)\nprint(psi_value)\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/psi_ao2008/#references","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on   the geometric collision rate of sedimenting droplets. Part 2.   Theory and parameterization. New Journal of Physics, 10.   https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/psi_ao2008/#signature","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"alpha\": \"positive\",\n        \"phi\": \"positive\",\n        \"particle_inertia_time\": \"positive\",\n        \"particle_velocity\": \"positive\",\n    }\n)\ndef get_psi_ao2008(\n    alpha: Union[float, NDArray[np.float64]],\n    phi: Union[float, NDArray[np.float64]],\n    particle_inertia_time: Union[float, NDArray[np.float64]],\n    particle_velocity: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/radial_velocity_module/","title":"Radial Velocity Module","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Turbulent Dns Kernel / Radial Velocity Module</p> <p>Auto-generated documentation for particula.dynamics.coagulation.turbulent_dns_kernel.radial_velocity_module module.</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/radial_velocity_module/#get_radial_relative_velocity_ao2008","title":"get_radial_relative_velocity_ao2008","text":"<p>Show source in radial_velocity_module.py:77</p> <p>Compute the radial relative velocity based on Ayala et al. (2008).</p> <p>This function estimates the radial relative velocity between pairs of particles considering both turbulent velocity dispersion and gravitational acceleration. The conceptual form is:</p> <ul> <li>\u27e8|w\u1d63|\u27e9 = \u221a(2/\u03c0) \u00d7 \u221a(\u03c3\u00b2 + (\u03c0/8) \u00d7 (\u03c4\u209a\u2081 - \u03c4\u209a\u2082)\u00b2 \u00d7 g\u00b2)<ul> <li>w\u1d63 is the radial relative velocity in m/s,</li> <li>\u03c3 is the turbulence velocity dispersion in m/s,</li> <li>\u03c4\u209a\u2081, \u03c4\u209a\u2082 are the inertia timescales (s),</li> <li>g is the gravitational acceleration (m/s\u00b2).</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/radial_velocity_module/#arguments","title":"Arguments","text":"<ul> <li>velocity_dispersion : Turbulence velocity dispersion (\u03c3) in m/s.</li> <li>particle_inertia_time : Inertia timescale(s) of the particle(s) in seconds.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/radial_velocity_module/#returns","title":"Returns","text":"<ul> <li>The radial relative velocity \u27e8|w\u1d63|\u27e9 in m/s.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/radial_velocity_module/#examples","title":"Examples","text":"<pre><code>import numpy as np\nimport particula as par\n\n# Example usage (currently raises NotImplementedError)\ntry:\n    rv = par.dynamics.get_radial_relative_velocity_ao2008(\n        1.0, np.array([0.05, 0.1])\n    )\nexcept NotImplementedError as e:\n    print(e)\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/radial_velocity_module/#references","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on   the geometric collision rate of sedimenting droplets. Part 2. Theory   and parameterization. New Journal of Physics, 10.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/radial_velocity_module/#signature","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\"velocity_dispersion\": \"positive\", \"particle_inertia_time\": \"positive\"}\n)\ndef get_radial_relative_velocity_ao2008(\n    velocity_dispersion: Union[float, NDArray[np.float64]],\n    particle_inertia_time: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/radial_velocity_module/#get_radial_relative_velocity_dz2002","title":"get_radial_relative_velocity_dz2002","text":"<p>Show source in radial_velocity_module.py:14</p> <p>Compute the radial relative velocity based on Dodin and Elperin (2002).</p> <p>This function calculates the radial relative velocity between pairs of particles under turbulent conditions, capturing the effects of different inertia timescales. The equation is:</p> <ul> <li>\u27e8|w\u1d63|\u27e9 = \u221a(2/\u03c0) \u00d7 \u03c3 \u00d7 f(b)<ul> <li>w\u1d63 is the radial relative velocity in m/s,</li> <li>\u03c3 is the turbulence velocity dispersion in m/s,</li> <li>b = (g \u00d7 |\u03c4\u209a\u1d62 - \u03c4\u209a\u2c7c|) / (\u221a2 \u00d7 \u03c3),</li> <li>f(b) = \u00bd\u221a\u03c0 (b + 0.5 / b) erf(b) + \u00bd exp(-b\u00b2).</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/radial_velocity_module/#arguments_1","title":"Arguments","text":"<ul> <li>velocity_dispersion : Turbulence velocity dispersion (\u03c3) in m/s.</li> <li>particle_inertia_time : Inertia timescale(s) (\u03c4\u209a) in seconds.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/radial_velocity_module/#returns_1","title":"Returns","text":"<ul> <li>The radial relative velocity \u27e8|w\u1d63|\u27e9 in m/s.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/radial_velocity_module/#examples_1","title":"Examples","text":"<pre><code>import numpy as np\nimport particula as par\n\n# Example with an array of inertia times\nresult = par.dynamics.get_radial_relative_velocity_dz2002(\n    1.0, np.array([0.1, 0.2, 0.3])\n)\nprint(result)\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/radial_velocity_module/#references_1","title":"References","text":"<ul> <li>Dodin, Z., &amp; Elperin, T. (2002). Phys. Fluids, 14, 2921\u20132924.</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/radial_velocity_module/#signature_1","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\"velocity_dispersion\": \"positive\", \"particle_inertia_time\": \"positive\"}\n)\ndef get_radial_relative_velocity_dz2002(\n    velocity_dispersion: Union[float, NDArray[np.float64]],\n    particle_inertia_time: NDArray[np.float64],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/","title":"Sigma Relative Velocity Ao2008","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Turbulent Dns Kernel / Sigma Relative Velocity Ao2008</p> <p>Auto-generated documentation for particula.dynamics.coagulation.turbulent_dns_kernel.sigma_relative_velocity_ao2008 module.</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#velocitycorrelationterms","title":"VelocityCorrelationTerms","text":"<p>Show source in sigma_relative_velocity_ao2008.py:37</p> <p>Parameters from computing velocity correlation terms.</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#signature","title":"Signature","text":"<pre><code>class VelocityCorrelationTerms(NamedTuple): ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#_compute_cross_correlation_velocity","title":"_compute_cross_correlation_velocity","text":"<p>Show source in sigma_relative_velocity_ao2008.py:256</p> <p>Compute cross-correlation of fluctuating velocities for two droplets.</p> <p>This function calculates the cross-correlation of the fluctuating velocities of two droplets using the following equation:</p> <p>Where the equation is</p> <ul> <li>\u27e8v'\u00b9 v'\u00b2\u27e9 = (u'\u00b2 f\u2082(R) / (\u03c4_p1 \u03c4_p2)) *     [b\u2081 d\u2081 \u03a6(c\u2081, e\u2081) - b\u2081 d\u2082 \u03a6(c\u2081, e\u2082) - b\u2082 d\u2081 \u03a6(c\u2082, e\u2081) + b\u2082 d\u2082 \u03a6(c\u2082, e\u2082)]<ul> <li>v'\u00b9, v'\u00b2 are the fluctuating velocities for droplets 1 and 2.</li> <li>u' (fluid_rms_velocity) : Fluid RMS fluctuation velocity [m/s].</li> <li>\u03c4_p1, \u03c4_p2 : Inertia timescales of droplets 1 and 2 [s].</li> <li>f\u2082(R) : Longitudinal velocity correlation function.</li> <li>\u03a6(c, e) : Function \u03a6 computed using <code>get_phi_ao2008</code>.</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#arguments","title":"Arguments","text":"<ul> <li>fluid_rms_velocity : Fluid RMS fluctuation velocity [m/s].</li> <li>collisional_radius : Distance between two colliding droplets [m].</li> <li>particle_inertia_time : Inertia timescale of droplet 1 [s].</li> <li>particle_velocity : Droplet velocity [m/s].</li> <li>taylor_microscale : Taylor microscale [m].</li> <li>eulerian_integral_length : Eulerian integral length scale [m].</li> <li>velocity_correlation_terms : Velocity correlation coefficients [-].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#returns","title":"Returns","text":"<ul> <li>Cross-correlation velocity [m\u00b2/s\u00b2].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#examples","title":"Examples","text":"<pre><code>import numpy as np\nccv = _compute_cross_correlation_velocity(\n    fluid_rms_velocity=0.3,\n    collisional_radius=np.array([1e-4, 2e-4]),\n    particle_inertia_time=np.array([1.0, 1.2]),\n    particle_velocity=np.array([0.1, 0.2]),\n    taylor_microscale=0.01,\n    eulerian_integral_length=0.1,\n    velocity_correlation_terms=VelocityCorrelationTerms(\n        b1=0.1, b2=0.2, d1=0.3, d2=0.4, c1=0.5, c2=0.6, e1=0.7, e2=0.8\n    )\n)\n# Output: array([...])\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#references","title":"References","text":"<ul> <li>Ayala, O. et al. (2008). Effects of turbulence on the geometric   collision rate of sedimenting droplets. Part 2. Theory and   parameterization. New Journal of Physics, 10.   https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#signature_1","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"fluid_rms_velocity\": \"positive\",\n        \"collisional_radius\": \"positive\",\n        \"particle_inertia_time\": \"positive\",\n        \"particle_velocity\": \"positive\",\n        \"taylor_microscale\": \"positive\",\n        \"eulerian_integral_length\": \"positive\",\n    }\n)\ndef _compute_cross_correlation_velocity(\n    fluid_rms_velocity: float,\n    collisional_radius: Union[float, NDArray[np.float64]],\n    particle_inertia_time: Union[float, NDArray[np.float64]],\n    particle_velocity: Union[float, NDArray[np.float64]],\n    taylor_microscale: float,\n    eulerian_integral_length: float,\n    velocity_correlation_terms: VelocityCorrelationTerms,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#see-also","title":"See also","text":"<ul> <li>VelocityCorrelationTerms</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#_compute_rms_fluctuation_velocity","title":"_compute_rms_fluctuation_velocity","text":"<p>Show source in sigma_relative_velocity_ao2008.py:151</p> <p>Compute RMS fluctuation velocity for the k-th droplet.</p> <p>This function calculates the square of the RMS fluctuation velocity for the k-th droplet using the following equation:</p> <p>Where the equation is:</p> <ul> <li>\u27e8(v'\u1d4f)\u00b2\u27e9 = (u'\u00b2 / \u03c4_pk) * [b\u2081 d\u2081 \u03a8(c\u2081, e\u2081) - b\u2081 d\u2082 \u03a8(c\u2081, e\u2082)</li> <li>b\u2082 d\u2081 \u03a8(c\u2082, e\u2081) + b\u2082 d\u2082 \u03a8(c\u2082, e\u2082)]<ul> <li>v'\u1d4f is the fluctuating velocity for droplet k.</li> <li>u' (fluid_rms_velocity) : Fluid RMS fluctuation velocity [m/s].</li> <li>\u03c4_pk (particle_inertia_time) : Inertia timescale of the droplet k     [s].</li> <li>\u03a8(c, e) : Function \u03a8 computed using <code>get_psi_ao2008</code>.</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#arguments_1","title":"Arguments","text":"<ul> <li>fluid_rms_velocity : Fluid RMS fluctuation velocity [m/s].</li> <li>particle_inertia_time : Inertia timescale of the droplet k [s].</li> <li>particle_velocity : Droplet velocity [m/s].</li> <li>velocity_correlation_terms : Velocity correlation coefficients [-].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#returns_1","title":"Returns","text":"<ul> <li>RMS fluctuation velocity [m\u00b2/s\u00b2].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#examples_1","title":"Examples","text":"<pre><code>import numpy as np\nrms_fluct = _compute_rms_fluctuation_velocity(\n    fluid_rms_velocity=0.3,\n    particle_inertia_time=np.array([1.0, 1.2]),\n    particle_velocity=np.array([0.1, 0.2]),\n    velocity_correlation_terms=VelocityCorrelationTerms(\n        b1=0.1, b2=0.2, d1=0.3, d2=0.4, c1=0.5, c2=0.6, e1=0.7, e2=0.8\n    )\n)\n# Output: array([...])\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#references_1","title":"References","text":"<ul> <li>Ayala, O. et al. (2008). Effects of turbulence on the geometric   collision rate of sedimenting droplets. Part 2. Theory and   parameterization. New Journal of Physics, 10.   https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#signature_2","title":"Signature","text":"<pre><code>@validate_inputs({\"fluid_rms_velocity\": \"positive\", \"particle_inertia_time\": \"positive\"})\ndef _compute_rms_fluctuation_velocity(\n    fluid_rms_velocity: float,\n    particle_inertia_time: Union[float, NDArray[np.float64]],\n    particle_velocity: Union[float, NDArray[np.float64]],\n    velocity_correlation_terms: VelocityCorrelationTerms,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#see-also_1","title":"See also","text":"<ul> <li>VelocityCorrelationTerms</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#get_relative_velocity_variance","title":"get_relative_velocity_variance","text":"<p>Show source in sigma_relative_velocity_ao2008.py:50</p> <p>Compute the variance of particle relative-velocity fluctuations.</p> <p>This function calculates the variance of particle relative-velocity fluctuations using the following equation:</p> <p>Where the equation is:</p> <ul> <li>\u03c3\u00b2 = \u27e8(v'\u00b2)\u27e9\u2081 + \u27e8(v'\u00b2)\u27e9\u2082 - 2\u27e8v'\u00b9 v'\u00b2\u27e9<ul> <li>v'\u00b9, v'\u00b2 are the fluctuating velocities for droplets 1 and 2.</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#arguments_2","title":"Arguments","text":"<ul> <li>fluid_rms_velocity : Fluid RMS fluctuation velocity [m/s].</li> <li>collisional_radius : Distance between two colliding droplets [m].</li> <li>particle_inertia_time : Inertia timescale of droplet 1 [s].</li> <li>particle_velocity : Droplet velocity [m/s].</li> <li>taylor_microscale : Taylor microscale [m].</li> <li>eulerian_integral_length : Eulerian integral length scale [m].</li> <li>lagrangian_integral_time : Lagrangian integral time scale [s].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#returns_2","title":"Returns","text":"<ul> <li>\u03c3\u00b2 : Variance of the particle relative-velocity fluctuation [m\u00b2/s\u00b2].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#examples_2","title":"Examples","text":"<pre><code>import numpy as np\nsigma_sq = get_relative_velocity_variance(\n    fluid_rms_velocity=0.3,\n    collisional_radius=np.array([1e-4, 2e-4]),\n    particle_inertia_time=np.array([1.0, 1.2]),\n    particle_velocity=np.array([0.1, 0.2]),\n    taylor_microscale=0.01,\n    eulerian_integral_length=0.1,\n    lagrangian_integral_time=0.5,\n    lagrangian_taylor_microscale_time=0.05\n)\n# Output: array([...])\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#references_2","title":"References","text":"<ul> <li>Ayala, O. et al. (2008). Effects of turbulence on the geometric   collision rate of sedimenting droplets. Part 2. Theory and   parameterization. New Journal of Physics, 10.   https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/sigma_relative_velocity_ao2008/#signature_3","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"fluid_rms_velocity\": \"positive\",\n        \"collisional_radius\": \"positive\",\n        \"particle_inertia_time\": \"positive\",\n        \"particle_velocity\": \"positive\",\n    }\n)\ndef get_relative_velocity_variance(\n    fluid_rms_velocity: float,\n    collisional_radius: NDArray[np.float64],\n    particle_inertia_time: NDArray[np.float64],\n    particle_velocity: NDArray[np.float64],\n    taylor_microscale: float,\n    eulerian_integral_length: float,\n    lagrangian_integral_time: float,\n    lagrangian_taylor_microscale_time: float,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/turbulent_dns_kernel_ao2008/","title":"Turbulent Dns Kernel Ao2008","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Turbulent Dns Kernel / Turbulent Dns Kernel Ao2008</p> <p>Auto-generated documentation for particula.dynamics.coagulation.turbulent_dns_kernel.turbulent_dns_kernel_ao2008 module.</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/turbulent_dns_kernel_ao2008/#get_turbulent_dns_kernel_ao2008","title":"get_turbulent_dns_kernel_ao2008","text":"<p>Show source in turbulent_dns_kernel_ao2008.py:28</p> <p>Compute the geometric collision kernel \u0393\u2081\u2082 from DNS simulations.</p> <p>Where the equation is</p> <ul> <li>\u0393\u2081\u2082 = 2\u03c0 R\u00b2 \u27e8|w\u1d63|\u27e9 g\u2081\u2082<ul> <li>\u0393\u2081\u2082 is collision kernel [m\u00b3/s].</li> <li>R is collision radius [m].</li> <li>w\u1d63 is radial relative velocity [m/s].</li> <li>g\u2081\u2082 is radial distribution function [dimensionless].</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/turbulent_dns_kernel_ao2008/#arguments","title":"Arguments","text":"<ul> <li>particle_radius : Particle radius [m].</li> <li>velocity_dispersion : Velocity dispersion [m/s].</li> <li>particle_inertia_time : Particle inertia time [s].</li> <li>stokes_number : Stokes number [-].</li> <li>kolmogorov_length_scale : Kolmogorov length scale [m].</li> <li>reynolds_lambda : Reynolds number [-].</li> <li>normalized_accel_variance : Normalized acceleration variance [-].</li> <li>kolmogorov_velocity : Kolmogorov velocity [m/s].</li> <li>kolmogorov_time : Kolmogorov time [s].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/turbulent_dns_kernel_ao2008/#returns","title":"Returns","text":"<ul> <li>Collision kernel \u0393\u2081\u2082 [m\u00b3/s].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/turbulent_dns_kernel_ao2008/#references","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on     the geometric collision rate of sedimenting droplets. Part 2.     Theory and parameterization. New Journal of Physics, 10.     https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/turbulent_dns_kernel_ao2008/#signature","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"particle_radius\": \"positive\",\n        \"velocity_dispersion\": \"positive\",\n        \"particle_inertia_time\": \"positive\",\n    }\n)\ndef get_turbulent_dns_kernel_ao2008(\n    particle_radius: Union[float, NDArray[np.float64]],\n    velocity_dispersion: Union[float, NDArray[np.float64]],\n    particle_inertia_time: Union[float, NDArray[np.float64]],\n    stokes_number: Union[float, NDArray[np.float64]],\n    kolmogorov_length_scale: float,\n    reynolds_lambda: float,\n    normalized_accel_variance: float,\n    kolmogorov_velocity: float,\n    kolmogorov_time: float,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/turbulent_dns_kernel_ao2008/#get_turbulent_dns_kernel_ao2008_via_system_state","title":"get_turbulent_dns_kernel_ao2008_via_system_state","text":"<p>Show source in turbulent_dns_kernel_ao2008.py:103</p> <p>Compute the geometric collision kernel \u0393\u2081\u2082 using AO2008 for system.</p> <p>This function orchestrates the calculation of the geometric collision kernel by deriving necessary fluid, turbulence, and particle parameters from the provided system state. The returned value (or array) represents the collision kernel, \u0393\u2081\u2082 [m\u00b3/s], which describes collision frequency under turbulence.</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/turbulent_dns_kernel_ao2008/#arguments_1","title":"Arguments","text":"<ul> <li>particle_radius : Radius of the particles [m]. If an array is given,     it is assumed to represent multiple particle sizes.</li> <li>particle_density : Density of the particles [kg/m\u00b3]. Must match the     dimensionality of <code>particle_radius</code> if both are arrays.</li> <li>fluid_density : Density of the surrounding fluid [kg/m\u00b3].</li> <li>temperature : Temperature of the fluid [K].</li> <li>re_lambda : Turbulent Reynolds number based on the Taylor microscale.</li> <li>relative_velocity : Mean relative velocity between the particle and     fluid [m/s]. Can be a single value or an array of the same     dimensionality as <code>particle_radius</code>.</li> <li>turbulent_dissipation : Turbulent kinetic energy dissipation rate     [m\u00b2/s\u00b3].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/turbulent_dns_kernel_ao2008/#returns_1","title":"Returns","text":"<ul> <li>Collision kernel \u0393\u2081\u2082 [m\u00b3/s].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/turbulent_dns_kernel_ao2008/#examples","title":"Examples","text":"<pre><code>kernel_via_state = get_turbulent_dns_kernel_ao2008_via_system_state(\n    particle_radius=np.array([1e-6, 2e-6]),\n    particle_density=1000.0,\n    fluid_density=1.225,\n    temperature=298.15,\n    re_lambda=100.0,\n    relative_velocity=0.1,\n    turbulent_dissipation=0.01,\n)\n# Output: array([...])\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/turbulent_dns_kernel_ao2008/#references_1","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on   the geometric collision rate of sedimenting droplets. Part 2.   Theory and parameterization. New Journal of Physics, 10.   https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/turbulent_dns_kernel_ao2008/#signature_1","title":"Signature","text":"<pre><code>def get_turbulent_dns_kernel_ao2008_via_system_state(\n    particle_radius: Union[float, NDArray[np.float64]],\n    particle_density: Union[float, NDArray[np.float64]],\n    fluid_density: float,\n    temperature: float,\n    re_lambda: float,\n    relative_velocity: Union[float, NDArray[np.float64]],\n    turbulent_dissipation: float,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_f2_ao2008/","title":"Velocity Correlation F2 Ao2008","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Turbulent Dns Kernel / Velocity Correlation F2 Ao2008</p> <p>Auto-generated documentation for particula.dynamics.coagulation.turbulent_dns_kernel.velocity_correlation_f2_ao2008 module.</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_f2_ao2008/#get_f2_longitudinal_velocity_correlation","title":"get_f2_longitudinal_velocity_correlation","text":"<p>Show source in velocity_correlation_f2_ao2008.py:16</p> <p>Compute the longitudinal velocity correlation function f\u2082(R) from Ayala et al. (2008).</p> <p>This function describes the correlation of velocity fluctuations as a function of collisional radius R between two colliding droplets.</p> <p>Where the equation is:</p> <ul> <li>f\u2082(R) = 1 / (2\u221a(1 - 2\u03b2\u00b2)) \u00d7 {     (1 + \u221a(1 - 2\u03b2\u00b2)) exp[-2R / ((1 + \u221a(1 - 2\u03b2\u00b2)) L_e)]<ul> <li>(1 - \u221a(1 - 2\u03b2\u00b2)) exp[-2R / ((1 - \u221a(1 - 2\u03b2\u00b2)) L_e)]   }</li> <li>f\u2082(R) is the longitudinal velocity correlation function [-].</li> <li>R is the collisional radius [m].</li> <li>\u03b2 = (\u221a2 * \u03bb) / L_e</li> <li>\u03bb (taylor_microscale) : Taylor microscale [m].</li> <li>L_e (eulerian_integral_length) : Eulerian integral length scale   [m].</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_f2_ao2008/#arguments","title":"Arguments","text":"<ul> <li>collisional_radius : Distance between two colliding droplets [m].</li> <li>taylor_microscale : Taylor microscale [m].</li> <li>eulerian_integral_length : Eulerian integral length scale [m].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_f2_ao2008/#returns","title":"Returns","text":"<ul> <li>f\u2082(R) value [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_f2_ao2008/#examples","title":"Examples","text":"<pre><code>import numpy as np\nexample_f2 = get_f2_longitudinal_velocity_correlation(\n    collisional_radius=np.array([1e-4, 2e-4]),\n    taylor_microscale=1e-3,\n    eulerian_integral_length=1e-2,\n)\n# Output: array([...])\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_f2_ao2008/#references","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on   the geometric collision rate of sedimenting droplets. Part 2. Theory   and parameterization. New Journal of Physics, 10.   https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_f2_ao2008/#signature","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"collisional_radius\": \"positive\",\n        \"taylor_microscale\": \"positive\",\n        \"eulerian_integral_length\": \"positive\",\n    }\n)\ndef get_f2_longitudinal_velocity_correlation(\n    collisional_radius: Union[float, NDArray[np.float64]],\n    taylor_microscale: Union[float, NDArray[np.float64]],\n    eulerian_integral_length: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/","title":"Velocity Correlation Terms Ao2008","text":"<p>Particula Index / Particula / Dynamics / Coagulation / Turbulent Dns Kernel / Velocity Correlation Terms Ao2008</p> <p>Auto-generated documentation for particula.dynamics.coagulation.turbulent_dns_kernel.velocity_correlation_terms_ao2008 module.</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#compute_b1","title":"compute_b1","text":"<p>Show source in velocity_correlation_terms_ao2008.py:98</p> <p>Compute b\u2081, a dimensionless parameter in the Ayala 2008 model.</p> <ul> <li>b\u2081 = (1 + \u221a(1 - 2z\u00b2)) / (2 \u221a(1 - 2z\u00b2))<ul> <li>z is \u03c4_T / T_L.</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#arguments","title":"Arguments","text":"<ul> <li>z : A dimensionless parameter related to turbulence [-].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#returns","title":"Returns","text":"<ul> <li>b\u2081 value [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#examples","title":"Examples","text":"<pre><code>b1_val = compute_b1(0.5)\n# Output: 0.866\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#references","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on     the geometric collision rate of sedimenting droplets. Part 2.     Theory and parameterization. New Journal of Physics, 10.     https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#signature","title":"Signature","text":"<pre><code>@validate_inputs({\"z\": \"positive\"})\ndef compute_b1(\n    z: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#compute_b2","title":"compute_b2","text":"<p>Show source in velocity_correlation_terms_ao2008.py:129</p> <p>Compute b\u2082, a dimensionless parameter in the Ayala 2008 model.</p> <ul> <li>b\u2082 = (1 - \u221a(1 - 2z\u00b2)) / (2 \u221a(1 - 2z\u00b2))<ul> <li>z is \u03c4_T / T_L.</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#arguments_1","title":"Arguments","text":"<ul> <li>z : A dimensionless parameter related to turbulence [-].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#returns_1","title":"Returns","text":"<ul> <li>b\u2082 value [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#examples_1","title":"Examples","text":"<pre><code>b2_val = compute_b2(0.5)\n# Output: 0.134\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#references_1","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on     the geometric collision rate of sedimenting droplets. Part 2.     Theory and parameterization. New Journal of Physics, 10.     https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#signature_1","title":"Signature","text":"<pre><code>@validate_inputs({\"z\": \"positive\"})\ndef compute_b2(\n    z: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#compute_beta","title":"compute_beta","text":"<p>Show source in velocity_correlation_terms_ao2008.py:60</p> <p>Compute \u03b2, the ratio of microscale to integral length scale.</p> <ul> <li>\u03b2 = (\u221a2 \u00d7 \u03bb) / L_e<ul> <li>\u03bb is Taylor microscale [m].</li> <li>L_e is Eulerian integral length scale [m].</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#arguments_2","title":"Arguments","text":"<ul> <li>taylor_microscale : Taylor microscale [m].</li> <li>eulerian_integral_length : Eulerian integral length scale [m].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#returns_2","title":"Returns","text":"<ul> <li>\u03b2 value [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#examples_2","title":"Examples","text":"<pre><code>beta_val = compute_beta(0.001, 0.1)\n# Output: 0.01414\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#references_2","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on     the geometric collision rate of sedimenting droplets. Part 2.     Theory and parameterization. New Journal of Physics, 10.     https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#signature_2","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\"taylor_microscale\": \"positive\", \"eulerian_integral_length\": \"positive\"}\n)\ndef compute_beta(\n    taylor_microscale: Union[float, NDArray[np.float64]],\n    eulerian_integral_length: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#compute_c1","title":"compute_c1","text":"<p>Show source in velocity_correlation_terms_ao2008.py:160</p> <p>Compute c\u2081, a dimensionless timescale factor in the Ayala 2008 model.</p> <ul> <li>c\u2081 = ((1 + \u221a(1 - 2z\u00b2)) \u00d7 T_L) / 2<ul> <li>z is \u03c4_T / T_L.</li> <li>T_L is the Lagrangian integral timescale [s].</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#arguments_3","title":"Arguments","text":"<ul> <li>z : A dimensionless parameter related to turbulence [-].</li> <li>lagrangian_integral_scale : Lagrangian integral timescale [s].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#returns_3","title":"Returns","text":"<ul> <li>c\u2081 value [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#examples_3","title":"Examples","text":"<pre><code>c1_val = compute_c1(0.5, 1.0)\n# Output: 0.933\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#references_3","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on     the geometric collision rate of sedimenting droplets. Part 2.     Theory and parameterization. New Journal of Physics, 10.     https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#signature_3","title":"Signature","text":"<pre><code>@validate_inputs({\"z\": \"positive\", \"lagrangian_integral_scale\": \"positive\"})\ndef compute_c1(\n    z: Union[float, NDArray[np.float64]],\n    lagrangian_integral_scale: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#compute_c2","title":"compute_c2","text":"<p>Show source in velocity_correlation_terms_ao2008.py:193</p> <p>Compute c\u2082, a dimensionless timescale factor in the Ayala 2008 model.</p> <ul> <li>c\u2082 = ((1 - \u221a(1 - 2z\u00b2)) \u00d7 T_L) / 2<ul> <li>z is \u03c4_T / T_L.</li> <li>T_L is the Lagrangian integral timescale [s].</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#arguments_4","title":"Arguments","text":"<ul> <li>z : A dimensionless parameter related to turbulence [-].</li> <li>lagrangian_integral_scale : Lagrangian integral timescale [s].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#returns_4","title":"Returns","text":"<ul> <li>c\u2082 value [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#examples_4","title":"Examples","text":"<pre><code>c2_val = compute_c2(0.5, 1.0)\n# Output: 0.067\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#references_4","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on     the geometric collision rate of sedimenting droplets. Part 2.     Theory and parameterization. New Journal of Physics, 10.     https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#signature_4","title":"Signature","text":"<pre><code>@validate_inputs({\"z\": \"positive\", \"lagrangian_integral_scale\": \"positive\"})\ndef compute_c2(\n    z: Union[float, NDArray[np.float64]],\n    lagrangian_integral_scale: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#compute_d1","title":"compute_d1","text":"<p>Show source in velocity_correlation_terms_ao2008.py:226</p> <p>Compute d\u2081, another dimensionless coefficient from Ayala 2008.</p> <ul> <li>d\u2081 = (1 + \u221a(1 - 2\u03b2\u00b2)) / (2 \u221a(1 - 2\u03b2\u00b2))<ul> <li>\u03b2 is defined as \u03b2 = (\u221a2 \u00d7 \u03bb) / L_e.</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#arguments_5","title":"Arguments","text":"<ul> <li>beta : A dimensionless parameter related to turbulence [-].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#returns_5","title":"Returns","text":"<ul> <li>d\u2081 value [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#examples_5","title":"Examples","text":"<pre><code>d1_val = compute_d1(0.5)\n# Output: 0.866\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#references_5","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on     the geometric collision rate of sedimenting droplets. Part 2.     Theory and parameterization. New Journal of Physics, 10.     https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#signature_5","title":"Signature","text":"<pre><code>@validate_inputs({\"beta\": \"positive\"})\ndef compute_d1(\n    beta: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#compute_d2","title":"compute_d2","text":"<p>Show source in velocity_correlation_terms_ao2008.py:257</p> <p>Compute d\u2082, another dimensionless coefficient from Ayala 2008.</p> <ul> <li>d\u2082 = (1 - \u221a(1 - 2\u03b2\u00b2)) / (2 \u221a(1 - 2\u03b2\u00b2))<ul> <li>\u03b2 is defined as \u03b2 = (\u221a2 \u00d7 \u03bb) / L_e.</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#arguments_6","title":"Arguments","text":"<ul> <li>beta : A dimensionless parameter related to turbulence [-].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#returns_6","title":"Returns","text":"<ul> <li>d\u2082 value [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#examples_6","title":"Examples","text":"<pre><code>d2_val = compute_d2(0.5)\n# Output: 0.134\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#references_6","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on     the geometric collision rate of sedimenting droplets. Part 2.     Theory and parameterization. New Journal of Physics, 10.     https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#signature_6","title":"Signature","text":"<pre><code>@validate_inputs({\"beta\": \"positive\"})\ndef compute_d2(\n    beta: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#compute_e1","title":"compute_e1","text":"<p>Show source in velocity_correlation_terms_ao2008.py:288</p> <p>Compute e\u2081, which scales the integral length by a factor in Ayala 2008.</p> <ul> <li>e\u2081 = ((1 + \u221a(1 - 2\u03b2\u00b2)) \u00d7 L_e) / 2<ul> <li>\u03b2 is defined as \u03b2 = (\u221a2 \u00d7 \u03bb) / L_e.</li> <li>L_e is the Eulerian integral length scale [m].</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#arguments_7","title":"Arguments","text":"<ul> <li>beta : A dimensionless parameter related to turbulence [-].</li> <li>eulerian_integral_length : Eulerian integral length scale [m].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#returns_7","title":"Returns","text":"<ul> <li>e\u2081 value [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#examples_7","title":"Examples","text":"<pre><code>e1_val = compute_e1(0.5, 0.1)\n# Output: 0.0866\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#references_7","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on     the geometric collision rate of sedimenting droplets. Part 2.     Theory and parameterization. New Journal of Physics, 10.     https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#signature_7","title":"Signature","text":"<pre><code>@validate_inputs({\"beta\": \"positive\", \"eulerian_integral_length\": \"positive\"})\ndef compute_e1(\n    beta: Union[float, NDArray[np.float64]],\n    eulerian_integral_length: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#compute_e2","title":"compute_e2","text":"<p>Show source in velocity_correlation_terms_ao2008.py:321</p> <p>Compute e\u2082, which scales the integral length by a factor in Ayala 2008.</p> <ul> <li>e\u2082 = ((1 - \u221a(1 - 2\u03b2\u00b2)) \u00d7 L_e) / 2<ul> <li>\u03b2 is defined as \u03b2 = (\u221a2 \u00d7 \u03bb) / L_e.</li> <li>L_e is the Eulerian integral length scale [m].</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#arguments_8","title":"Arguments","text":"<ul> <li>beta : A dimensionless parameter related to turbulence [-].</li> <li>eulerian_integral_length : Eulerian integral length scale [m].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#returns_8","title":"Returns","text":"<ul> <li>e\u2082 value [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#examples_8","title":"Examples","text":"<pre><code>e2_val = compute_e2(0.5, 0.1)\n# Output: 0.0134\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#references_8","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on     the geometric collision rate of sedimenting droplets. Part 2.     Theory and parameterization. New Journal of Physics, 10.     https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#signature_8","title":"Signature","text":"<pre><code>@validate_inputs({\"beta\": \"positive\", \"eulerian_integral_length\": \"positive\"})\ndef compute_e2(\n    beta: Union[float, NDArray[np.float64]],\n    eulerian_integral_length: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#compute_z","title":"compute_z","text":"<p>Show source in velocity_correlation_terms_ao2008.py:18</p> <p>Compute z, the ratio of Taylor microscale time to Lagrangian timescale.</p> <p>Where the equation is - z = \u03c4_T / T_L     - \u03c4_T (lagrangian_taylor_microscale_time) is the Lagrangian Taylor         microscale time [s].     - T_L (lagrangian_integral_scale) is the Lagrangian integral         timescale [s].</p>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#arguments_9","title":"Arguments","text":"<ul> <li>lagrangian_taylor_microscale_time : Lagrangian Taylor microscale     time [s].</li> <li>lagrangian_integral_scale : Lagrangian integral timescale [s].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#returns_9","title":"Returns","text":"<ul> <li>z value [dimensionless].</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#examples_9","title":"Examples","text":"<pre><code>example_z = compute_z(0.5, 1.0)\n# Output: 0.5\n</code></pre>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#references_9","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on     the geometric collision rate of sedimenting droplets. Part 2.     Theory and parameterization. New Journal of Physics, 10.     https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/dynamics/coagulation/turbulent_dns_kernel/velocity_correlation_terms_ao2008/#signature_9","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"lagrangian_taylor_microscale_time\": \"positive\",\n        \"lagrangian_integral_scale\": \"positive\",\n    }\n)\ndef compute_z(\n    lagrangian_taylor_microscale_time: Union[float, NDArray[np.float64]],\n    lagrangian_integral_scale: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/condensation/","title":"Condensation","text":"<p>Particula Index / Particula / Dynamics / Condensation</p> <p>Auto-generated documentation for particula.dynamics.condensation module.</p>"},{"location":"API/particula/dynamics/condensation/#modules","title":"Modules","text":"<ul> <li>Condensation Strategies</li> <li>Mass Transfer</li> </ul>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/","title":"Condensation Strategies","text":"<p>Particula Index / Particula / Dynamics / Condensation / Condensation Strategies</p> <p>Auto-generated documentation for particula.dynamics.condensation.condensation_strategies module.</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#condensationisothermal","title":"CondensationIsothermal","text":"<p>Show source in condensation_strategies.py:362</p> <p>Condensation strategy for isothermal conditions.</p> <p>Condensation strategy for isothermal conditions, where the temperature remains constant. This class implements the mass transfer rate calculation for condensation of particles based on partial pressures. No Latent heat of vaporization effect is considered.</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#signature","title":"Signature","text":"<pre><code>class CondensationIsothermal(CondensationStrategy):\n    def __init__(\n        self,\n        molar_mass: Union[float, NDArray[np.float64]],\n        diffusion_coefficient: Union[float, NDArray[np.float64]] = 2e-05,\n        accommodation_coefficient: Union[float, NDArray[np.float64]] = 1.0,\n        update_gases: bool = True,\n    ): ...\n</code></pre>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#see-also","title":"See also","text":"<ul> <li>CondensationStrategy</li> </ul>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#condensationisothermalmass_transfer_rate","title":"CondensationIsothermal().mass_transfer_rate","text":"<p>Show source in condensation_strategies.py:385</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#signature_1","title":"Signature","text":"<pre><code>def mass_transfer_rate(\n    self,\n    particle: ParticleRepresentation,\n    gas_species: GasSpecies,\n    temperature: float,\n    pressure: float,\n    dynamic_viscosity: Optional[float] = None,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#see-also_1","title":"See also","text":"<ul> <li>GasSpecies</li> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#condensationisothermalrate","title":"CondensationIsothermal().rate","text":"<p>Show source in condensation_strategies.py:412</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#signature_2","title":"Signature","text":"<pre><code>def rate(\n    self,\n    particle: ParticleRepresentation,\n    gas_species: GasSpecies,\n    temperature: float,\n    pressure: float,\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#see-also_2","title":"See also","text":"<ul> <li>GasSpecies</li> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#condensationisothermalstep","title":"CondensationIsothermal().step","text":"<p>Show source in condensation_strategies.py:441</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#signature_3","title":"Signature","text":"<pre><code>def step(\n    self,\n    particle: ParticleRepresentation,\n    gas_species: GasSpecies,\n    temperature: float,\n    pressure: float,\n    time_step: float,\n) -&gt; Tuple[ParticleRepresentation, GasSpecies]: ...\n</code></pre>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#see-also_3","title":"See also","text":"<ul> <li>GasSpecies</li> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#condensationstrategy","title":"CondensationStrategy","text":"<p>Show source in condensation_strategies.py:63</p> <p>Abstract base class for condensation strategies.</p> <p>This class defines the interface for various condensation models used in atmospheric physics. Subclasses should implement specific condensation algorithms based on different physical models and equations.</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#arguments","title":"Arguments","text":"<ul> <li>molar_mass : The molar mass of the species [kg/mol]. If a single     value is provided, it will be used for all species.</li> <li>diffusion_coefficient : The diffusion coefficient of the species     [m^2/s]. If a single value is provided, it will be used for all     species. Default is 2e-5 m^2/s for air.</li> <li>accommodation_coefficient : The mass accommodation coefficient of the     species. If a single value is provided, it will be used for all     species. Default is 1.0.</li> </ul>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#signature_4","title":"Signature","text":"<pre><code>class CondensationStrategy(ABC):\n    def __init__(\n        self,\n        molar_mass: Union[float, NDArray[np.float64]],\n        diffusion_coefficient: Union[float, NDArray[np.float64]] = 2e-05,\n        accommodation_coefficient: Union[float, NDArray[np.float64]] = 1.0,\n        update_gases: bool = True,\n    ): ...\n</code></pre>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#condensationstrategy_fill_zero_radius","title":"CondensationStrategy()._fill_zero_radius","text":"<p>Show source in condensation_strategies.py:202</p> <p>Fill zero radius values with the maximum radius. The concentration value of zero will ensure that the rate of condensation is zero. The fill is necessary to avoid division by zero in the array operations.</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#arguments_1","title":"Arguments","text":"<ul> <li>radius : The radius of the particles.</li> </ul>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#returns","title":"Returns","text":"<ul> <li>radius : The radius of the particles with zero values filled.</li> </ul>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#raises","title":"Raises","text":"<ul> <li>Warning : If all radius values are zero.</li> </ul>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#signature_5","title":"Signature","text":"<pre><code>def _fill_zero_radius(self, radius: NDArray[np.float64]) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#condensationstrategycalculate_pressure_delta","title":"CondensationStrategy().calculate_pressure_delta","text":"<p>Show source in condensation_strategies.py:228</p> <p>Calculate the difference in partial pressure between the gas and particle phases.</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#arguments_2","title":"Arguments","text":"<ul> <li>particle : The particle for which the partial pressure difference     is to be calculated.</li> <li>gas_species : The gas species with which the particle is in     contact.</li> <li>temperature : The temperature at which the partial pressure     difference is to be calculated.</li> <li>radius : The radius of the particles.</li> </ul>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#returns_1","title":"Returns","text":"<ul> <li>partial_pressure_delta : The difference in partial pressure     between the gas and particle phases.</li> </ul>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#signature_6","title":"Signature","text":"<pre><code>def calculate_pressure_delta(\n    self,\n    particle: ParticleRepresentation,\n    gas_species: GasSpecies,\n    temperature: float,\n    radius: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#see-also_4","title":"See also","text":"<ul> <li>GasSpecies</li> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#condensationstrategyfirst_order_mass_transport","title":"CondensationStrategy().first_order_mass_transport","text":"<p>Show source in condensation_strategies.py:159</p> <p>First-order mass transport coefficient per particle.</p> <p>Calculate the first-order mass transport coefficient, K, for a given particle based on the diffusion coefficient, radius, and vapor transition correction factor.</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#arguments_3","title":"Arguments","text":"<ul> <li>radius : The radius of the particle [m].</li> <li>temperature : The temperature at which the first-order mass     transport coefficient is to be calculated.</li> <li>pressure : The pressure of the gas phase.</li> <li>dynamic_viscosity : The dynamic viscosity of the gas [Pa*s]. If     not provided, it will be calculated based on the temperature</li> </ul>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#returns_2","title":"Returns","text":"<p>The first-order mass transport coefficient per particle (m^3/s).</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#references","title":"References","text":"<ul> <li>Aerosol Modeling, Chapter 2, Equation 2.49 (excluding particle     number)</li> </ul>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#signature_7","title":"Signature","text":"<pre><code>def first_order_mass_transport(\n    self,\n    radius: Union[float, NDArray[np.float64]],\n    temperature: float,\n    pressure: float,\n    dynamic_viscosity: Optional[float] = None,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#condensationstrategyknudsen_number","title":"CondensationStrategy().knudsen_number","text":"<p>Show source in condensation_strategies.py:124</p> <p>The Knudsen number for a particle.</p> <p>Calculate the Knudsen number based on the mean free path of the gas molecules and the radius of the particle.</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#arguments_4","title":"Arguments","text":"<ul> <li>radius : The radius of the particle [m].</li> <li>temperature : The temperature of the gas [K].</li> <li>pressure : The pressure of the gas [Pa].</li> <li>dynamic_viscosity : The dynamic viscosity of the gas [Pa*s]. If     not provided, it will be calculated based on the temperature</li> </ul>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#returns_3","title":"Returns","text":"<p>The Knudsen number, which is the ratio of the mean free path to     the particle radius.</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#references_1","title":"References","text":"<p>Knudsen Number</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#signature_8","title":"Signature","text":"<pre><code>def knudsen_number(\n    self,\n    radius: Union[float, NDArray[np.float64]],\n    temperature: float,\n    pressure: float,\n    dynamic_viscosity: Optional[float] = None,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#condensationstrategymass_transfer_rate","title":"CondensationStrategy().mass_transfer_rate","text":"<p>Show source in condensation_strategies.py:274</p> <p>Mass transfer rate for a particle.</p> <p>Calculate the mass transfer rate based on the difference in partial pressure and the first-order mass transport coefficient.</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#arguments_5","title":"Arguments","text":"<ul> <li>particle : The particle for which the mass transfer rate is to be     calculated.</li> <li>gas_species : The gas species with which the particle is in     contact.</li> <li>temperature : The temperature at which the mass transfer rate     is to be calculated.</li> <li>pressure : The pressure of the gas phase.</li> <li>dynamic_viscosity : The dynamic viscosity of the gas [Pa*s]. If     not provided, it will be calculated based on the temperature</li> </ul>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#returns_4","title":"Returns","text":"<p>The mass transfer rate for the particle [kg/s].</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#signature_9","title":"Signature","text":"<pre><code>@abstractmethod\ndef mass_transfer_rate(\n    self,\n    particle: ParticleRepresentation,\n    gas_species: GasSpecies,\n    temperature: float,\n    pressure: float,\n    dynamic_viscosity: Optional[float] = None,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#see-also_5","title":"See also","text":"<ul> <li>GasSpecies</li> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#condensationstrategymean_free_path","title":"CondensationStrategy().mean_free_path","text":"<p>Show source in condensation_strategies.py:94</p> <p>Calculate the mean free path of the gas molecules based on the temperature, pressure, and dynamic viscosity of the gas.</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#arguments_6","title":"Arguments","text":"<ul> <li>temperature : The temperature of the gas [K].</li> <li>pressure : The pressure of the gas [Pa].</li> <li>dynamic_viscosity : The dynamic viscosity of the gas [Pa*s]. If     not provided, it will be calculated based on the temperature</li> </ul>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#returns_5","title":"Returns","text":"<p>The mean free path of the gas molecules in meters (m).</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#references_2","title":"References","text":"<p>Mean Free Path Wikipedia</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#signature_10","title":"Signature","text":"<pre><code>def mean_free_path(\n    self, temperature: float, pressure: float, dynamic_viscosity: Optional[float] = None\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#condensationstrategyrate","title":"CondensationStrategy().rate","text":"<p>Show source in condensation_strategies.py:304</p> <p>Calculate the rate of mass condensation for each particle due to each condensable gas species.</p> <p>The rate of condensation is determined based on the mass transfer rate, which is a function of particle properties, gas species properties, temperature, and pressure. This rate is then scaled by the concentration of particles in the system to get the overall condensation rate for each particle or bin.</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#arguments_7","title":"Arguments","text":"<ul> <li>particle : Representation of the particles, including properties     such as size, concentration, and mass.</li> <li>gas_species : The species of gas condensing onto the particles.</li> <li>temperature : The temperature of the system in Kelvin.</li> <li>pressure : The pressure of the system in Pascals.</li> </ul>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#returns_6","title":"Returns","text":"<p>An array of condensation rates for each particle, scaled by     particle concentration.</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#signature_11","title":"Signature","text":"<pre><code>@abstractmethod\ndef rate(\n    self,\n    particle: ParticleRepresentation,\n    gas_species: GasSpecies,\n    temperature: float,\n    pressure: float,\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#see-also_6","title":"See also","text":"<ul> <li>GasSpecies</li> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#condensationstrategystep","title":"CondensationStrategy().step","text":"<p>Show source in condensation_strategies.py:335</p> <p>Execute the condensation process for a given time step.</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#arguments_8","title":"Arguments","text":"<ul> <li>particle : The particle to modify.</li> <li>gas_species : The gas species to condense onto the     particle.</li> <li>temperature : The temperature of the system in Kelvin.</li> <li>pressure : The pressure of the system in Pascals.</li> <li>time_step : The time step for the process in seconds.</li> </ul>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#returns_7","title":"Returns","text":"<p>The modified particle instance and the modified gas species     instance.</p>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#signature_12","title":"Signature","text":"<pre><code>@abstractmethod\ndef step(\n    self,\n    particle: ParticleRepresentation,\n    gas_species: GasSpecies,\n    temperature: float,\n    pressure: float,\n    time_step: float,\n) -&gt; Tuple[ParticleRepresentation, GasSpecies]: ...\n</code></pre>"},{"location":"API/particula/dynamics/condensation/condensation_strategies/#see-also_7","title":"See also","text":"<ul> <li>GasSpecies</li> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/dynamics/condensation/mass_transfer/","title":"Mass Transfer","text":"<p>Particula Index / Particula / Dynamics / Condensation / Mass Transfer</p> <p>Auto-generated documentation for particula.dynamics.condensation.mass_transfer module.</p>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#calculate_mass_transfer","title":"calculate_mass_transfer","text":"<p>Show source in mass_transfer.py:224</p> <p>Route mass transfer calculation to single or multiple-species routines.</p> <p>Depending on whether gas_mass represents one or multiple species, this function calls either calculate_mass_transfer_single_species or calculate_mass_transfer_multiple_species. The primary calculation involves:</p> <ul> <li>mass_to_change = mass_rate \u00d7 time_step \u00d7 particle_concentration</li> </ul>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#arguments","title":"Arguments","text":"<ul> <li>mass_rate : The rate of mass transfer per particle [kg/s].</li> <li>time_step : The time step for the mass transfer calculation [s].</li> <li>gas_mass : The available mass of gas species [kg].</li> <li>particle_mass : The mass of each particle [kg].</li> <li>particle_concentration : The concentration of particles [#/m\u00b3].</li> </ul>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#returns","title":"Returns","text":"<ul> <li>The mass transferred (array with the same shape as particle_mass).</li> </ul>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#examples","title":"Examples","text":"Single species input<pre><code>calculate_mass_transfer(\n    mass_rate=np.array([0.1, 0.5]),\n    time_step=10,\n    gas_mass=np.array([0.5]),\n    particle_mass=np.array([1.0, 50]),\n    particle_concentration=np.array([1, 0.5])\n)\n</code></pre> Multiple species input<pre><code>calculate_mass_transfer(\n    mass_rate=np.array([[0.1, 0.05, 0.03], [0.2, 0.15, 0.07]]),\n    time_step=10,\n    gas_mass=np.array([1.0, 0.8, 0.5]),\n    particle_mass=np.array([[1.0, 0.9, 0.8], [1.2, 1.0, 0.7]]),\n    particle_concentration=np.array([5, 4])\n)\n</code></pre>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#signature","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"mass_rate\": \"finite\",\n        \"time_step\": \"positive\",\n        \"gas_mass\": \"nonnegative\",\n        \"particle_mass\": \"nonnegative\",\n        \"particle_concentration\": \"nonnegative\",\n    }\n)\ndef calculate_mass_transfer(\n    mass_rate: NDArray[np.float64],\n    time_step: float,\n    gas_mass: NDArray[np.float64],\n    particle_mass: NDArray[np.float64],\n    particle_concentration: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#calculate_mass_transfer_multiple_species","title":"calculate_mass_transfer_multiple_species","text":"<p>Show source in mass_transfer.py:373</p> <p>Calculate mass transfer for multiple gas species.</p> <p>Here, gas_mass has multiple elements (each species). For each species, this function calculates mass_to_change for all particle bins:</p> <ul> <li>mass_to_change = mass_rate \u00d7 time_step \u00d7 particle_concentration</li> </ul> <p>Then it limits or scales that mass based on available gas mass and particle mass in each species bin.</p>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#arguments_1","title":"Arguments","text":"<ul> <li>mass_rate : The mass transfer rate per particle for each gas     species [kg/s].</li> <li>time_step : The time step [s].</li> <li>gas_mass : The available mass of each gas species [kg].</li> <li>particle_mass : The mass of each particle for each gas species [kg].</li> <li>particle_concentration : The concentration of particles [#/m\u00b3].</li> </ul>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#returns_1","title":"Returns","text":"<ul> <li>The mass transferred for multiple gas species, matching the shape   of (particle_mass).</li> </ul>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#examples_1","title":"Examples","text":"Multiple species input<pre><code>calculate_mass_transfer_multiple_species(\n    mass_rate=np.array([[0.1, 0.05, 0.03], [0.2, 0.15, 0.07]]),\n    time_step=10,\n    gas_mass=np.array([1.0, 0.8, 0.5]),\n    particle_mass=np.array([[1.0, 0.9, 0.8], [1.2, 1.0, 0.7]]),\n    particle_concentration=np.array([5, 4])\n)\n# Output: array([...])\n</code></pre>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#signature_1","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"mass_rate\": \"finite\",\n        \"time_step\": \"positive\",\n        \"gas_mass\": \"nonnegative\",\n        \"particle_mass\": \"nonnegative\",\n        \"particle_concentration\": \"nonnegative\",\n    }\n)\ndef calculate_mass_transfer_multiple_species(\n    mass_rate: NDArray[np.float64],\n    time_step: float,\n    gas_mass: NDArray[np.float64],\n    particle_mass: NDArray[np.float64],\n    particle_concentration: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#calculate_mass_transfer_single_species","title":"calculate_mass_transfer_single_species","text":"<p>Show source in mass_transfer.py:299</p> <p>Calculate mass transfer for a single gas species.</p> <p>This function assumes gas_mass has a size of 1 (single species). It first computes the total mass_to_change per particle:</p> <ul> <li>mass_to_change = mass_rate \u00d7 time_step \u00d7 particle_concentration</li> </ul> <p>Then it scales or limits that mass based on available gas mass and particle mass.</p>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#arguments_2","title":"Arguments","text":"<ul> <li>mass_rate : Mass transfer rate per particle [kg/s].</li> <li>time_step : The time step [s].</li> <li>gas_mass : Total available mass of the gas species [kg].</li> <li>particle_mass : The mass of each particle [kg].</li> <li>particle_concentration : Particle concentration [#/m\u00b3].</li> </ul>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#returns_2","title":"Returns","text":"<ul> <li>The amount of mass transferred for the single gas species, shaped   like particle_mass.</li> </ul>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#examples_2","title":"Examples","text":"Single species input<pre><code>calculate_mass_transfer_single_species(\n    mass_rate=np.array([0.1, 0.5]),\n    time_step=10,\n    gas_mass=np.array([0.5]),\n    particle_mass=np.array([1.0, 50]),\n    particle_concentration=np.array([1, 0.5])\n)\n# Output: array([...])\n</code></pre>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#signature_2","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"mass_rate\": \"finite\",\n        \"time_step\": \"positive\",\n        \"gas_mass\": \"nonnegative\",\n        \"particle_mass\": \"nonnegative\",\n        \"particle_concentration\": \"nonnegative\",\n    }\n)\ndef calculate_mass_transfer_single_species(\n    mass_rate: NDArray[np.float64],\n    time_step: float,\n    gas_mass: NDArray[np.float64],\n    particle_mass: NDArray[np.float64],\n    particle_concentration: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#first_order_mass_transport_k","title":"first_order_mass_transport_k","text":"<p>Show source in mass_transfer.py:35</p> <p>Calculate the first-order mass transport coefficient per particle.</p> <p>This function computes the coefficient K that governs how fast mass is transported to or from a particle in a vapor. The equation is:</p> <ul> <li>K = 4\u03c0 \u00d7 radius \u00d7 D \u00d7 X<ul> <li>K : Mass transport coefficient [m\u00b3/s].</li> <li>radius : Particle radius [m].</li> <li>D : Diffusion coefficient of the vapor [m\u00b2/s].</li> <li>X : Vapor transition correction factor [unitless].</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#arguments_3","title":"Arguments","text":"<ul> <li>radius : The radius of the particle [m].</li> <li>vapor_transition : The vapor transition correction factor [unitless].</li> <li>diffusion_coefficient : The diffusion coefficient of the vapor [m\u00b2/s].   Defaults to 2e-5 (approx. air).</li> </ul>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#returns_3","title":"Returns","text":"<ul> <li>The first-order mass transport coefficient per particle [m\u00b3/s].</li> </ul>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#examples_3","title":"Examples","text":"Float input<pre><code>first_order_mass_transport_k(\n    radius=1e-6,\n    vapor_transition=0.6,\n    diffusion_coefficient=2e-9\n)\n# Output: 1.5079644737231005e-14\n</code></pre> Array input<pre><code>first_order_mass_transport_k(\n    radius=np.array([1e-6, 2e-6]),\n    vapor_transition=np.array([0.6, 0.6]),\n    diffusion_coefficient=2e-9\n)\n# Output: array([1.50796447e-14, 6.03185789e-14])\n</code></pre>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#references","title":"References","text":"<ul> <li>Aerosol Modeling: Chapter 2, Equation 2.49</li> <li>Wikipedia contributors, \"Mass diffusivity,\"   https://en.wikipedia.org/wiki/Mass_diffusivity</li> </ul>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#signature_3","title":"Signature","text":"<pre><code>@validate_inputs({\"radius\": \"nonnegative\"})\ndef first_order_mass_transport_k(\n    radius: Union[float, NDArray[np.float64]],\n    vapor_transition: Union[float, NDArray[np.float64]],\n    diffusion_coefficient: Union[float, NDArray[np.float64]] = 2e-05,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#mass_transfer_rate","title":"mass_transfer_rate","text":"<p>Show source in mass_transfer.py:99</p> <p>Calculate the mass transfer rate for a particle.</p> <p>This function calculates the mass transfer rate dm/dt, leveraging the difference in partial pressure (pressure_delta) and the first-order mass transport coefficient (K). The equation is:</p> <ul> <li>dm/dt = (K \u00d7 \u0394p \u00d7 M) / (R \u00d7 T)<ul> <li>dm/dt : Mass transfer rate [kg/s].</li> <li>K : First-order mass transport coefficient [m\u00b3/s].</li> <li>\u0394p : Partial pressure difference [Pa].</li> <li>M : Molar mass [kg/mol].</li> <li>R : Universal gas constant [J/(mol\u00b7K)].</li> <li>T : Temperature [K].</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#arguments_4","title":"Arguments","text":"<ul> <li>pressure_delta : The difference in partial pressure [Pa].</li> <li>first_order_mass_transport : The mass transport coefficient [m\u00b3/s].</li> <li>temperature : The temperature [K].</li> <li>molar_mass : The molar mass [kg/mol].</li> </ul>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#returns_4","title":"Returns","text":"<ul> <li>The mass transfer rate [kg/s].</li> </ul>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#examples_4","title":"Examples","text":"Single value input<pre><code>mass_transfer_rate(\n    pressure_delta=10.0,\n    first_order_mass_transport=1e-17,\n    temperature=300.0,\n    molar_mass=0.02897\n)\n# Output: 1.16143004e-21\n</code></pre> Array input<pre><code>mass_transfer_rate(\n    pressure_delta=np.array([10.0, 15.0]),\n    first_order_mass_transport=np.array([1e-17, 2e-17]),\n    temperature=300.0,\n    molar_mass=0.02897\n)\n# Output: array([1.16143004e-21, 3.48429013e-21])\n</code></pre>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#references_1","title":"References","text":"<ul> <li>Aerosol Modeling: Chapter 2, Equation 2.41</li> <li>Seinfeld and Pandis, \"Atmospheric Chemistry and Physics,\"     Equation 13.3</li> </ul>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#signature_4","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"pressure_delta\": \"finite\",\n        \"first_order_mass_transport\": \"finite\",\n        \"temperature\": \"positive\",\n        \"molar_mass\": \"positive\",\n    }\n)\ndef mass_transfer_rate(\n    pressure_delta: Union[float, NDArray[np.float64]],\n    first_order_mass_transport: Union[float, NDArray[np.float64]],\n    temperature: Union[float, NDArray[np.float64]],\n    molar_mass: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#radius_transfer_rate","title":"radius_transfer_rate","text":"<p>Show source in mass_transfer.py:172</p> <p>Convert mass rate to radius growth/evaporation rate.</p> <p>This function converts the mass transfer rate (dm/dt) into a radius change rate (dr/dt). The equation is:</p> <ul> <li>dr/dt = (1 / 4\u03c0r\u00b2\u03c1) \u00d7 dm/dt<ul> <li>dr/dt : Radius change rate [m/s].</li> <li>r : Particle radius [m].</li> <li>\u03c1 : Particle density [kg/m\u00b3].</li> <li>dm/dt : Mass change rate [kg/s].</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#arguments_5","title":"Arguments","text":"<ul> <li>mass_rate : The mass transfer rate [kg/s].</li> <li>radius : The radius of the particle [m].</li> <li>density : The density of the particle [kg/m\u00b3].</li> </ul>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#returns_5","title":"Returns","text":"<ul> <li>The radius growth (or evaporation) rate [m/s].</li> </ul>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#examples_5","title":"Examples","text":"Single value input<pre><code>radius_transfer_rate(\n    mass_rate=1e-21,\n    radius=1e-6,\n    density=1000\n)\n# Output: 7.95774715e-14\n</code></pre> Array input<pre><code>radius_transfer_rate(\n    mass_rate=np.array([1e-21, 2e-21]),\n    radius=np.array([1e-6, 2e-6]),\n    density=1000\n)\n# Output: array([7.95774715e-14, 1.98943679e-14])\n</code></pre>"},{"location":"API/particula/dynamics/condensation/mass_transfer/#signature_5","title":"Signature","text":"<pre><code>@validate_inputs({\"mass_rate\": \"finite\", \"radius\": \"nonnegative\", \"density\": \"positive\"})\ndef radius_transfer_rate(\n    mass_rate: Union[float, NDArray[np.float64]],\n    radius: Union[float, NDArray[np.float64]],\n    density: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/properties/","title":"Properties","text":"<p>Particula Index / Particula / Dynamics / Properties</p> <p>Auto-generated documentation for particula.dynamics.properties module.</p>"},{"location":"API/particula/dynamics/properties/#modules","title":"Modules","text":"<ul> <li>Wall Loss Coefficient</li> </ul>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/","title":"Wall Loss Coefficient","text":"<p>Particula Index / Particula / Dynamics / Properties / Wall Loss Coefficient</p> <p>Auto-generated documentation for particula.dynamics.properties.wall_loss_coefficient module.</p>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#get_rectangle_wall_loss_coefficient","title":"get_rectangle_wall_loss_coefficient","text":"<p>Show source in wall_loss_coefficient.py:101</p> <p>Calculate the particle wall loss coefficient in a rectangular chamber.</p> <p>This function computes the wall loss coefficient (\u03b2\u2080) for a rectangular chamber of length (L), width (W), and height (H). It uses the wall eddy diffusivity, particle diffusion coefficient, particle settling velocity, and chamber dimensions:</p> <ul> <li>\u03b2\u2080 ~ (some function of wall_eddy_diffusivity, diffusion_coefficient, settling_velocity, and L\u00d7W\u00d7H)</li> </ul>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#arguments","title":"Arguments","text":"<ul> <li>wall_eddy_diffusivity : Wall eddy diffusivity in s\u207b\u00b9.</li> <li>diffusion_coefficient : Particle diffusion coefficient in m\u00b2/s.</li> <li>settling_velocity : Particle settling velocity in m/s.</li> <li>chamber_dimensions : A tuple (length, width, height) in m.</li> </ul>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#returns","title":"Returns","text":"<ul> <li>The wall loss coefficient \u03b2\u2080 (float or NDArray[np.float64]), in s\u207b\u00b9.</li> </ul>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#examples","title":"Examples","text":"Example (float inputs)<pre><code>from particula.dynamics.properties.wall_loss_coefficient import (\n    get_rectangle_wall_loss_coefficient\n)\n\nbeta_0 = get_rectangle_wall_loss_coefficient(\n    wall_eddy_diffusivity=1e-3,\n    diffusion_coefficient=1e-5,\n    settling_velocity=2e-4,\n    chamber_dimensions=(1.0, 0.5, 0.5)\n)\nprint(beta_0)\n# Example output: 0.0009\n</code></pre>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#references","title":"References","text":"<ul> <li>Crump, J. G., &amp; Seinfeld, J. H. (1981). TURBULENT DEPOSITION AND   GRAVITATIONAL SEDIMENTATION OF AN AEROSOL IN A VESSEL OF ARBITRARY   SHAPE. J Aerosol Sci, 12(5).   https://doi.org/10.1016/0021-8502(81)90036-7</li> </ul>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#signature","title":"Signature","text":"<pre><code>def get_rectangle_wall_loss_coefficient(\n    wall_eddy_diffusivity: Union[float, NDArray[np.float64]],\n    diffusion_coefficient: Union[float, NDArray[np.float64]],\n    settling_velocity: Union[float, NDArray[np.float64]],\n    chamber_dimensions: Tuple[float, float, float],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#get_rectangle_wall_loss_coefficient_via_system_state","title":"get_rectangle_wall_loss_coefficient_via_system_state","text":"<p>Show source in wall_loss_coefficient.py:251</p> <p>Calculate the wall loss coefficient for a rectangular chamber based on the system state.</p> <p>This function computes the wall loss coefficient for a rectangular chamber using the system's physical state, including the wall eddy diffusivity, particle properties (radius, density), and environmental conditions (temperature, pressure). The chamber dimensions (length, width, height) are also considered.</p>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#arguments_1","title":"Arguments","text":"<ul> <li><code>wall_eddy_diffusivity</code> - The rate of wall eddy diffusivity in inverse     seconds (s\u207b\u00b9).</li> <li><code>particle_radius</code> - The radius of the particle in meters (m).</li> <li><code>particle_density</code> - The density of the particle in kilograms per cubic     meter (kg/m\u00b3).</li> <li><code>temperature</code> - The temperature of the system in Kelvin (K).</li> <li><code>pressure</code> - The pressure of the system in Pascals (Pa).</li> <li><code>chamber_dimensions</code> - A tuple containing the length, width, and height     of the rectangular chamber in meters (m).</li> </ul>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#returns_1","title":"Returns","text":"<p>The calculated wall loss coefficient for the rectangular chamber.</p>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#references_1","title":"References","text":"<ul> <li>Crump, J. G., &amp; Seinfeld, J. H. (1981). TURBULENT DEPOSITION AND     GRAVITATIONAL SEDIMENTATION OF AN AEROSOL IN A VESSEL OF ARBITRARY     SHAPE. In J Aerosol Sct (Vol. 12, Issue 5).     https://doi.org/10.1016/0021-8502(81)90036-7</li> </ul>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#signature_1","title":"Signature","text":"<pre><code>def get_rectangle_wall_loss_coefficient_via_system_state(\n    wall_eddy_diffusivity: float,\n    particle_radius: Union[float, NDArray[np.float64]],\n    particle_density: Union[float, NDArray[np.float64]],\n    temperature: float,\n    pressure: float,\n    chamber_dimensions: Tuple[float, float, float],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#get_spherical_wall_loss_coefficient","title":"get_spherical_wall_loss_coefficient","text":"<p>Show source in wall_loss_coefficient.py:35</p> <p>Calculate the particle wall loss coefficient in a spherical chamber.</p> <p>This function computes the wall loss coefficient based on a spherical chamber approximation. It uses the wall eddy diffusivity, particle diffusion coefficient, particle settling velocity, and chamber radius. The calculation is:</p> <ul> <li>k = 6 \u00d7 \u221a(D\u2091 \u00d7 D) / (\u03c0 \u00d7 R) \u00d7 f + v\u209b \u00d7 (3 / (4 \u00d7 R))<ul> <li>k is the wall loss coefficient [s\u207b\u00b9],</li> <li>D\u2091 is the wall eddy diffusivity [m\u00b2/s or effective rate],</li> <li>D is the particle diffusion coefficient [m\u00b2/s],</li> <li>f is the Debye function evaluation (unitless),</li> <li>v\u209b is the settling velocity [m/s],</li> <li>R is the chamber radius [m].</li> </ul> </li> </ul>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#arguments_2","title":"Arguments","text":"<ul> <li>wall_eddy_diffusivity : The wall eddy diffusivity (or rate) in s\u207b\u00b9.</li> <li>diffusion_coefficient : The diffusion coefficient of the particle     in m\u00b2/s.</li> <li>settling_velocity : The particle settling velocity in m/s.</li> <li>chamber_radius : The spherical chamber radius in m.</li> </ul>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#returns_2","title":"Returns","text":"<ul> <li>The wall loss coefficient k, in inverse seconds    (float or NDArray[np.float64]).</li> </ul>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#examples_1","title":"Examples","text":"Example (float inputs)<pre><code>from particula.dynamics.properties.wall_loss_coefficient import (\n    get_spherical_wall_loss_coefficient\n)\n\nk_value = get_spherical_wall_loss_coefficient(\n    wall_eddy_diffusivity=1e-2,\n    diffusion_coefficient=5e-6,\n    settling_velocity=1e-4,\n    chamber_radius=0.5\n)\nprint(k_value)\n# Example output: 0.0012\n</code></pre>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#references_2","title":"References","text":"<ul> <li>Crump, J. G., Flagan, R. C., &amp; Seinfeld, J. H. (1982). Particle wall   loss rates in vessels. Aerosol Science and Technology, 2(3), 303-309.   https://doi.org/10.1080/02786828308958636</li> </ul>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#signature_2","title":"Signature","text":"<pre><code>def get_spherical_wall_loss_coefficient(\n    wall_eddy_diffusivity: Union[float, NDArray[np.float64]],\n    diffusion_coefficient: Union[float, NDArray[np.float64]],\n    settling_velocity: Union[float, NDArray[np.float64]],\n    chamber_radius: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#get_spherical_wall_loss_coefficient_via_system_state","title":"get_spherical_wall_loss_coefficient_via_system_state","text":"<p>Show source in wall_loss_coefficient.py:169</p> <p>Calculate the spherical chamber wall loss coefficient via system state.</p> <p>This version uses the system's physical conditions (particle radius, density, temperature, pressure) to compute the needed diffusion and settling velocity before calculating the spherical wall loss coefficient:</p> <ul> <li>k = f(     wall_eddy_diffusivity,     diffusion_coefficient_via_system_state,     settling_velocity_via_system_state,     chamber_radius )</li> </ul>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#arguments_3","title":"Arguments","text":"<ul> <li>wall_eddy_diffusivity : Wall eddy diffusivity in s\u207b\u00b9.</li> <li>particle_radius : Particle radius in m.</li> <li>particle_density : Particle density in kg/m\u00b3.</li> <li>temperature : System temperature in K.</li> <li>pressure : System pressure in Pa.</li> <li>chamber_radius : Chamber radius in m.</li> </ul>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#returns_3","title":"Returns","text":"<ul> <li>The computed wall loss coefficient k (float or NDArray[np.float64])     in s\u207b\u00b9.</li> </ul>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#examples_2","title":"Examples","text":"Example<pre><code>from particula.dynamics.properties.wall_loss_coefficient import (\n    get_spherical_wall_loss_coefficient_via_system_state\n)\n\nk_value = get_spherical_wall_loss_coefficient_via_system_state(\n    wall_eddy_diffusivity=1e-2,\n    particle_radius=1e-7,\n    particle_density=1000,\n    temperature=298,\n    pressure=101325,\n    chamber_radius=0.5\n)\nprint(k_value)\n# Example output: 0.0018\n</code></pre>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#references_3","title":"References","text":"<ul> <li>Crump, J. G., Flagan, R. C., &amp; Seinfeld, J. H. (1982). Particle wall   loss rates in vessels. Aerosol Science and Technology, 2(3), 303-309.   https://doi.org/10.1080/02786828308958636</li> </ul>"},{"location":"API/particula/dynamics/properties/wall_loss_coefficient/#signature_3","title":"Signature","text":"<pre><code>def get_spherical_wall_loss_coefficient_via_system_state(\n    wall_eddy_diffusivity: float,\n    particle_radius: Union[float, NDArray[np.float64]],\n    particle_density: Union[float, NDArray[np.float64]],\n    temperature: float,\n    pressure: float,\n    chamber_radius: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/equilibria/","title":"Equilibria","text":"<p>Particula Index / Particula / Equilibria</p> <p>Auto-generated documentation for particula.equilibria module.</p>"},{"location":"API/particula/equilibria/#modules","title":"Modules","text":"<ul> <li>Partitioning</li> </ul>"},{"location":"API/particula/equilibria/partitioning/","title":"Partitioning","text":"<p>Particula Index / Particula / Equilibria / Partitioning</p> <p>Auto-generated documentation for particula.equilibria.partitioning module.</p>"},{"location":"API/particula/equilibria/partitioning/#get_properties_for_liquid_vapor_partitioning","title":"get_properties_for_liquid_vapor_partitioning","text":"<p>Show source in partitioning.py:212</p> <p>Get properties for liquid-vapor partitioning.</p>"},{"location":"API/particula/equilibria/partitioning/#signature","title":"Signature","text":"<pre><code>def get_properties_for_liquid_vapor_partitioning(\n    water_activity_desired, molar_mass, oxygen2carbon, density\n): ...\n</code></pre>"},{"location":"API/particula/equilibria/partitioning/#liquid_vapor_obj_function","title":"liquid_vapor_obj_function","text":"<p>Show source in partitioning.py:9</p> <p>Objective function for liquid-vapor partitioning.</p>"},{"location":"API/particula/equilibria/partitioning/#signature_1","title":"Signature","text":"<pre><code>def liquid_vapor_obj_function(\n    e_j_partition_guess,\n    c_star_j_dry,\n    concentration_organic_matter,\n    gamma_organic_ab,\n    mass_fraction_water_ab,\n    q_ab,\n    molar_mass,\n    error_only=True,\n): ...\n</code></pre>"},{"location":"API/particula/equilibria/partitioning/#liquid_vapor_partitioning","title":"liquid_vapor_partitioning","text":"<p>Show source in partitioning.py:158</p> <p>Thermodynamic equilibrium between liquid and vapor phase. with activity coefficients,</p>"},{"location":"API/particula/equilibria/partitioning/#signature_2","title":"Signature","text":"<pre><code>def liquid_vapor_partitioning(\n    c_star_j_dry,\n    concentration_organic_matter,\n    molar_mass,\n    gamma_organic_ab,\n    mass_fraction_water_ab,\n    q_ab,\n    partition_coefficient_guess=None,\n): ...\n</code></pre>"},{"location":"API/particula/gas/","title":"Gas","text":"<p>Particula Index / Particula / Gas</p> <p>Auto-generated documentation for particula.gas module.</p>"},{"location":"API/particula/gas/#modules","title":"Modules","text":"<ul> <li>Atmosphere</li> <li>Atmosphere Builders</li> <li>Properties</li> <li>Species</li> <li>Species Builders</li> <li>Species Factories</li> <li>Vapor Pressure Builders</li> <li>Vapor Pressure Factories</li> <li>Vapor Pressure Strategies</li> </ul>"},{"location":"API/particula/gas/atmosphere/","title":"Atmosphere","text":"<p>Particula Index / Particula / Gas / Atmosphere</p> <p>Auto-generated documentation for particula.gas.atmosphere module.</p>"},{"location":"API/particula/gas/atmosphere/#atmosphere_1","title":"Atmosphere","text":"<p>Show source in atmosphere.py:8</p> <p>Represents a mixture of gas species under specific conditions.</p> <p>This class represents the atmospheric environment by detailing properties such as temperature and pressure, alongside a dynamic list of gas species present.</p>"},{"location":"API/particula/gas/atmosphere/#attributes","title":"Attributes","text":"<ul> <li><code>temperature</code> - Temperature of the gas mixture in Kelvin.</li> <li><code>total_pressure</code> - Total atmospheric pressure of the mixture inPascals.</li> <li><code>species</code> - List of GasSpecies objects representing the     various species within the gas mixture.</li> </ul>"},{"location":"API/particula/gas/atmosphere/#methods","title":"Methods","text":"<ul> <li><code>add_species(self,</code> species - GasSpecies) -&gt; None:     Adds a GasSpecies object to the mixture.</li> <li><code>remove_species(self,</code> index - int) -&gt; None:     Removes a GasSpecies object from the mixture based on its index.</li> </ul>"},{"location":"API/particula/gas/atmosphere/#signature","title":"Signature","text":"<pre><code>class Atmosphere: ...\n</code></pre>"},{"location":"API/particula/gas/atmosphere/#atmospheregetitem","title":"Atmosphere().getitem","text":"<p>Show source in atmosphere.py:64</p> <p>Retrieves a gas species by index.</p>"},{"location":"API/particula/gas/atmosphere/#arguments","title":"Arguments","text":"<ul> <li><code>index</code> - The index of the gas species to retrieve.</li> </ul>"},{"location":"API/particula/gas/atmosphere/#returns","title":"Returns","text":"<ul> <li><code>GasSpecies</code> - The gas species at the specified index.</li> </ul>"},{"location":"API/particula/gas/atmosphere/#signature_1","title":"Signature","text":"<pre><code>def __getitem__(self, index: int) -&gt; GasSpecies: ...\n</code></pre>"},{"location":"API/particula/gas/atmosphere/#see-also","title":"See also","text":"<ul> <li>GasSpecies</li> </ul>"},{"location":"API/particula/gas/atmosphere/#atmosphereiter","title":"Atmosphere().iter","text":"<p>Show source in atmosphere.py:55</p> <p>Allows iteration over the species in the gas mixture.</p>"},{"location":"API/particula/gas/atmosphere/#returns_1","title":"Returns","text":"<ul> <li><code>Iterator[GasSpecies]</code> - An iterator over the gas species objects.</li> </ul>"},{"location":"API/particula/gas/atmosphere/#signature_2","title":"Signature","text":"<pre><code>def __iter__(self): ...\n</code></pre>"},{"location":"API/particula/gas/atmosphere/#atmospherelen","title":"Atmosphere().len","text":"<p>Show source in atmosphere.py:75</p> <p>Returns the number of species in the gas mixture.</p>"},{"location":"API/particula/gas/atmosphere/#returns_2","title":"Returns","text":"<ul> <li><code>int</code> - The number of gas species in the mixture.</li> </ul>"},{"location":"API/particula/gas/atmosphere/#signature_3","title":"Signature","text":"<pre><code>def __len__(self) -&gt; int: ...\n</code></pre>"},{"location":"API/particula/gas/atmosphere/#atmospherestr","title":"Atmosphere().str","text":"<p>Show source in atmosphere.py:83</p> <p>Provides a string representation of the Atmosphere object.</p>"},{"location":"API/particula/gas/atmosphere/#returns_3","title":"Returns","text":"<ul> <li><code>str</code> - A string that includes the temperature, pressure, and a     list of species in the mixture.</li> </ul>"},{"location":"API/particula/gas/atmosphere/#signature_4","title":"Signature","text":"<pre><code>def __str__(self) -&gt; str: ...\n</code></pre>"},{"location":"API/particula/gas/atmosphere/#atmosphereadd_species","title":"Atmosphere().add_species","text":"<p>Show source in atmosphere.py:32</p> <p>Adds a GasSpecies object to the mixture.</p>"},{"location":"API/particula/gas/atmosphere/#arguments_1","title":"Arguments","text":"<ul> <li><code>gas_species</code> - The gas species to be added.</li> </ul>"},{"location":"API/particula/gas/atmosphere/#signature_5","title":"Signature","text":"<pre><code>def add_species(self, gas_species: GasSpecies) -&gt; None: ...\n</code></pre>"},{"location":"API/particula/gas/atmosphere/#see-also_1","title":"See also","text":"<ul> <li>GasSpecies</li> </ul>"},{"location":"API/particula/gas/atmosphere/#atmosphereremove_species","title":"Atmosphere().remove_species","text":"<p>Show source in atmosphere.py:40</p> <p>Removes a gas species from the mixture by its index.</p>"},{"location":"API/particula/gas/atmosphere/#arguments_2","title":"Arguments","text":"<ul> <li><code>index</code> - Index of the gas species to remove. Must be within             the current range of the list.</li> </ul>"},{"location":"API/particula/gas/atmosphere/#raises","title":"Raises","text":"<ul> <li><code>IndexError</code> - If the provided index is out of bounds.</li> </ul>"},{"location":"API/particula/gas/atmosphere/#signature_6","title":"Signature","text":"<pre><code>def remove_species(self, index: int) -&gt; None: ...\n</code></pre>"},{"location":"API/particula/gas/atmosphere_builders/","title":"Atmosphere Builders","text":"<p>Particula Index / Particula / Gas / Atmosphere Builders</p> <p>Auto-generated documentation for particula.gas.atmosphere_builders module.</p>"},{"location":"API/particula/gas/atmosphere_builders/#atmospherebuilder","title":"AtmosphereBuilder","text":"<p>Show source in atmosphere_builders.py:18</p> <p>Builder class for creating Atmosphere objects using a fluent interface.</p> <p>This class provides methods to configure and build an Atmosphere object, allowing for step-by-step setting of atmospheric properties and species composition.</p>"},{"location":"API/particula/gas/atmosphere_builders/#attributes","title":"Attributes","text":"<ul> <li><code>temperature</code> - Temperature of the gas mixture in Kelvin.</li> <li><code>total_pressure</code> float - Total pressure of the gas mixture in Pascals.</li> <li><code>species</code> list[GasSpecies] - List of GasSpecies objects in the mixture.     Starts empty.</li> </ul>"},{"location":"API/particula/gas/atmosphere_builders/#methods","title":"Methods","text":"<ul> <li><code>set_temperature(temperature,temperature_units)</code> - Sets the temperature.</li> <li><code>set_pressure(pressure,pressure_units)</code> - Sets the total pressure.</li> <li><code>add_species(species)</code> - Adds a GasSpecies object to the gas mixture.</li> <li><code>set_parameters(parameters)</code> - Sets multiple parameters from a dictionary.</li> <li><code>build()</code> - Validates the set parameters and returns an Atmosphere object.</li> </ul>"},{"location":"API/particula/gas/atmosphere_builders/#signature","title":"Signature","text":"<pre><code>class AtmosphereBuilder(BuilderABC, BuilderTemperatureMixin, BuilderPressureMixin):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/gas/atmosphere_builders/#see-also","title":"See also","text":"<ul> <li>BuilderABC</li> <li>BuilderPressureMixin</li> <li>BuilderTemperatureMixin</li> </ul>"},{"location":"API/particula/gas/atmosphere_builders/#atmospherebuilderadd_species","title":"AtmosphereBuilder().add_species","text":"<p>Show source in atmosphere_builders.py:50</p> <p>Adds a GasSpecies object to the gas mixture.</p>"},{"location":"API/particula/gas/atmosphere_builders/#arguments","title":"Arguments","text":"<ul> <li><code>species</code> GasSpecies - The GasSpecies object to be added.</li> </ul>"},{"location":"API/particula/gas/atmosphere_builders/#returns","title":"Returns","text":"<ul> <li>AtmosphereBuilder - Instance of this builder for chaining.</li> </ul>"},{"location":"API/particula/gas/atmosphere_builders/#signature_1","title":"Signature","text":"<pre><code>def add_species(self, species: GasSpecies) -&gt; \"AtmosphereBuilder\": ...\n</code></pre>"},{"location":"API/particula/gas/atmosphere_builders/#see-also_1","title":"See also","text":"<ul> <li>GasSpecies</li> </ul>"},{"location":"API/particula/gas/atmosphere_builders/#atmospherebuilderbuild","title":"AtmosphereBuilder().build","text":"<p>Show source in atmosphere_builders.py:62</p> <p>Validates the configuration and constructs the Atmosphere object.</p> <p>This method checks that all necessary conditions are met for a valid Atmosphere instance(e.g., at least one species must be present) and then initializes the Atmosphere.</p>"},{"location":"API/particula/gas/atmosphere_builders/#returns_1","title":"Returns","text":"<ul> <li><code>Atmosphere</code> - The newly created Atmosphere object, configured as specified.</li> </ul>"},{"location":"API/particula/gas/atmosphere_builders/#raises","title":"Raises","text":"<ul> <li><code>ValueError</code> - If no species have been added to the mixture.</li> </ul>"},{"location":"API/particula/gas/atmosphere_builders/#signature_2","title":"Signature","text":"<pre><code>def build(self) -&gt; Atmosphere: ...\n</code></pre>"},{"location":"API/particula/gas/atmosphere_builders/#see-also_2","title":"See also","text":"<ul> <li>Atmosphere</li> </ul>"},{"location":"API/particula/gas/species/","title":"Species","text":"<p>Particula Index / Particula / Gas / Species</p> <p>Auto-generated documentation for particula.gas.species module.</p>"},{"location":"API/particula/gas/species/#gasspecies","title":"GasSpecies","text":"<p>Show source in species.py:21</p> <p>GasSpecies represents an individual or array of gas species with properties like name, molar mass, vapor pressure, and condensability.</p>"},{"location":"API/particula/gas/species/#attributes","title":"Attributes","text":"<ul> <li>name : The name of the gas species.</li> <li>molar_mass : The molar mass of the gas species.</li> <li>pure_vapor_pressure_strategy : The strategy for calculating the pure     vapor pressure of the gas species. Can be a single strategy or a     list of strategies. Default is a constant vapor pressure strategy     with a vapor pressure of 0.0 Pa.</li> <li>condensable : Indicates whether the gas species is condensable.     Default is True.</li> <li>concentration : The concentration of the gas species in the mixture.     Default is 0.0 kg/m^3.</li> </ul>"},{"location":"API/particula/gas/species/#signature","title":"Signature","text":"<pre><code>class GasSpecies:\n    def __init__(\n        self,\n        name: Union[str, NDArray[np.str_]],\n        molar_mass: Union[float, NDArray[np.float64]],\n        vapor_pressure_strategy: Union[\n            VaporPressureStrategy, list[VaporPressureStrategy]\n        ] = ConstantVaporPressureStrategy(0.0),\n        condensable: Union[bool, NDArray[np.bool_]] = True,\n        concentration: Union[float, NDArray[np.float64]] = 0.0,\n    ) -&gt; None: ...\n</code></pre>"},{"location":"API/particula/gas/species/#see-also","title":"See also","text":"<ul> <li>VaporPressureStrategy</li> </ul>"},{"location":"API/particula/gas/species/#gasspecieslen","title":"GasSpecies().len","text":"<p>Show source in species.py:62</p> <p>Return the number of gas species.</p>"},{"location":"API/particula/gas/species/#signature_1","title":"Signature","text":"<pre><code>def __len__(self): ...\n</code></pre>"},{"location":"API/particula/gas/species/#gasspeciesstr","title":"GasSpecies().str","text":"<p>Show source in species.py:58</p> <p>Return a string representation of the GasSpecies object.</p>"},{"location":"API/particula/gas/species/#signature_2","title":"Signature","text":"<pre><code>def __str__(self): ...\n</code></pre>"},{"location":"API/particula/gas/species/#gasspecies_check_if_negative_concentration","title":"GasSpecies()._check_if_negative_concentration","text":"<p>Show source in species.py:317</p> <p>Log a warning if the concentration is negative.</p>"},{"location":"API/particula/gas/species/#signature_3","title":"Signature","text":"<pre><code>def _check_if_negative_concentration(\n    self, values: Union[float, NDArray[np.float64]]\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/species/#gasspecies_check_non_positive_value","title":"GasSpecies()._check_non_positive_value","text":"<p>Show source in species.py:329</p> <p>Check for non-positive values and raise an error if found.</p>"},{"location":"API/particula/gas/species/#signature_4","title":"Signature","text":"<pre><code>def _check_non_positive_value(\n    self, value: Union[float, NDArray[np.float64]], name: str\n) -&gt; None: ...\n</code></pre>"},{"location":"API/particula/gas/species/#gasspeciesadd_concentration","title":"GasSpecies().add_concentration","text":"<p>Show source in species.py:283</p> <p>Add concentration to the gas species.</p>"},{"location":"API/particula/gas/species/#arguments","title":"Arguments","text":"<ul> <li>added_concentration : The concentration to add to the gas     species.</li> </ul>"},{"location":"API/particula/gas/species/#examples","title":"Examples","text":"Example usage of add_concentration<pre><code>gas_object.add_concentration(added_concentration=1e-10)\n</code></pre>"},{"location":"API/particula/gas/species/#signature_5","title":"Signature","text":"<pre><code>def add_concentration(\n    self, added_concentration: Union[float, NDArray[np.float64]]\n) -&gt; None: ...\n</code></pre>"},{"location":"API/particula/gas/species/#gasspeciesget_concentration","title":"GasSpecies().get_concentration","text":"<p>Show source in species.py:94</p> <p>Get the concentration of the gas species in the mixture, in kg/m^3.</p>"},{"location":"API/particula/gas/species/#returns","title":"Returns","text":"<p>The concentration of the gas species in the mixture.</p>"},{"location":"API/particula/gas/species/#signature_6","title":"Signature","text":"<pre><code>def get_concentration(self) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/species/#gasspeciesget_condensable","title":"GasSpecies().get_condensable","text":"<p>Show source in species.py:86</p> <p>Check if the gas species is condensable or not.</p>"},{"location":"API/particula/gas/species/#returns_1","title":"Returns","text":"<p>True if the gas species is condensable, False otherwise.</p>"},{"location":"API/particula/gas/species/#signature_7","title":"Signature","text":"<pre><code>def get_condensable(self) -&gt; Union[bool, NDArray[np.bool_]]: ...\n</code></pre>"},{"location":"API/particula/gas/species/#gasspeciesget_molar_mass","title":"GasSpecies().get_molar_mass","text":"<p>Show source in species.py:78</p> <p>Get the molar mass of the gas species in kg/mol.</p>"},{"location":"API/particula/gas/species/#returns_2","title":"Returns","text":"<p>The molar mass of the gas species, in kg/mol.</p>"},{"location":"API/particula/gas/species/#signature_8","title":"Signature","text":"<pre><code>def get_molar_mass(self) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/species/#gasspeciesget_name","title":"GasSpecies().get_name","text":"<p>Show source in species.py:70</p> <p>Get the name of the gas species.</p>"},{"location":"API/particula/gas/species/#returns_3","title":"Returns","text":"<p>The name of the gas species.</p>"},{"location":"API/particula/gas/species/#signature_9","title":"Signature","text":"<pre><code>def get_name(self) -&gt; Union[str, NDArray[np.str_]]: ...\n</code></pre>"},{"location":"API/particula/gas/species/#gasspeciesget_partial_pressure","title":"GasSpecies().get_partial_pressure","text":"<p>Show source in species.py:142</p> <p>Calculate the partial pressure of the gas based on the vapor pressure strategy.</p> <p>This method accounts for multiple strategies if assigned and calculates partial pressure for each strategy based on the corresponding concentration and molar mass.</p>"},{"location":"API/particula/gas/species/#arguments_1","title":"Arguments","text":"<ul> <li>temperature : The temperature in Kelvin at which to calculate     the partial pressure.</li> </ul>"},{"location":"API/particula/gas/species/#returns_4","title":"Returns","text":"<p>Partial pressure of the gas in Pascals.</p>"},{"location":"API/particula/gas/species/#raises","title":"Raises","text":"<ul> <li><code>ValueError</code> - If the vapor pressure strategy is not set.</li> </ul>"},{"location":"API/particula/gas/species/#examples_1","title":"Examples","text":"Example usage of get_partial_pressure<pre><code>gas_object.get_partial_pressure(temperature=298)\n</code></pre>"},{"location":"API/particula/gas/species/#signature_10","title":"Signature","text":"<pre><code>def get_partial_pressure(\n    self, temperature: Union[float, NDArray[np.float64]]\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/species/#gasspeciesget_pure_vapor_pressure","title":"GasSpecies().get_pure_vapor_pressure","text":"<p>Show source in species.py:102</p> <p>Calculate the pure vapor pressure of the gas species at a given temperature in Kelvin.</p> <p>This method supports both a single strategy or a list of strategies for calculating vapor pressure.</p>"},{"location":"API/particula/gas/species/#arguments_2","title":"Arguments","text":"<ul> <li>temperature : The temperature in Kelvin at which to calculate     vapor pressure.</li> </ul>"},{"location":"API/particula/gas/species/#returns_5","title":"Returns","text":"<p>The calculated pure vapor pressure in Pascals.</p>"},{"location":"API/particula/gas/species/#raises_1","title":"Raises","text":"<ul> <li><code>ValueError</code> - If no vapor pressure strategy is set.</li> </ul>"},{"location":"API/particula/gas/species/#examples_2","title":"Examples","text":"Example usage of get_pure_vapor_pressure<pre><code>gas_object.get_pure_vapor_pressure(temperature=298)\n</code></pre>"},{"location":"API/particula/gas/species/#signature_11","title":"Signature","text":"<pre><code>def get_pure_vapor_pressure(\n    self, temperature: Union[float, NDArray[np.float64]]\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/species/#gasspeciesget_saturation_concentration","title":"GasSpecies().get_saturation_concentration","text":"<p>Show source in species.py:238</p> <p>Calculate the saturation concentration of the gas based on the vapor pressure strategy.</p> <p>This method accounts for multiple strategies if assigned and calculates saturation concentration for each strategy based on the molar mass.</p>"},{"location":"API/particula/gas/species/#arguments_3","title":"Arguments","text":"<ul> <li>temperature : The temperature in Kelvin at which to calculate     the partial pressure.</li> </ul>"},{"location":"API/particula/gas/species/#returns_6","title":"Returns","text":"<p>The saturation concentration of the gas.</p>"},{"location":"API/particula/gas/species/#raises_2","title":"Raises","text":"<ul> <li><code>ValueError</code> - If the vapor pressure strategy is not set.</li> </ul>"},{"location":"API/particula/gas/species/#examples_3","title":"Examples","text":"Example usage of get_saturation_concentration<pre><code>gas_object.get_saturation_concentration(temperature=298)\n</code></pre>"},{"location":"API/particula/gas/species/#signature_12","title":"Signature","text":"<pre><code>def get_saturation_concentration(\n    self, temperature: Union[float, NDArray[np.float64]]\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/species/#gasspeciesget_saturation_ratio","title":"GasSpecies().get_saturation_ratio","text":"<p>Show source in species.py:190</p> <p>Calculate the saturation ratio of the gas based on the vapor pressure strategy.</p> <p>This method accounts for multiple strategies if assigned and calculates saturation ratio for each strategy based on the corresponding concentration and molar mass.</p>"},{"location":"API/particula/gas/species/#arguments_4","title":"Arguments","text":"<ul> <li>temperature : The temperature in Kelvin at which to calculate     the partial pressure.</li> </ul>"},{"location":"API/particula/gas/species/#returns_7","title":"Returns","text":"<p>The saturation ratio of the gas.</p>"},{"location":"API/particula/gas/species/#raises_3","title":"Raises","text":"<p>ValueError : If the vapor pressure strategy is not set.</p>"},{"location":"API/particula/gas/species/#examples_4","title":"Examples","text":"Example usage of get_saturation_ratio<pre><code>gas_object.get_saturation_ratio(temperature=298)\n</code></pre>"},{"location":"API/particula/gas/species/#signature_13","title":"Signature","text":"<pre><code>def get_saturation_ratio(\n    self, temperature: Union[float, NDArray[np.float64]]\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/species/#gasspeciesset_concentration","title":"GasSpecies().set_concentration","text":"<p>Show source in species.py:299</p> <p>Set the concentration of the gas species.</p>"},{"location":"API/particula/gas/species/#arguments_5","title":"Arguments","text":"<ul> <li>new_concentration : The new concentration of the gas species.</li> </ul>"},{"location":"API/particula/gas/species/#examples_5","title":"Examples","text":"Example usage of set_concentration<pre><code>gas_object.set_concentration(new_concentration=1e-10)\n</code></pre>"},{"location":"API/particula/gas/species/#signature_14","title":"Signature","text":"<pre><code>def set_concentration(\n    self, new_concentration: Union[float, NDArray[np.float64]]\n) -&gt; None: ...\n</code></pre>"},{"location":"API/particula/gas/species_builders/","title":"Species Builders","text":"<p>Particula Index / Particula / Gas / Species Builders</p> <p>Auto-generated documentation for particula.gas.species_builders module.</p>"},{"location":"API/particula/gas/species_builders/#gasspeciesbuilder","title":"GasSpeciesBuilder","text":"<p>Show source in species_builders.py:27</p> <p>Builder class for GasSpecies objects, allowing for a more fluent and readable creation of GasSpecies instances with optional parameters.</p>"},{"location":"API/particula/gas/species_builders/#attributes","title":"Attributes","text":"<ul> <li>name : The name of the gas species.</li> <li>molar_mass : The molar mass of the gas species in kg/mol.</li> <li>vapor_pressure_strategy : The vapor pressure strategy for the     gas species.</li> <li>condensable : Whether the gas species is condensable.</li> <li>concentration : The concentration of the gas species in the     mixture, in kg/m^3.</li> </ul>"},{"location":"API/particula/gas/species_builders/#raises","title":"Raises","text":"<ul> <li>ValueError : If any required key is missing. During check_keys and     pre_build_check. Or if trying to set an invalid parameter.</li> <li>Warning : If using default units for any parameter.</li> </ul>"},{"location":"API/particula/gas/species_builders/#signature","title":"Signature","text":"<pre><code>class GasSpeciesBuilder(BuilderABC, BuilderMolarMassMixin, BuilderConcentrationMixin):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/gas/species_builders/#see-also","title":"See also","text":"<ul> <li>BuilderABC</li> <li>BuilderConcentrationMixin</li> <li>BuilderMolarMassMixin</li> </ul>"},{"location":"API/particula/gas/species_builders/#gasspeciesbuilderbuild","title":"GasSpeciesBuilder().build","text":"<p>Show source in species_builders.py:125</p>"},{"location":"API/particula/gas/species_builders/#signature_1","title":"Signature","text":"<pre><code>def build(self) -&gt; GasSpecies: ...\n</code></pre>"},{"location":"API/particula/gas/species_builders/#see-also_1","title":"See also","text":"<ul> <li>GasSpecies</li> </ul>"},{"location":"API/particula/gas/species_builders/#gasspeciesbuilderset_condensable","title":"GasSpeciesBuilder().set_condensable","text":"<p>Show source in species_builders.py:104</p> <p>Set the condensable bool of the gas species.</p>"},{"location":"API/particula/gas/species_builders/#arguments","title":"Arguments","text":"<p>condensable : Whether the gas species is condensable.</p>"},{"location":"API/particula/gas/species_builders/#returns","title":"Returns","text":"<p>self : The GasSpeciesBuilder object.</p>"},{"location":"API/particula/gas/species_builders/#examples","title":"Examples","text":"Set a single condensable bool<pre><code>builder = GasSpeciesBuilder()\nbuilder.set_condensable(False)\n</code></pre>"},{"location":"API/particula/gas/species_builders/#signature_2","title":"Signature","text":"<pre><code>def set_condensable(self, condensable: Union[bool, NDArray[np.bool_]]): ...\n</code></pre>"},{"location":"API/particula/gas/species_builders/#gasspeciesbuilderset_name","title":"GasSpeciesBuilder().set_name","text":"<p>Show source in species_builders.py:63</p> <p>Set the name of the gas species.</p>"},{"location":"API/particula/gas/species_builders/#arguments_1","title":"Arguments","text":"<p>name : The name of the gas species.</p>"},{"location":"API/particula/gas/species_builders/#returns_1","title":"Returns","text":"<p>self : The GasSpeciesBuilder object.</p>"},{"location":"API/particula/gas/species_builders/#examples_1","title":"Examples","text":"Set a single name<pre><code>builder = GasSpeciesBuilder()\nbuilder.set_name(\"Oxygen\")\n</code></pre>"},{"location":"API/particula/gas/species_builders/#signature_3","title":"Signature","text":"<pre><code>def set_name(self, name: Union[str, NDArray[np.str_]]): ...\n</code></pre>"},{"location":"API/particula/gas/species_builders/#gasspeciesbuilderset_vapor_pressure_strategy","title":"GasSpeciesBuilder().set_vapor_pressure_strategy","text":"<p>Show source in species_builders.py:81</p> <p>Set the vapor pressure strategy for the gas species.</p>"},{"location":"API/particula/gas/species_builders/#arguments_2","title":"Arguments","text":"<p>strategy : The vapor pressure strategy for the gas species.</p>"},{"location":"API/particula/gas/species_builders/#returns_2","title":"Returns","text":"<p>self : The GasSpeciesBuilder object.</p>"},{"location":"API/particula/gas/species_builders/#examples_2","title":"Examples","text":"Set a single vapor pressure strategy<pre><code>builder = GasSpeciesBuilder()\nbuilder.set_vapor_pressure_strategy(\n    ConstantVaporPressureStrategy(vapor_pressure=1.0)\n)\n</code></pre>"},{"location":"API/particula/gas/species_builders/#signature_4","title":"Signature","text":"<pre><code>def set_vapor_pressure_strategy(\n    self, strategy: Union[VaporPressureStrategy, list[VaporPressureStrategy]]\n): ...\n</code></pre>"},{"location":"API/particula/gas/species_builders/#see-also_2","title":"See also","text":"<ul> <li>VaporPressureStrategy</li> </ul>"},{"location":"API/particula/gas/species_builders/#presetgasspeciesbuilder","title":"PresetGasSpeciesBuilder","text":"<p>Show source in species_builders.py:136</p> <p>Builder class for GasSpecies objects, allowing for a more fluent and readable creation of GasSpecies instances with optional parameters.</p>"},{"location":"API/particula/gas/species_builders/#signature_5","title":"Signature","text":"<pre><code>class PresetGasSpeciesBuilder(GasSpeciesBuilder):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/gas/species_builders/#see-also_3","title":"See also","text":"<ul> <li>GasSpeciesBuilder</li> </ul>"},{"location":"API/particula/gas/species_builders/#presetgasspeciesbuilderbuild","title":"PresetGasSpeciesBuilder().build","text":"<p>Show source in species_builders.py:153</p>"},{"location":"API/particula/gas/species_builders/#signature_6","title":"Signature","text":"<pre><code>def build(self) -&gt; GasSpecies: ...\n</code></pre>"},{"location":"API/particula/gas/species_builders/#see-also_4","title":"See also","text":"<ul> <li>GasSpecies</li> </ul>"},{"location":"API/particula/gas/species_factories/","title":"Species Factories","text":"<p>Particula Index / Particula / Gas / Species Factories</p> <p>Auto-generated documentation for particula.gas.species_factories module.</p>"},{"location":"API/particula/gas/species_factories/#gasspeciesfactory","title":"GasSpeciesFactory","text":"<p>Show source in species_factories.py:12</p> <p>Factory class to create species builders</p> <p>Factory class to create species builders for creating gas species.</p>"},{"location":"API/particula/gas/species_factories/#methods","title":"Methods","text":"<ul> <li>get_builders : Returns the mapping of strategy types to builder instances.</li> <li>get_strategy : Gets the strategy instance<ul> <li>strategy_type : Type of species builder to use, can be     'gas_species' or 'preset_gas_species'.</li> <li>parameters : Parameters required for the     builder, dependent on the chosen strategy type.</li> </ul> </li> </ul>"},{"location":"API/particula/gas/species_factories/#returns","title":"Returns","text":"<p>GasSpecies : An instance of the specified GasSpecies.</p>"},{"location":"API/particula/gas/species_factories/#raises","title":"Raises","text":"<p>ValueError : If an unknown strategy type is provided.</p>"},{"location":"API/particula/gas/species_factories/#examples","title":"Examples","text":"Create a preset gas species using the factory<pre><code>factory = GasSpeciesFactory()\ngas_object = factory.get_strategy(\"preset_gas_species\", parameters)\n</code></pre> Create a gas species using the factory<pre><code>factory = GasSpeciesFactory()\nparameters = {\n    \"name\": \"Oxygen\",\n    \"molar_mass\": 0.032,\n    \"vapor_pressure_strategy\": ConstantVaporPressureStrategy(\n        vapor_pressure=101325\n    ),\n    \"condensable\": False,\n    \"concentration\": 1.2,\n}\ngas_object = factory.get_strategy(\"gas_species\", parameters)\n</code></pre>"},{"location":"API/particula/gas/species_factories/#signature","title":"Signature","text":"<pre><code>class GasSpeciesFactory(\n    StrategyFactoryABC[Union[GasSpeciesBuilder, PresetGasSpeciesBuilder], GasSpecies]\n): ...\n</code></pre>"},{"location":"API/particula/gas/species_factories/#see-also","title":"See also","text":"<ul> <li>GasSpeciesBuilder</li> <li>GasSpecies</li> <li>PresetGasSpeciesBuilder</li> </ul>"},{"location":"API/particula/gas/species_factories/#gasspeciesfactoryget_builders","title":"GasSpeciesFactory().get_builders","text":"<p>Show source in species_factories.py:62</p> <p>Returns the mapping of strategy types to builder instances.</p>"},{"location":"API/particula/gas/species_factories/#returns_1","title":"Returns","text":"<p>A dictionary mapping strategy types to builder instances.     - gas_species : GasSpeciesBuilder     - preset_gas_species : PresetGasSpeciesBuilder</p>"},{"location":"API/particula/gas/species_factories/#signature_1","title":"Signature","text":"<pre><code>def get_builders(self): ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_builders/","title":"Vapor Pressure Builders","text":"<p>Particula Index / Particula / Gas / Vapor Pressure Builders</p> <p>Auto-generated documentation for particula.gas.vapor_pressure_builders module.</p>"},{"location":"API/particula/gas/vapor_pressure_builders/#antoinebuilder","title":"AntoineBuilder","text":"<p>Show source in vapor_pressure_builders.py:19</p> <p>Builder class for AntoineVaporPressureStrategy. It allows setting the coefficients 'a', 'b', and 'c' separately and then building the strategy object.</p>"},{"location":"API/particula/gas/vapor_pressure_builders/#examples","title":"Examples","text":"AntoineBuilder<pre><code>strategy = (\n    AntoineBuilder()\n    .set_a(8.07131)\n    .set_b(1730.63)\n    .set_c(233.426)\n    .build()\n)\n</code></pre> AntoineBuilder with units<pre><code>strategy = (\n    AntoineBuilder()\n    .set_a(8.07131)\n    .set_b(1730.63, \"K\")\n    .set_c(233.426, \"K\")\n    .build()\n)\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_builders/#references","title":"References","text":"<ul> <li><code>-</code> Equation - log10(P_mmHG) = a - b / (Temperature_K - c)</li> <li><code>(Reference</code> - https://en.wikipedia.org/wiki/Antoine_equation)</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_builders/#signature","title":"Signature","text":"<pre><code>class AntoineBuilder(BuilderABC):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_builders/#see-also","title":"See also","text":"<ul> <li>BuilderABC</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_builders/#antoinebuilderbuild","title":"AntoineBuilder().build","text":"<p>Show source in vapor_pressure_builders.py:86</p> <p>Build the AntoineVaporPressureStrategy object with the set coefficients.</p>"},{"location":"API/particula/gas/vapor_pressure_builders/#signature_1","title":"Signature","text":"<pre><code>def build(self) -&gt; AntoineVaporPressureStrategy: ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_builders/#see-also_1","title":"See also","text":"<ul> <li>AntoineVaporPressureStrategy</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_builders/#antoinebuilderset_a","title":"AntoineBuilder().set_a","text":"<p>Show source in vapor_pressure_builders.py:58</p> <p>Set the coefficient 'a' of the Antoine equation.</p>"},{"location":"API/particula/gas/vapor_pressure_builders/#signature_2","title":"Signature","text":"<pre><code>def set_a(self, a: float, a_units: Optional[str] = None) -&gt; \"AntoineBuilder\": ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_builders/#antoinebuilderset_b","title":"AntoineBuilder().set_b","text":"<p>Show source in vapor_pressure_builders.py:70</p> <p>Set the coefficient 'b' of the Antoine equation.</p>"},{"location":"API/particula/gas/vapor_pressure_builders/#signature_3","title":"Signature","text":"<pre><code>@validate_inputs({\"b\": \"positive\"})\ndef set_b(self, b: float, b_units: str = \"K\") -&gt; \"AntoineBuilder\": ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_builders/#antoinebuilderset_c","title":"AntoineBuilder().set_c","text":"<p>Show source in vapor_pressure_builders.py:78</p> <p>Set the coefficient 'c' of the Antoine equation.</p>"},{"location":"API/particula/gas/vapor_pressure_builders/#signature_4","title":"Signature","text":"<pre><code>@validate_inputs({\"c\": \"positive\"})\ndef set_c(self, c: float, c_units: str = \"K\") -&gt; \"AntoineBuilder\": ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_builders/#clausiusclapeyronbuilder","title":"ClausiusClapeyronBuilder","text":"<p>Show source in vapor_pressure_builders.py:93</p> <p>Builder class for ClausiusClapeyronStrategy. This class facilitates setting the latent heat of vaporization, initial temperature, and initial pressure with unit handling and then builds the strategy object.</p>"},{"location":"API/particula/gas/vapor_pressure_builders/#examples_1","title":"Examples","text":"ClausiusClapeyronBuilder<pre><code>strategy = (\n    ClausiusClapeyronBuilder()\n    .set_latent_heat(2260)\n    .set_temperature_initial(373.15)\n    .set_pressure_initial(101325)\n    .build()\n)\n</code></pre> ClausiusClapeyronBuilder with units<pre><code>strategy = (\n    ClausiusClapeyronBuilder()\n    .set_latent_heat(2260, \"J/kg\")\n    .set_temperature_initial(373.15, \"K\")\n    .set_pressure_initial(101325, \"Pa\")\n    .build()\n)\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_builders/#references_1","title":"References","text":"<ul> <li><code>-</code> Equation - dP/dT = L / (R * T^2)   https://en.wikipedia.org/wiki/Clausius%E2%80%93Clapeyron_relation</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_builders/#signature_5","title":"Signature","text":"<pre><code>class ClausiusClapeyronBuilder(BuilderABC):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_builders/#see-also_2","title":"See also","text":"<ul> <li>BuilderABC</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_builders/#clausiusclapeyronbuilderbuild","title":"ClausiusClapeyronBuilder().build","text":"<p>Show source in vapor_pressure_builders.py:174</p> <p>Build and return a ClausiusClapeyronStrategy object with the set parameters.</p>"},{"location":"API/particula/gas/vapor_pressure_builders/#signature_6","title":"Signature","text":"<pre><code>def build(self) -&gt; ClausiusClapeyronStrategy: ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_builders/#see-also_3","title":"See also","text":"<ul> <li>ClausiusClapeyronStrategy</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_builders/#clausiusclapeyronbuilderset_latent_heat","title":"ClausiusClapeyronBuilder().set_latent_heat","text":"<p>Show source in vapor_pressure_builders.py:135</p> <p>Set the latent heat of vaporization: Default units J/kg.</p>"},{"location":"API/particula/gas/vapor_pressure_builders/#signature_7","title":"Signature","text":"<pre><code>@validate_inputs({\"latent_heat\": \"positive\"})\ndef set_latent_heat(\n    self, latent_heat: float, latent_heat_units: str\n) -&gt; \"ClausiusClapeyronBuilder\": ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_builders/#clausiusclapeyronbuilderset_pressure_initial","title":"ClausiusClapeyronBuilder().set_pressure_initial","text":"<p>Show source in vapor_pressure_builders.py:161</p> <p>Set the initial pressure. Default units: Pa.</p>"},{"location":"API/particula/gas/vapor_pressure_builders/#signature_8","title":"Signature","text":"<pre><code>@validate_inputs({\"pressure_initial\": \"positive\"})\ndef set_pressure_initial(\n    self, pressure_initial: float, pressure_initial_units: str\n) -&gt; \"ClausiusClapeyronBuilder\": ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_builders/#clausiusclapeyronbuilderset_temperature_initial","title":"ClausiusClapeyronBuilder().set_temperature_initial","text":"<p>Show source in vapor_pressure_builders.py:148</p> <p>Set the initial temperature. Default units: K.</p>"},{"location":"API/particula/gas/vapor_pressure_builders/#signature_9","title":"Signature","text":"<pre><code>@validate_inputs({\"temperature_initial\": \"positive\"})\ndef set_temperature_initial(\n    self, temperature_initial: float, temperature_initial_units: str\n) -&gt; \"ClausiusClapeyronBuilder\": ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_builders/#constantbuilder","title":"ConstantBuilder","text":"<p>Show source in vapor_pressure_builders.py:185</p> <p>Builder class for ConstantVaporPressureStrategy. This class facilitates setting the constant vapor pressure and then building the strategy object.</p>"},{"location":"API/particula/gas/vapor_pressure_builders/#examples_2","title":"Examples","text":"ConstantBuilder<pre><code>strategy = (\n    ConstantBuilder()\n    .set_vapor_pressure(101325)\n    .build()\n)\n</code></pre> ConstantBuilder with units<pre><code>strategy = (\n    ConstantBuilder()\n    .set_vapor_pressure(1, \"atm\")\n    .build()\n)\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_builders/#references_2","title":"References","text":"<ul> <li><code>-</code> Equation - P = vapor_pressure   https://en.wikipedia.org/wiki/Vapor_pressure</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_builders/#signature_10","title":"Signature","text":"<pre><code>class ConstantBuilder(BuilderABC):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_builders/#see-also_4","title":"See also","text":"<ul> <li>BuilderABC</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_builders/#constantbuilderbuild","title":"ConstantBuilder().build","text":"<p>Show source in vapor_pressure_builders.py:229</p> <p>Build and return a ConstantVaporPressureStrategy object with the set parameters.</p>"},{"location":"API/particula/gas/vapor_pressure_builders/#signature_11","title":"Signature","text":"<pre><code>def build(self) -&gt; ConstantVaporPressureStrategy: ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_builders/#see-also_5","title":"See also","text":"<ul> <li>ConstantVaporPressureStrategy</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_builders/#constantbuilderset_vapor_pressure","title":"ConstantBuilder().set_vapor_pressure","text":"<p>Show source in vapor_pressure_builders.py:216</p> <p>Set the constant vapor pressure.</p>"},{"location":"API/particula/gas/vapor_pressure_builders/#signature_12","title":"Signature","text":"<pre><code>@validate_inputs({\"vapor_pressure\": \"positive\"})\ndef set_vapor_pressure(\n    self, vapor_pressure: float, vapor_pressure_units: str\n) -&gt; \"ConstantBuilder\": ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_builders/#waterbuckbuilder","title":"WaterBuckBuilder","text":"<p>Show source in vapor_pressure_builders.py:236</p> <p>Builder class for WaterBuckStrategy. This class facilitates the building of the WaterBuckStrategy object. Which as of now has no additional parameters to set. But could be extended in the future for ice only calculations.</p>"},{"location":"API/particula/gas/vapor_pressure_builders/#examples_3","title":"Examples","text":"WaterBuckBuilder<pre><code>WaterBuckBuilder().build()\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_builders/#signature_13","title":"Signature","text":"<pre><code>class WaterBuckBuilder(BuilderABC):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_builders/#see-also_6","title":"See also","text":"<ul> <li>BuilderABC</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_builders/#waterbuckbuilderbuild","title":"WaterBuckBuilder().build","text":"<p>Show source in vapor_pressure_builders.py:251</p> <p>Build and return a WaterBuckStrategy object.</p>"},{"location":"API/particula/gas/vapor_pressure_builders/#signature_14","title":"Signature","text":"<pre><code>def build(self) -&gt; WaterBuckStrategy: ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_builders/#see-also_7","title":"See also","text":"<ul> <li>WaterBuckStrategy</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_factories/","title":"Vapor Pressure Factories","text":"<p>Particula Index / Particula / Gas / Vapor Pressure Factories</p> <p>Auto-generated documentation for particula.gas.vapor_pressure_factories module.</p>"},{"location":"API/particula/gas/vapor_pressure_factories/#vaporpressurefactory","title":"VaporPressureFactory","text":"<p>Show source in vapor_pressure_factories.py:20</p> <p>Factory class to create vapor pressure strategy builders</p> <p>Factory class to create vapor pressure strategy builders for calculating vapor pressure of gas species.</p>"},{"location":"API/particula/gas/vapor_pressure_factories/#methods","title":"Methods","text":"<ul> <li>get_builders : Returns the mapping of strategy types to builder     instances.</li> <li>get_strategy : Gets the strategy instance     for the specified strategy type.<ul> <li>strategy_type : Type of vapor pressure strategy to use, can be     'constant', 'antoine', 'clausius_clapeyron', or 'water_buck'.</li> <li>parameters : Parameters required for the     builder, dependent on the chosen strategy type.         - <code>-</code> constant - constant_vapor_pressure         - <code>-</code> antoine - A, B, C         - <code>-</code> clausius_clapeyron - A, B, C         - <code>-</code> water_buck - No parameters are required.</li> </ul> </li> </ul>"},{"location":"API/particula/gas/vapor_pressure_factories/#returns","title":"Returns","text":"<p>VaporPressureStrategy : An instance of the specified     VaporPressureStrategy.</p>"},{"location":"API/particula/gas/vapor_pressure_factories/#raises","title":"Raises","text":"<p>ValueError : If an unknown strategy type is provided. ValueError : If any required key is missing during check_keys or     pre_build_check, or if trying to set an invalid parameter.</p>"},{"location":"API/particula/gas/vapor_pressure_factories/#examples","title":"Examples","text":"constant vapor pressure strategy<pre><code>strategy_is = VaporPressureFactory().get_strategy(\"constant\")\n# returns ConstantVaporPressureStrategy\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_factories/#signature","title":"Signature","text":"<pre><code>class VaporPressureFactory(\n    StrategyFactoryABC[\n        Union[\n            ConstantBuilder, AntoineBuilder, ClausiusClapeyronBuilder, WaterBuckBuilder\n        ],\n        Union[\n            ConstantVaporPressureStrategy,\n            AntoineVaporPressureStrategy,\n            ClausiusClapeyronStrategy,\n            WaterBuckStrategy,\n        ],\n    ]\n): ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_factories/#see-also","title":"See also","text":"<ul> <li>AntoineBuilder</li> <li>AntoineVaporPressureStrategy</li> <li>ClausiusClapeyronBuilder</li> <li>ClausiusClapeyronStrategy</li> <li>ConstantBuilder</li> <li>ConstantVaporPressureStrategy</li> <li>WaterBuckBuilder</li> <li>WaterBuckStrategy</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_factories/#vaporpressurefactoryget_builders","title":"VaporPressureFactory().get_builders","text":"<p>Show source in vapor_pressure_factories.py:71</p> <p>Returns the mapping of strategy types to builder instances.</p>"},{"location":"API/particula/gas/vapor_pressure_factories/#returns_1","title":"Returns","text":"<p>A dictionary mapping strategy types to builder instances.     - <code>-</code> constant - ConstantBuilder     - <code>-</code> antoine - AntoineBuilder     - <code>-</code> clausius_clapeyron - ClausiusClapeyronBuilder     - <code>-</code> water_buck - WaterBuckBuilder</p>"},{"location":"API/particula/gas/vapor_pressure_factories/#signature_1","title":"Signature","text":"<pre><code>def get_builders(self): ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/","title":"Vapor Pressure Strategies","text":"<p>Particula Index / Particula / Gas / Vapor Pressure Strategies</p> <p>Auto-generated documentation for particula.gas.vapor_pressure_strategies module.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#antoinevaporpressurestrategy","title":"AntoineVaporPressureStrategy","text":"<p>Show source in vapor_pressure_strategies.py:193</p> <p>Concrete implementation of the VaporPressureStrategy using the Antoine equation for vapor pressure calculations.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#signature","title":"Signature","text":"<pre><code>class AntoineVaporPressureStrategy(VaporPressureStrategy):\n    def __init__(\n        self,\n        a: Union[float, NDArray[np.float64]] = 0.0,\n        b: Union[float, NDArray[np.float64]] = 0.0,\n        c: Union[float, NDArray[np.float64]] = 0.0,\n    ): ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/#see-also","title":"See also","text":"<ul> <li>VaporPressureStrategy</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_strategies/#antoinevaporpressurestrategypure_vapor_pressure","title":"AntoineVaporPressureStrategy().pure_vapor_pressure","text":"<p>Show source in vapor_pressure_strategies.py:209</p> <p>Calculate vapor pressure using the Antoine equation.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#arguments","title":"Arguments","text":"<ul> <li>temperature : Temperature in Kelvin.</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_strategies/#returns","title":"Returns","text":"<p>Vapor pressure in Pascals.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#examples","title":"Examples","text":"Antoine Vapor Pressure Calculation<pre><code>vapor_pressure = strategy.pure_vapor_pressure(\n    temperature=300\n)\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/#references","title":"References","text":"<ul> <li><code>-</code> Equation - log10(P) = a - b / (T - c)</li> <li>https://en.wikipedia.org/wiki/Antoine_equation (but in Kelvin)</li> <li>Kelvin form:     https://onlinelibrary.wiley.com/doi/pdf/10.1002/9781118135341.app1</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_strategies/#signature_1","title":"Signature","text":"<pre><code>def pure_vapor_pressure(\n    self, temperature: Union[float, NDArray[np.float64]]\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/#clausiusclapeyronstrategy","title":"ClausiusClapeyronStrategy","text":"<p>Show source in vapor_pressure_strategies.py:239</p> <p>Concrete implementation of the VaporPressureStrategy using the Clausius-Clapeyron equation for vapor pressure calculations.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#signature_2","title":"Signature","text":"<pre><code>class ClausiusClapeyronStrategy(VaporPressureStrategy):\n    def __init__(\n        self,\n        latent_heat: Union[float, NDArray[np.float64]],\n        temperature_initial: Union[float, NDArray[np.float64]],\n        pressure_initial: Union[float, NDArray[np.float64]],\n    ): ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/#see-also_1","title":"See also","text":"<ul> <li>VaporPressureStrategy</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_strategies/#clausiusclapeyronstrategypure_vapor_pressure","title":"ClausiusClapeyronStrategy().pure_vapor_pressure","text":"<p>Show source in vapor_pressure_strategies.py:262</p> <p>Calculate vapor pressure using Clausius-Clapeyron equation.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#arguments_1","title":"Arguments","text":"<ul> <li>temperature : Final temperature in Kelvin.</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_strategies/#returns_1","title":"Returns","text":"<p>Pure vapor pressure in Pascals.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#examples_1","title":"Examples","text":"Clausius-Clapeyron Vapor Pressure Calculation<pre><code>vapor_pressure = strategy.pure_vapor_pressure(\n    temperature=300\n)\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/#references_1","title":"References","text":"<ul> <li>https://en.wikipedia.org/wiki/Clausius%E2%80%93Clapeyron_relation</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_strategies/#signature_3","title":"Signature","text":"<pre><code>def pure_vapor_pressure(\n    self, temperature: Union[float, NDArray[np.float64]]\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/#constantvaporpressurestrategy","title":"ConstantVaporPressureStrategy","text":"<p>Show source in vapor_pressure_strategies.py:163</p> <p>Concrete implementation of the VaporPressureStrategy using a constant vapor pressure value.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#signature_4","title":"Signature","text":"<pre><code>class ConstantVaporPressureStrategy(VaporPressureStrategy):\n    def __init__(self, vapor_pressure: Union[float, NDArray[np.float64]]): ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/#see-also_2","title":"See also","text":"<ul> <li>VaporPressureStrategy</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_strategies/#constantvaporpressurestrategypure_vapor_pressure","title":"ConstantVaporPressureStrategy().pure_vapor_pressure","text":"<p>Show source in vapor_pressure_strategies.py:170</p> <p>Return the constant vapor pressure value.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#arguments_2","title":"Arguments","text":"<ul> <li>temperature : Not used.</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_strategies/#returns_2","title":"Returns","text":"<p>The constant vapor pressure value in Pascals.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#examples_2","title":"Examples","text":"Constant Vapor Pressure Calculation<pre><code>vapor_pressure = strategy.pure_vapor_pressure(\n    temperature=300\n)\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/#signature_5","title":"Signature","text":"<pre><code>def pure_vapor_pressure(\n    self, temperature: Union[float, NDArray[np.float64]]\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/#vaporpressurestrategy","title":"VaporPressureStrategy","text":"<p>Show source in vapor_pressure_strategies.py:28</p> <p>Abstract class for vapor pressure calculations. The methods defined here must be implemented by subclasses below.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#signature_6","title":"Signature","text":"<pre><code>class VaporPressureStrategy(ABC): ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/#vaporpressurestrategyconcentration","title":"VaporPressureStrategy().concentration","text":"<p>Show source in vapor_pressure_strategies.py:61</p> <p>Calculate the concentration of the gas at a given pressure and temperature.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#arguments_3","title":"Arguments","text":"<ul> <li><code>-</code> partial_pressure - Pressure in Pascals.</li> <li><code>-</code> molar_mass - Molar mass of the gas in kg/mol.</li> <li><code>-</code> temperature - Temperature in Kelvin.</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_strategies/#returns_3","title":"Returns","text":"<p>The concentration of the gas in kg/m^3.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#examples_3","title":"Examples","text":"Concentration Calculation<pre><code>concentration = strategy.concentration(\n    partial_pressure=101325,\n    molar_mass=18.01528,\n    temperature=298.15\n)\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/#signature_7","title":"Signature","text":"<pre><code>def concentration(\n    self,\n    partial_pressure: Union[float, NDArray[np.float64]],\n    molar_mass: Union[float, NDArray[np.float64]],\n    temperature: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/#vaporpressurestrategypartial_pressure","title":"VaporPressureStrategy().partial_pressure","text":"<p>Show source in vapor_pressure_strategies.py:32</p> <p>Calculate the partial pressure of the gas from its concentration, molar mass, and temperature.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#arguments_4","title":"Arguments","text":"<ul> <li>concentration : Concentration of the gas in kg/m^3.</li> <li>molar_mass : Molar mass of the gas in kg/mol.</li> <li>temperature : Temperature in Kelvin.</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_strategies/#returns_4","title":"Returns","text":"<p>Partial pressure of the gas in Pascals.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#examples_4","title":"Examples","text":"Partial Pressure Calculation<pre><code>partial_pressure = strategy.partial_pressure(\n    concentration=5.0,\n    molar_mass=18.01528,\n    temperature=298.15\n)\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/#signature_8","title":"Signature","text":"<pre><code>def partial_pressure(\n    self,\n    concentration: Union[float, NDArray[np.float64]],\n    molar_mass: Union[float, NDArray[np.float64]],\n    temperature: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/#vaporpressurestrategypure_vapor_pressure","title":"VaporPressureStrategy().pure_vapor_pressure","text":"<p>Show source in vapor_pressure_strategies.py:151</p> <p>Calculate the pure (saturation) vapor pressure at a given temperature. Units are in Pascals Pa=kg/(m\u00b7s\u00b2).</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#arguments_5","title":"Arguments","text":"<ul> <li>temperature : Temperature in Kelvin.</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_strategies/#signature_9","title":"Signature","text":"<pre><code>@abstractmethod\ndef pure_vapor_pressure(\n    self, temperature: Union[float, NDArray[np.float64]]\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/#vaporpressurestrategysaturation_concentration","title":"VaporPressureStrategy().saturation_concentration","text":"<p>Show source in vapor_pressure_strategies.py:122</p> <p>Calculate the saturation concentration of the gas at a given temperature.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#arguments_6","title":"Arguments","text":"<ul> <li>molar_mass : Molar mass of the gas in kg/mol.</li> <li>temperature : Temperature in Kelvin.</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_strategies/#returns_5","title":"Returns","text":"<p>The saturation concentration of the gas in kg/m^3.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#examples_5","title":"Examples","text":"Saturation Concentration Calculation<pre><code>saturation_concentration = strategy.saturation_concentration(\n    molar_mass=18.01528,\n    temperature=298.15\n)\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/#signature_10","title":"Signature","text":"<pre><code>def saturation_concentration(\n    self,\n    molar_mass: Union[float, NDArray[np.float64]],\n    temperature: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/#vaporpressurestrategysaturation_ratio","title":"VaporPressureStrategy().saturation_ratio","text":"<p>Show source in vapor_pressure_strategies.py:92</p> <p>Calculate the saturation ratio of the gas at a given pressure and temperature.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#arguments_7","title":"Arguments","text":"<ul> <li>pressure : Pressure in Pascals.</li> <li>temperature : Temperature in Kelvin.</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_strategies/#returns_6","title":"Returns","text":"<p>The saturation ratio of the gas.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#examples_6","title":"Examples","text":"Saturation Ratio Calculation<pre><code>saturation_ratio = strategy.saturation_ratio(\n    concentration=5.0,\n    molar_mass=18.01528,\n    temperature=298.15\n)\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/#signature_11","title":"Signature","text":"<pre><code>def saturation_ratio(\n    self,\n    concentration: Union[float, NDArray[np.float64]],\n    molar_mass: Union[float, NDArray[np.float64]],\n    temperature: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/#waterbuckstrategy","title":"WaterBuckStrategy","text":"<p>Show source in vapor_pressure_strategies.py:292</p> <p>Concrete implementation of the VaporPressureStrategy using the Buck equation for water vapor pressure calculations.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#signature_12","title":"Signature","text":"<pre><code>class WaterBuckStrategy(VaporPressureStrategy): ...\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/#see-also_3","title":"See also","text":"<ul> <li>VaporPressureStrategy</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_strategies/#waterbuckstrategypure_vapor_pressure","title":"WaterBuckStrategy().pure_vapor_pressure","text":"<p>Show source in vapor_pressure_strategies.py:296</p> <p>Calculate vapor pressure using the Buck equation for water vapor.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#arguments_8","title":"Arguments","text":"<ul> <li><code>-</code> temperature - Temperature in Kelvin.</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_strategies/#returns_7","title":"Returns","text":"<p>Vapor pressure in Pascals.</p>"},{"location":"API/particula/gas/vapor_pressure_strategies/#examples_7","title":"Examples","text":"Water Buck Vapor Pressure Calculation<pre><code>vapor_pressure = strategy.pure_vapor_pressure(\n    temperature=300\n)\n</code></pre>"},{"location":"API/particula/gas/vapor_pressure_strategies/#references_2","title":"References","text":"<ul> <li>Buck, A. L., 1981: New Equations for Computing Vapor Pressure and   Enhancement Factor. J. Appl. Meteor. Climatol., 20, 1527-1532,   https://doi.org/10.1175/1520-0450(1981)020&lt;1527:NEFCVP&gt;2.0.CO;2.</li> <li>https://en.wikipedia.org/wiki/Arden_Buck_equation</li> </ul>"},{"location":"API/particula/gas/vapor_pressure_strategies/#signature_13","title":"Signature","text":"<pre><code>def pure_vapor_pressure(\n    self, temperature: Union[float, NDArray[np.float64]]\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/properties/","title":"Properties","text":"<p>Particula Index / Particula / Gas / Properties</p> <p>Auto-generated documentation for particula.gas.properties module.</p>"},{"location":"API/particula/gas/properties/#modules","title":"Modules","text":"<ul> <li>Concentration Function</li> <li>Dynamic Viscosity</li> <li>Fluid Rms Velocity</li> <li>Integral Scale Module</li> <li>Kinematic Viscosity</li> <li>Kolmogorov Module</li> <li>Mean Free Path</li> <li>Normalize Accel Variance</li> <li>Pressure Function</li> <li>Taylor Microscale Module</li> <li>Thermal Conductivity</li> <li>Vapor Pressure Module</li> </ul>"},{"location":"API/particula/gas/properties/concentration_function/","title":"Concentration Function","text":"<p>Particula Index / Particula / Gas / Properties / Concentration Function</p> <p>Auto-generated documentation for particula.gas.properties.concentration_function module.</p>"},{"location":"API/particula/gas/properties/concentration_function/#get_concentration_from_pressure","title":"get_concentration_from_pressure","text":"<p>Show source in concentration_function.py:10</p> <p>Calculate the concentration of a gas using the ideal gas law.</p> <p>The concentration is determined from the partial pressure, molar mass, and temperature using the ideal gas equation:</p> <ul> <li>C = (P \u00d7 M) / (R \u00d7 T)<ul> <li>C is the concentration in kg/m\u00b3,</li> <li>P is the partial pressure in Pascals (Pa),</li> <li>M is the molar mass in kg/mol,</li> <li>R is the universal gas constant (J/(mol\u00b7K)),</li> <li>T is the temperature in Kelvin.</li> </ul> </li> </ul>"},{"location":"API/particula/gas/properties/concentration_function/#arguments","title":"Arguments","text":"<p>partial_pressure : Partial pressure of the gas in Pascals (Pa). molar_mass : Molar mass of the gas in kg/mol. temperature : Temperature in Kelvin.</p>"},{"location":"API/particula/gas/properties/concentration_function/#examples","title":"Examples","text":"Floating-point Example Usage<pre><code>import particula as par\npar.gas.get_concentration_from_pressure(101325, 0.02897, 298.15)\n# Output: 1.184587604735883\n</code></pre>"},{"location":"API/particula/gas/properties/concentration_function/#returns","title":"Returns","text":"<p>Concentration of the gas in kg/m\u00b3.</p>"},{"location":"API/particula/gas/properties/concentration_function/#signature","title":"Signature","text":"<pre><code>def get_concentration_from_pressure(\n    partial_pressure: Union[float, NDArray[np.float64]],\n    molar_mass: Union[float, NDArray[np.float64]],\n    temperature: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/properties/dynamic_viscosity/","title":"Dynamic Viscosity","text":"<p>Particula Index / Particula / Gas / Properties / Dynamic Viscosity</p> <p>Auto-generated documentation for particula.gas.properties.dynamic_viscosity module.</p>"},{"location":"API/particula/gas/properties/dynamic_viscosity/#get_dynamic_viscosity","title":"get_dynamic_viscosity","text":"<p>Show source in dynamic_viscosity.py:27</p> <p>Calculate the dynamic viscosity of air using Sutherland's formula.</p> <ul> <li>\u03bc(T) = \u03bc\u2080 \u00d7 (T / T\u2080)^(3/2) \u00d7 (T\u2080 + S) / (T + S)<ul> <li>\u03bc(T) is the dynamic viscosity at temperature T (Pa\u00b7s).</li> <li>\u03bc\u2080 is the reference viscosity (Pa\u00b7s).</li> <li>T is the temperature in Kelvin.</li> <li>T\u2080 is the reference temperature in Kelvin.</li> <li>S is the Sutherland constant in Kelvin.</li> </ul> </li> </ul>"},{"location":"API/particula/gas/properties/dynamic_viscosity/#arguments","title":"Arguments","text":"<ul> <li>temperature : Desired air temperature in Kelvin. Must be &gt; 0.</li> <li>reference_viscosity : Gas viscosity at the reference temperature     (default is STP).</li> <li>reference_temperature : Gas temperature in Kelvin for the reference     viscosity (default is STP).</li> </ul>"},{"location":"API/particula/gas/properties/dynamic_viscosity/#returns","title":"Returns","text":"<ul> <li>Dynamic viscosity of air at the given temperature in Pa\u00b7s.</li> </ul>"},{"location":"API/particula/gas/properties/dynamic_viscosity/#examples","title":"Examples","text":"Example Float Usage<pre><code>import particula as par\npar.gas.get_dynamic_viscosity(300.0)\n# Output (approx.): 1.846e-05\n</code></pre>"},{"location":"API/particula/gas/properties/dynamic_viscosity/#references","title":"References","text":"<ul> <li>Wolfram Formula Repository, \"Sutherland's Formula,\"   https://resources.wolframcloud.com/FormulaRepository/resources/Sutherlands-Formula</li> </ul>"},{"location":"API/particula/gas/properties/dynamic_viscosity/#signature","title":"Signature","text":"<pre><code>@validate_inputs({\"temperature\": \"positive\"})\ndef get_dynamic_viscosity(\n    temperature: float,\n    reference_viscosity: float = REF_VISCOSITY_AIR_STP,\n    reference_temperature: float = REF_TEMPERATURE_STP,\n) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/gas/properties/dynamic_viscosity/#see-also","title":"See also","text":"<ul> <li>REF_TEMPERATURE_STP</li> <li>REF_VISCOSITY_AIR_STP</li> </ul>"},{"location":"API/particula/gas/properties/fluid_rms_velocity/","title":"Fluid Rms Velocity","text":"<p>Particula Index / Particula / Gas / Properties / Fluid Rms Velocity</p> <p>Auto-generated documentation for particula.gas.properties.fluid_rms_velocity module.</p>"},{"location":"API/particula/gas/properties/fluid_rms_velocity/#get_fluid_rms_velocity","title":"get_fluid_rms_velocity","text":"<p>Show source in fluid_rms_velocity.py:13</p> <p>Calculate the fluid RMS fluctuation velocity.</p> <p>The fluid root-mean-square (RMS) velocity fluctuation quantifies turbulence intensity in a fluid flow. It is calculated as:</p> <ul> <li>u' = (R_\u03bb^(\u00bd) v_K) / 15^(\u00bc)<ul> <li>u' is Fluid RMS fluctuation velocity [m/s]</li> <li>R_\u03bb (re_lambda) is Taylor-microscale Reynolds number [-]</li> <li>v_K is Kolmogorov velocity scale, computed as v_K = ( \u03b5)^(\u00bc) [m/s]</li> <li>v (kinematic_viscosity) is Kinematic viscosity of the fluid [m\u00b2/s]</li> <li>\u03b5 (turbulent_dissipation) is Turbulent energy dissipation rate [m\u00b2/s\u00b3]</li> </ul> </li> </ul>"},{"location":"API/particula/gas/properties/fluid_rms_velocity/#arguments","title":"Arguments","text":"<ul> <li>re_lambda : Taylor-microscale Reynolds number [-]</li> <li>kinematic_viscosity : Kinematic viscosity of the fluid [m\u00b2/s]</li> <li>turbulent_dissipation : Rate of dissipation of turbulent kinetic     energy [m\u00b2/s\u00b3]</li> </ul>"},{"location":"API/particula/gas/properties/fluid_rms_velocity/#returns","title":"Returns","text":"<ul> <li>Fluid RMS fluctuation velocity [m/s]</li> </ul>"},{"location":"API/particula/gas/properties/fluid_rms_velocity/#examples","title":"Examples","text":"Example Usage<pre><code>velocity = get_fluid_rms_velocity(500, 1.5e-5, 0.1)\n# Output (example): 0.35\n</code></pre> Example Usage with Array Input<pre><code>velocity = get_fluid_rms_velocity(\n    np.array([500, 600]),\n    np.array([1.5e-5, 1.7e-5]),\n    np.array([0.1, 0.12])\n)\n# Output (example): array([0.35, 0.41])\n</code></pre>"},{"location":"API/particula/gas/properties/fluid_rms_velocity/#references","title":"References","text":"<ul> <li>H. Tennekes and J. L. Lumley, \"A First Course in Turbulence,\"   MIT Press, 1972. [check this]</li> </ul>"},{"location":"API/particula/gas/properties/fluid_rms_velocity/#signature","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"re_lambda\": \"positive\",\n        \"kinematic_viscosity\": \"positive\",\n        \"turbulent_dissipation\": \"positive\",\n    }\n)\ndef get_fluid_rms_velocity(\n    re_lambda: Union[float, NDArray[np.float64]],\n    kinematic_viscosity: Union[float, NDArray[np.float64]],\n    turbulent_dissipation: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/properties/integral_scale_module/","title":"Integral Scale Module","text":"<p>Particula Index / Particula / Gas / Properties / Integral Scale Module</p> <p>Auto-generated documentation for particula.gas.properties.integral_scale_module module.</p>"},{"location":"API/particula/gas/properties/integral_scale_module/#get_eulerian_integral_length","title":"get_eulerian_integral_length","text":"<p>Show source in integral_scale_module.py:54</p> <p>Calculate the Eulerian integral length scale.</p> <p>The Eulerian integral length scale is a measure of the size of the largest turbulent eddies in a fluid flow.</p> <ul> <li>L_e = 0.5 \u00d7 (u'\u00b3) / \u03b5<ul> <li>L_e is Eulerian integral length scale [m].</li> <li>fluid_rms_velocity (u') is Fluid RMS fluctuation velocity [m/s].</li> <li>turbulent_dissipation (\u03b5) is Turbulent energy dissipation rate     [m\u00b2/s\u00b3].</li> </ul> </li> </ul>"},{"location":"API/particula/gas/properties/integral_scale_module/#arguments","title":"Arguments","text":"<ul> <li>fluid_rms_velocity : Fluid RMS fluctuation velocity [m/s].</li> <li>turbulent_dissipation : Turbulent kinetic energy dissipation rate     [m\u00b2/s\u00b3].</li> </ul>"},{"location":"API/particula/gas/properties/integral_scale_module/#returns","title":"Returns","text":"<ul> <li>Eulerian integral length scale [m].</li> </ul>"},{"location":"API/particula/gas/properties/integral_scale_module/#examples","title":"Examples","text":"Example<pre><code>import particula as par\npar.gas.get_eulerian_integral_length(0.3, 1e-4)\n# Output: 1350.0\n</code></pre>"},{"location":"API/particula/gas/properties/integral_scale_module/#references","title":"References","text":"<ul> <li>Hinze, J. O., \"Turbulence,\" McGraw-Hill, 1975. [Check this reference]</li> <li>Wikipedia contributors, \"Turbulence,\" Wikipedia.</li> </ul>"},{"location":"API/particula/gas/properties/integral_scale_module/#signature","title":"Signature","text":"<pre><code>@validate_inputs({\"fluid_rms_velocity\": \"positive\", \"turbulent_dissipation\": \"positive\"})\ndef get_eulerian_integral_length(\n    fluid_rms_velocity: Union[float, NDArray[np.float64]],\n    turbulent_dissipation: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/properties/integral_scale_module/#get_lagrangian_integral_time","title":"get_lagrangian_integral_time","text":"<p>Show source in integral_scale_module.py:12</p> <p>Calculate the Lagrangian integral timescale.</p> <p>The Lagrangian integral timescale is a measure of the time it takes for a fluid particle to travel a distance equal to the integral length scale.</p> <ul> <li>T_L = (u'\u00b2) / \u03b5<ul> <li>T_L is Lagrangian integral timescale [s].</li> <li>fluid_rms_velocity (u') is Fluid RMS fluctuation velocity [m/s].</li> <li>turbulent_dissipation (\u03b5) is Turbulent energy dissipation rate     [m\u00b2/s\u00b3].</li> </ul> </li> </ul>"},{"location":"API/particula/gas/properties/integral_scale_module/#arguments_1","title":"Arguments","text":"<ul> <li>fluid_rms_velocity : Fluid RMS fluctuation velocity [m/s].</li> <li>turbulent_dissipation : Turbulent kinetic energy dissipation rate     [m\u00b2/s\u00b3].</li> </ul>"},{"location":"API/particula/gas/properties/integral_scale_module/#returns_1","title":"Returns","text":"<ul> <li>Lagrangian integral timescale [s].</li> </ul>"},{"location":"API/particula/gas/properties/integral_scale_module/#examples_1","title":"Examples","text":"Example Usage<pre><code>import particula as par\npar.gas.get_lagrangian_integral_time(0.3, 1e-4)\n# Output: 900.0\n</code></pre>"},{"location":"API/particula/gas/properties/integral_scale_module/#references_1","title":"References","text":"<ul> <li>Townsend, A. A., \"The Structure of Turbulent Shear Flow,\" 2<sup>nd</sup> ed.,   Cambridge University Press, 1976. [Check this reference]</li> <li>Wikipedia contributors, \"Turbulence,\" Wikipedia.</li> </ul>"},{"location":"API/particula/gas/properties/integral_scale_module/#signature_1","title":"Signature","text":"<pre><code>@validate_inputs({\"fluid_rms_velocity\": \"positive\", \"turbulent_dissipation\": \"positive\"})\ndef get_lagrangian_integral_time(\n    fluid_rms_velocity: Union[float, NDArray[np.float64]],\n    turbulent_dissipation: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/properties/kinematic_viscosity/","title":"Kinematic Viscosity","text":"<p>Particula Index / Particula / Gas / Properties / Kinematic Viscosity</p> <p>Auto-generated documentation for particula.gas.properties.kinematic_viscosity module.</p>"},{"location":"API/particula/gas/properties/kinematic_viscosity/#get_kinematic_viscosity","title":"get_kinematic_viscosity","text":"<p>Show source in kinematic_viscosity.py:31</p> <p>Calculate the kinematic viscosity of a fluid.</p> <p>The function calculates \u03bd by dividing the dynamic viscosity (\u03bc) by the fluid density (\u03c1).</p> <ul> <li>\u03bd = \u03bc / \u03c1<ul> <li>\u03bd is Kinematic viscosity [m\u00b2/s].</li> <li>\u03bc is Dynamic viscosity [Pa\u00b7s].</li> <li>\u03c1 is Fluid density [kg/m\u00b3].</li> </ul> </li> </ul>"},{"location":"API/particula/gas/properties/kinematic_viscosity/#arguments","title":"Arguments","text":"<ul> <li>dynamic_viscosity : Dynamic viscosity of the fluid [Pa\u00b7s].</li> <li>fluid_density : Density of the fluid [kg/m\u00b3].</li> </ul>"},{"location":"API/particula/gas/properties/kinematic_viscosity/#returns","title":"Returns","text":"<ul> <li>The kinematic viscosity [m\u00b2/s].</li> </ul>"},{"location":"API/particula/gas/properties/kinematic_viscosity/#examples","title":"Examples","text":"Example usage<pre><code>import particula as par\npar.gas.get_kinematic_viscosity(1.8e-5, 1.2)\n# Output: ~1.5e-5\n</code></pre>"},{"location":"API/particula/gas/properties/kinematic_viscosity/#references","title":"References","text":"<ul> <li>\"Viscosity Conversion Formula,\" Wolfram Formula Repository.   https://resources.wolframcloud.com/FormulaRepository/resources/Viscosity-Conversion-Formula</li> </ul>"},{"location":"API/particula/gas/properties/kinematic_viscosity/#signature","title":"Signature","text":"<pre><code>@validate_inputs({\"dynamic_viscosity\": \"positive\", \"fluid_density\": \"positive\"})\ndef get_kinematic_viscosity(dynamic_viscosity: float, fluid_density: float) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/gas/properties/kinematic_viscosity/#get_kinematic_viscosity_via_system_state","title":"get_kinematic_viscosity_via_system_state","text":"<p>Show source in kinematic_viscosity.py:70</p> <p>Calculate the kinematic viscosity of air by first computing its dynamic viscosity.</p> <p>This function uses get_dynamic_viscosity(...) and divides by the given fluid_density to get the kinematic viscosity.</p> <ul> <li>\u03bd = \u03bc / \u03c1<ul> <li>\u03bd is Kinematic viscosity [m\u00b2/s].</li> <li>\u03bc is Dynamic viscosity [Pa\u00b7s].</li> <li>\u03c1 is Fluid density [kg/m\u00b3].</li> </ul> </li> </ul> <p>Where:     - \u03bd is Kinematic viscosity [m\u00b2/s].     - \u03bc is Dynamic viscosity [Pa\u00b7s].     - \u03c1 is Fluid density [kg/m\u00b3].</p>"},{"location":"API/particula/gas/properties/kinematic_viscosity/#arguments_1","title":"Arguments","text":"<ul> <li>temperature : Desired air temperature [K]. Must be &gt; 0.</li> <li>fluid_density : Density of the fluid [kg/m\u00b3].</li> <li>reference_viscosity : Reference dynamic viscosity [Pa\u00b7s].</li> <li>reference_temperature : Reference temperature [K].</li> </ul>"},{"location":"API/particula/gas/properties/kinematic_viscosity/#returns_1","title":"Returns","text":"<ul> <li>The kinematic viscosity of air [m\u00b2/s].</li> </ul>"},{"location":"API/particula/gas/properties/kinematic_viscosity/#examples_1","title":"Examples","text":"Example usage<pre><code>import particula as par\npar.gas.get_kinematic_viscosity_via_system_state(300, 1.2)\n# Output: ~1.5e-5\n</code></pre>"},{"location":"API/particula/gas/properties/kinematic_viscosity/#references_1","title":"References","text":"<ul> <li>\"Sutherland's Formula,\" Wolfram Formula Repository,   https://resources.wolframcloud.com/FormulaRepository/resources/Sutherlands-Formula</li> </ul>"},{"location":"API/particula/gas/properties/kinematic_viscosity/#signature_1","title":"Signature","text":"<pre><code>@validate_inputs({\"temperature\": \"positive\", \"fluid_density\": \"positive\"})\ndef get_kinematic_viscosity_via_system_state(\n    temperature: float,\n    fluid_density: float,\n    reference_viscosity: float = REF_VISCOSITY_AIR_STP,\n    reference_temperature: float = REF_TEMPERATURE_STP,\n) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/gas/properties/kinematic_viscosity/#see-also","title":"See also","text":"<ul> <li>REF_TEMPERATURE_STP</li> <li>REF_VISCOSITY_AIR_STP</li> </ul>"},{"location":"API/particula/gas/properties/kolmogorov_module/","title":"Kolmogorov Module","text":"<p>Particula Index / Particula / Gas / Properties / Kolmogorov Module</p> <p>Auto-generated documentation for particula.gas.properties.kolmogorov_module module.</p>"},{"location":"API/particula/gas/properties/kolmogorov_module/#get_kolmogorov_length","title":"get_kolmogorov_length","text":"<p>Show source in kolmogorov_module.py:59</p> <p>Calculate the Kolmogorov length scale.</p> <p>The Kolmogorov length scale represents the smallest eddies in a turbulent flow where viscosity dominates. It is defined as:</p> <ul> <li>\u03b7 = (\u03bd\u00b3 / \u03b5)^(\u00bc)<ul> <li>\u03b7 is the Kolmogorov length scale [m]</li> <li>\u03bd is the kinematic viscosity of the fluid [m^2/s]</li> <li>\u03b5 is the rate of dissipation of turbulent kinetic energy [m<sup>2/s</sup>3]</li> </ul> </li> </ul> <p>Where:     - \u03b7 Kolmogorov length scale [m]     - \u03bd Kinematic viscosity of the fluid [m^2/s]     - \u03b5 Rate of dissipation of turbulent kinetic energy [m<sup>2/s</sup>3]</p>"},{"location":"API/particula/gas/properties/kolmogorov_module/#arguments","title":"Arguments","text":"<ul> <li>kinematic_viscosity : Kinematic viscosity of the fluid [m^2/s]</li> <li>turbulent_dissipation : Rate of dissipation of turbulent kinetic     energy [m<sup>2/s</sup>3]</li> </ul>"},{"location":"API/particula/gas/properties/kolmogorov_module/#returns","title":"Returns","text":"<ul> <li>Kolmogorov length scale [m]</li> </ul>"},{"location":"API/particula/gas/properties/kolmogorov_module/#examples","title":"Examples","text":"Kolmogorov length scale of a fluid<pre><code>import particula as par\npar.gas.get_kolmogorov_length(1.5e-5, 0.1)\n# Output: 0.0029154759474226504\n</code></pre>"},{"location":"API/particula/gas/properties/kolmogorov_module/#references","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on the geometric collision rate of sedimenting droplets. Part 2. Theory and parameterization. New Journal of Physics, 10. https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/gas/properties/kolmogorov_module/#signature","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\"kinematic_viscosity\": \"positive\", \"turbulent_dissipation\": \"positive\"}\n)\ndef get_kolmogorov_length(\n    kinematic_viscosity: Union[float, NDArray[np.float64]],\n    turbulent_dissipation: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/properties/kolmogorov_module/#get_kolmogorov_time","title":"get_kolmogorov_time","text":"<p>Show source in kolmogorov_module.py:17</p> <p>Calculate the Kolmogorov time of a fluid.</p> <p>The Kolmogorov time scale represents the smallest timescale in turbulence where viscous forces dominate over inertial effects. This timescale characterizes the turnover time of the smallest turbulent eddies. It is given by:</p> <ul> <li>\u03c4_K = (v / \u03b5)^(\u00bd)<ul> <li>\u03c4_K is the Kolmogorov time [s]</li> <li>v is the kinematic viscosity of the fluid [m^2/s]</li> </ul> </li> </ul>"},{"location":"API/particula/gas/properties/kolmogorov_module/#arguments_1","title":"Arguments","text":"<ul> <li>kinematic_viscosity : Kinematic viscosity of the fluid [m^2/s]</li> <li>turbulent_dissipation : Rate of dissipation of turbulent kinetic     energy [m<sup>2/s</sup>3]</li> </ul>"},{"location":"API/particula/gas/properties/kolmogorov_module/#returns_1","title":"Returns","text":"<ul> <li>Kolmogorov time [s]</li> </ul>"},{"location":"API/particula/gas/properties/kolmogorov_module/#examples_1","title":"Examples","text":"Kolmogorov time of a fluid<pre><code>import particula as par\npar.gas.get_kolmogorov_time(1.5e-5, 0.1)\n# Output: 0.3872983346207417\n</code></pre>"},{"location":"API/particula/gas/properties/kolmogorov_module/#references_1","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on the geometric collision rate of sedimenting droplets. Part 2. Theory and parameterization. New Journal of Physics, 10. https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/gas/properties/kolmogorov_module/#signature_1","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\"kinematic_viscosity\": \"positive\", \"turbulent_dissipation\": \"positive\"}\n)\ndef get_kolmogorov_time(\n    kinematic_viscosity: Union[float, NDArray[np.float64]],\n    turbulent_dissipation: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/properties/kolmogorov_module/#get_kolmogorov_velocity","title":"get_kolmogorov_velocity","text":"<p>Show source in kolmogorov_module.py:105</p> <p>Calculate the Kolmogorov velocity scale.</p> <p>The Kolmogorov velocity scale characterizes the smallest turbulent velocity fluctuations and is given by:</p> <ul> <li>v_k = (v \u03b5)^(\u00bc)<ul> <li>v_k is the Kolmogorov velocity scale [m/s]</li> <li>v is the kinematic viscosity of the fluid [m^2/s]</li> <li>\u03b5 is the rate of dissipation of turbulent kinetic energy [m<sup>2/s</sup>3]</li> </ul> </li> </ul>"},{"location":"API/particula/gas/properties/kolmogorov_module/#arguments_2","title":"Arguments","text":"<ul> <li>kinematic_viscosity : Kinematic viscosity of the fluid [m^2/s]</li> <li>turbulent_dissipation : Rate of dissipation of turbulent kinetic     energy [m<sup>2/s</sup>3]</li> </ul>"},{"location":"API/particula/gas/properties/kolmogorov_module/#returns_2","title":"Returns","text":"<ul> <li>Kolmogorov velocity scale [m/s]</li> </ul>"},{"location":"API/particula/gas/properties/kolmogorov_module/#examples_2","title":"Examples","text":"Kolmogorov velocity scale of a fluid<pre><code>import particula as par\npar.gas.get_kolmogorov_velocity(1.5e-5, 0.1)\n# Output: 0.3872983346207417\n</code></pre>"},{"location":"API/particula/gas/properties/kolmogorov_module/#references_2","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on the geometric collision rate of sedimenting droplets. Part 2. Theory and parameterization. New Journal of Physics, 10. https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/gas/properties/kolmogorov_module/#signature_2","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\"kinematic_viscosity\": \"positive\", \"turbulent_dissipation\": \"positive\"}\n)\ndef get_kolmogorov_velocity(\n    kinematic_viscosity: Union[float, NDArray[np.float64]],\n    turbulent_dissipation: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/properties/mean_free_path/","title":"Mean Free Path","text":"<p>Particula Index / Particula / Gas / Properties / Mean Free Path</p> <p>Auto-generated documentation for particula.gas.properties.mean_free_path module.</p>"},{"location":"API/particula/gas/properties/mean_free_path/#get_molecule_mean_free_path","title":"get_molecule_mean_free_path","text":"<p>Show source in mean_free_path.py:30</p> <p>Calculate the mean free path of a gas molecule in air.</p> <p>This function calculates \u03bb based on the input conditions. If dynamic_viscosity is not provided, it is computed via get_dynamic_viscosity(temperature).</p> <ul> <li>\u03bb = (2 \u00d7 \u03bc / P) / \u221a(8 \u00d7 M / (\u03c0 \u00d7 R \u00d7 T))<ul> <li>\u03bb is Mean free path [m].</li> <li>\u03bc is Dynamic viscosity [Pa\u00b7s].</li> <li>P is Gas pressure [Pa].</li> <li>M is Molar mass [kg/mol].</li> <li>R is Universal gas constant [J/(mol\u00b7K)].</li> <li>T is Gas temperature [K].</li> </ul> </li> </ul>"},{"location":"API/particula/gas/properties/mean_free_path/#arguments","title":"Arguments","text":"<ul> <li>molar_mass : The molar mass of the gas molecule [kg/mol].</li> <li>temperature : The temperature of the gas [K].</li> <li>pressure : The pressure of the gas [Pa].</li> <li>dynamic_viscosity : The dynamic viscosity of the gas [Pa\u00b7s].     If None, it will be calculated based on the temperature.</li> </ul>"},{"location":"API/particula/gas/properties/mean_free_path/#returns","title":"Returns","text":"<ul> <li>Mean free path of the gas molecule in meters (m).</li> </ul>"},{"location":"API/particula/gas/properties/mean_free_path/#examples","title":"Examples","text":"Example usage<pre><code>import particula as par\npar.gas.get_molecule_mean_free_path()\n# Returns mean free path at ~298K and 101325Pa, ~6.5e-8 m\n</code></pre>"},{"location":"API/particula/gas/properties/mean_free_path/#references","title":"References","text":"<ul> <li>\"Mean Free Path,\" Wikipedia, The Free Encyclopedia.   https://en.wikipedia.org/wiki/Mean_free_path</li> </ul>"},{"location":"API/particula/gas/properties/mean_free_path/#signature","title":"Signature","text":"<pre><code>def get_molecule_mean_free_path(\n    molar_mass: ignore = MOLECULAR_WEIGHT_AIR,\n    temperature: float = 298.15,\n    pressure: float = 101325,\n    dynamic_viscosity: Optional[float] = None,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/properties/mean_free_path/#see-also","title":"See also","text":"<ul> <li>MOLECULAR_WEIGHT_AIR</li> </ul>"},{"location":"API/particula/gas/properties/normalize_accel_variance/","title":"Normalize Accel Variance","text":"<p>Particula Index / Particula / Gas / Properties / Normalize Accel Variance</p> <p>Auto-generated documentation for particula.gas.properties.normalize_accel_variance module.</p>"},{"location":"API/particula/gas/properties/normalize_accel_variance/#get_normalized_accel_variance_ao2008","title":"get_normalized_accel_variance_ao2008","text":"<p>Show source in normalize_accel_variance.py:12</p> <p>Calculate the normalized acceleration variance in isotropic turbulence.</p> <p>This coefficient describes the statistical behavior of acceleration fluctuations in turbulent flows.</p> <ul> <li>a_o = (11 + 7 R_\u03bb) / (205 + R_\u03bb)<ul> <li>a_o is Normalized acceleration variance in isotropic turbulence [-].</li> <li>R_\u03bb is Taylor-microscale Reynolds number [-].</li> </ul> </li> </ul> <p>Where:     - a_o (accel_variance) is Normalized acceleration variance in isotropic       turbulence [-].     - R_\u03bb (re_lambda) is Taylor-microscale Reynolds number [-].     - \u03b5 (numerical_stability_epsilon) is Small number added to R_\u03bb       for numerical stability.</p>"},{"location":"API/particula/gas/properties/normalize_accel_variance/#arguments","title":"Arguments","text":"<ul> <li>re_lambda : Taylor-microscale Reynolds number [-]</li> </ul>"},{"location":"API/particula/gas/properties/normalize_accel_variance/#returns","title":"Returns","text":"<ul> <li>accel_variance : Normalized acceleration variance [-]</li> </ul>"},{"location":"API/particula/gas/properties/normalize_accel_variance/#examples","title":"Examples","text":"Example Usage<pre><code>import particula as par\npar.gas.get_normalized_accel_variance_ao2008(500.0)\n# Output: ~0.05\n</code></pre>"},{"location":"API/particula/gas/properties/normalize_accel_variance/#references","title":"References","text":"<ul> <li>The equivalent numerically stable version used is this.     (7 + 11 / (R_\u03bb + \u03b5)) / (1 + 205 / (R_\u03bb + \u03b5))</li> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on     the geometric collision rate of sedimenting droplets. Part 2. Theory     and parameterization. New Journal of Physics, 10.     https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/gas/properties/normalize_accel_variance/#signature","title":"Signature","text":"<pre><code>@validate_inputs({\"re_lambda\": \"positive\"})\ndef get_normalized_accel_variance_ao2008(\n    re_lambda: Union[float, NDArray[np.float64]],\n    numerical_stability_epsilon: float = 1e-14,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/properties/pressure_function/","title":"Pressure Function","text":"<p>Particula Index / Particula / Gas / Properties / Pressure Function</p> <p>Auto-generated documentation for particula.gas.properties.pressure_function module.</p>"},{"location":"API/particula/gas/properties/pressure_function/#get_partial_pressure","title":"get_partial_pressure","text":"<p>Show source in pressure_function.py:11</p> <p>Calculate the partial pressure of a gas from its concentration, molar mass, and temperature.</p> <ul> <li>p = (c \u00d7 R \u00d7 T) / M<ul> <li>p is Partial pressure [Pa].</li> <li>c is Gas concentration [kg/m\u00b3].</li> <li>R is Universal gas constant [J/(mol\u00b7K)].</li> <li>T is Temperature [K].</li> <li>M is Molar mass [kg/mol].</li> </ul> </li> </ul>"},{"location":"API/particula/gas/properties/pressure_function/#arguments","title":"Arguments","text":"<ul> <li>concentration : Concentration of the gas [kg/m\u00b3].</li> <li>molar_mass : Molar mass of the gas [kg/mol].</li> <li>temperature : Temperature [K].</li> </ul>"},{"location":"API/particula/gas/properties/pressure_function/#returns","title":"Returns","text":"<ul> <li>Partial pressure of the gas [Pa].</li> </ul>"},{"location":"API/particula/gas/properties/pressure_function/#examples","title":"Examples","text":"Example usage<pre><code>import particula as par\npar.gas.get_partial_pressure(1.2, 0.02897, 298)\n# Output: ~986.4 Pa\n</code></pre>"},{"location":"API/particula/gas/properties/pressure_function/#references","title":"References","text":"<ul> <li>Wikipedia contributors, \"Ideal gas law,\" Wikipedia,   https://en.wikipedia.org/wiki/Ideal_gas_law</li> </ul>"},{"location":"API/particula/gas/properties/pressure_function/#signature","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\"concentration\": \"nonnegative\", \"molar_mass\": \"positive\", \"temperature\": \"positive\"}\n)\ndef get_partial_pressure(\n    concentration: Union[float, NDArray[np.float64]],\n    molar_mass: Union[float, NDArray[np.float64]],\n    temperature: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/properties/pressure_function/#get_saturation_ratio_from_pressure","title":"get_saturation_ratio_from_pressure","text":"<p>Show source in pressure_function.py:57</p> <p>Calculate the saturation ratio of the gas at a given partial pressure and pure vapor pressure.</p> <p>The saturation ratio is defined as the ratio of partial pressure to the pure vapor pressure.</p> <ul> <li>S = p / p_vap<ul> <li>S is Saturation ratio (dimensionless).</li> <li>p is Partial pressure [Pa].</li> <li>p_vap is Pure vapor pressure [Pa].</li> </ul> </li> </ul>"},{"location":"API/particula/gas/properties/pressure_function/#arguments_1","title":"Arguments","text":"<ul> <li>partial_pressure : Partial pressure [Pa].</li> <li>pure_vapor_pressure : Pure vapor pressure [Pa].</li> </ul>"},{"location":"API/particula/gas/properties/pressure_function/#returns_1","title":"Returns","text":"<ul> <li>Saturation ratio of the gas (dimensionless).</li> </ul>"},{"location":"API/particula/gas/properties/pressure_function/#examples_1","title":"Examples","text":"Example usage<pre><code>import particula as par\npar.gas.get_saturation_ratio_from_pressure(800.0, 1000.0)\n# Output: 0.8\n</code></pre>"},{"location":"API/particula/gas/properties/pressure_function/#references_1","title":"References","text":"<ul> <li>Wikipedia contributors, \"Relative humidity,\" Wikipedia,   https://en.wikipedia.org/wiki/Relative_humidity</li> </ul>"},{"location":"API/particula/gas/properties/pressure_function/#signature_1","title":"Signature","text":"<pre><code>@validate_inputs({\"partial_pressure\": \"positive\", \"pure_vapor_pressure\": \"positive\"})\ndef get_saturation_ratio_from_pressure(\n    partial_pressure: Union[float, NDArray[np.float64]],\n    pure_vapor_pressure: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/properties/taylor_microscale_module/","title":"Taylor Microscale Module","text":"<p>Particula Index / Particula / Gas / Properties / Taylor Microscale Module</p> <p>Auto-generated documentation for particula.gas.properties.taylor_microscale_module module.</p>"},{"location":"API/particula/gas/properties/taylor_microscale_module/#get_lagrangian_taylor_microscale_time","title":"get_lagrangian_taylor_microscale_time","text":"<p>Show source in taylor_microscale_module.py:13</p> <p>Calculate the Lagrangian Taylor microscale time.</p> <p>The Lagrangian Taylor microscale time (\u03c4_T) represents the characteristic time for the decay of turbulent velocity correlations. It provides insight into the memory of turbulent fluid elements. It is given by:</p> <ul> <li>\u03c4_T = \u03c4_k * (2 R_\u03bb / (15^(\u00bd) a_o))^(\u00bd)<ul> <li>\u03c4_T is Lagrangian Taylor microscale time [s]</li> <li>\u03c4_k (kolmogorov_time) is Kolmogorov time scale [s]</li> <li>R_\u03bb (re_lambda) is Taylor-microscale Reynolds number [-]</li> <li>a_o (accel_variance) is Normalized acceleration variance in isotropic     turbulence [-]</li> </ul> </li> </ul>"},{"location":"API/particula/gas/properties/taylor_microscale_module/#arguments","title":"Arguments","text":"<ul> <li>kolmogorov_time : Kolmogorov time scale [s]</li> <li>re_lambda : Taylor-microscale Reynolds number [-]</li> <li>accel_variance : Normalized acceleration variance in isotropic     turbulence [-]</li> </ul>"},{"location":"API/particula/gas/properties/taylor_microscale_module/#examples","title":"Examples","text":"Example Usage<pre><code>import particula as par\npar.gas.get_lagrangian_taylor_microscale_time(0.387, 500, 0.05)\n# Output: 0.3872983346207417\n</code></pre>"},{"location":"API/particula/gas/properties/taylor_microscale_module/#returns","title":"Returns","text":"<ul> <li>Lagrangian Taylor microscale time [s]</li> </ul>"},{"location":"API/particula/gas/properties/taylor_microscale_module/#signature","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"kolmogorov_time\": \"positive\",\n        \"re_lambda\": \"positive\",\n        \"accel_variance\": \"positive\",\n    }\n)\ndef get_lagrangian_taylor_microscale_time(\n    kolmogorov_time: Union[float, NDArray[np.float64]],\n    re_lambda: Union[float, NDArray[np.float64]],\n    accel_variance: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/properties/taylor_microscale_module/#get_taylor_microscale","title":"get_taylor_microscale","text":"<p>Show source in taylor_microscale_module.py:59</p> <p>Calculate the Taylor microscale.</p> <p>The Taylor microscale (\u03bb) represents an intermediate length scale in turbulence, linking the dissipative and energy-containing ranges of turbulence. It characterizes the smoothness of velocity fluctuations in turbulent flows. It is given by:</p> <ul> <li>\u03bb = u' * (15 \u03bd\u00b2 / \u03b5)^(\u00bd)<ul> <li>\u03bb is Taylor microscale [m]</li> <li>u' (rms_velocity) is Fluid RMS fluctuation velocity [m/s]</li> <li>v (kinematic_viscosity) is Kinematic viscosity of the fluid [m\u00b2/s]</li> <li>\u03b5 (turbulent_dissipation) is Turbulent kinetic energy dissipation     rate [m\u00b2/s\u00b3]</li> </ul> </li> </ul>"},{"location":"API/particula/gas/properties/taylor_microscale_module/#arguments_1","title":"Arguments","text":"<ul> <li>fluid_rms_velocity : Fluid RMS fluctuation velocity [m/s]</li> <li>kinematic_viscosity : Kinematic viscosity of the fluid [m\u00b2/s]</li> <li>turbulent_dissipation : Turbulent kinetic energy dissipation rate     [m\u00b2/s\u00b3]</li> </ul>"},{"location":"API/particula/gas/properties/taylor_microscale_module/#returns_1","title":"Returns","text":"<ul> <li>Taylor microscale [m]</li> </ul>"},{"location":"API/particula/gas/properties/taylor_microscale_module/#examples_1","title":"Examples","text":"Example Usage<pre><code>import particula as par\npar.gas.get_taylor_microscale(0.35, 1.5e-5, 0.1)\n# Output: 0.00021081851067789195\n</code></pre>"},{"location":"API/particula/gas/properties/taylor_microscale_module/#references","title":"References","text":"<ul> <li>https://en.wikipedia.org/wiki/Taylor_microscale</li> </ul>"},{"location":"API/particula/gas/properties/taylor_microscale_module/#signature_1","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"fluid_rms_velocity\": \"positive\",\n        \"kinematic_viscosity\": \"positive\",\n        \"turbulent_dissipation\": \"positive\",\n    }\n)\ndef get_taylor_microscale(\n    fluid_rms_velocity: Union[float, NDArray[np.float64]],\n    kinematic_viscosity: Union[float, NDArray[np.float64]],\n    turbulent_dissipation: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/properties/taylor_microscale_module/#get_taylor_microscale_reynolds_number","title":"get_taylor_microscale_reynolds_number","text":"<p>Show source in taylor_microscale_module.py:110</p> <p>Compute the Taylor-microscale Reynolds number (Re_\u03bb).</p> <p>The Taylor-scale micro Reynolds number is a dimensionless quantity used in turbulence studies to characterize the relative importance of inertial and viscous forces at the Taylor microscale.</p> <ul> <li>Re_\u03bb = (u' \u03bb) / \u03bd<ul> <li>u' (fluid_rms_velocity) is Fluid (RMS) velocity fluctuation [m/s].</li> <li>\u03bb (taylor_microscale) is Taylor microscale [m].</li> <li>\u03bd (kinematic_viscosity) is Kinematic viscosity of the fluid [m\u00b2/s].</li> </ul> </li> </ul>"},{"location":"API/particula/gas/properties/taylor_microscale_module/#arguments_2","title":"Arguments","text":"<ul> <li>fluid_rms_velocity : Fluid RMS velocity fluctuation [m/s].</li> <li>taylor_microscale : Taylor microscale [m].</li> <li>kinematic_viscosity : Kinematic viscosity of the fluid [m\u00b2/s].</li> </ul>"},{"location":"API/particula/gas/properties/taylor_microscale_module/#returns_2","title":"Returns","text":"<ul> <li>Taylor-microscale Reynolds number [dimensionless].</li> </ul>"},{"location":"API/particula/gas/properties/taylor_microscale_module/#examples_2","title":"Examples","text":"Example Usage<pre><code>import particula as par\npar.gas.get_taylor_microscale_reynolds_number(0.35, 0.00021, 1.5e-5)\n# Output: 500.0\n</code></pre>"},{"location":"API/particula/gas/properties/taylor_microscale_module/#references_1","title":"References","text":"<ul> <li>https://en.wikipedia.org/wiki/Taylor_microscale</li> </ul>"},{"location":"API/particula/gas/properties/taylor_microscale_module/#signature_2","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"fluid_rms_velocity\": \"positive\",\n        \"taylor_microscale\": \"positive\",\n        \"kinematic_viscosity\": \"positive\",\n    }\n)\ndef get_taylor_microscale_reynolds_number(\n    fluid_rms_velocity: Union[float, NDArray[np.float64]],\n    taylor_microscale: Union[float, NDArray[np.float64]],\n    kinematic_viscosity: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/properties/thermal_conductivity/","title":"Thermal Conductivity","text":"<p>Particula Index / Particula / Gas / Properties / Thermal Conductivity</p> <p>Auto-generated documentation for particula.gas.properties.thermal_conductivity module.</p>"},{"location":"API/particula/gas/properties/thermal_conductivity/#get_thermal_conductivity","title":"get_thermal_conductivity","text":"<p>Show source in thermal_conductivity.py:13</p> <p>Thermal conductivity of air as a function of temperature.</p> <p>Calculate the thermal conductivity of air as a function of temperature. Based on a simplified linear relation from atmospheric science literature. Only valid for temperatures within the range typically found on Earth's surface.</p> <ul> <li>k(T) = 1e-3 \u00d7 (4.39 + 0.071 \u00d7 T)<ul> <li>k(T) is Thermal conductivity [W/(m\u00b7K)].</li> <li>T is Temperature [K].</li> </ul> </li> </ul>"},{"location":"API/particula/gas/properties/thermal_conductivity/#arguments","title":"Arguments","text":"<ul> <li>temperature : The temperature in Kelvin (K).</li> </ul>"},{"location":"API/particula/gas/properties/thermal_conductivity/#returns","title":"Returns","text":"<ul> <li>The thermal conductivity [W/(m\u00b7K)] or [J/(m\u00b7s\u00b7K)].</li> </ul>"},{"location":"API/particula/gas/properties/thermal_conductivity/#examples","title":"Examples","text":"Example Usage<pre><code>import particula as par\npar.gas.get_thermal_conductivity(300)\n# ~0.449 W/(m\u00b7K)\n</code></pre>"},{"location":"API/particula/gas/properties/thermal_conductivity/#references","title":"References","text":"<ul> <li>Seinfeld and Pandis, \"Atmospheric Chemistry and Physics\", Equation 17.54.</li> </ul>"},{"location":"API/particula/gas/properties/thermal_conductivity/#signature","title":"Signature","text":"<pre><code>@validate_inputs({\"temperature\": \"nonnegative\"})\ndef get_thermal_conductivity(\n    temperature: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/properties/vapor_pressure_module/","title":"Vapor Pressure Module","text":"<p>Particula Index / Particula / Gas / Properties / Vapor Pressure Module</p> <p>Auto-generated documentation for particula.gas.properties.vapor_pressure_module module.</p>"},{"location":"API/particula/gas/properties/vapor_pressure_module/#get_antoine_vapor_pressure","title":"get_antoine_vapor_pressure","text":"<p>Show source in vapor_pressure_module.py:13</p> <p>Calculate vapor pressure using the Antoine equation.</p> <p>The Antoine equation relates the logarithm of vapor pressure to temperature for a pure substance.</p> <ul> <li>P = 10^(a - b / (T - c)) \u00d7 133.322<ul> <li>P is Vapor pressure [Pa].</li> <li>a, b, c is Antoine equation parameters (dimensionless).</li> <li>T is Temperature [K].</li> </ul> </li> </ul>"},{"location":"API/particula/gas/properties/vapor_pressure_module/#arguments","title":"Arguments","text":"<ul> <li>a : Antoine parameter a (dimensionless).</li> <li>b : Antoine parameter b (dimensionless).</li> <li>c : Antoine parameter c (dimensionless).</li> <li>temperature : Temperature in Kelvin [K].</li> </ul>"},{"location":"API/particula/gas/properties/vapor_pressure_module/#returns","title":"Returns","text":"<ul> <li>Vapor pressure in Pascals [Pa].</li> </ul>"},{"location":"API/particula/gas/properties/vapor_pressure_module/#examples","title":"Examples","text":"Example usage<pre><code>import particula as par\npar.gas.get_antoine_vapor_pressure(\n    8.07131, 1730.63, 233.426, 373.15\n)\n# Output: ~101325 Pa (roughly 1 atm)\n</code></pre>"},{"location":"API/particula/gas/properties/vapor_pressure_module/#references","title":"References","text":"<ul> <li>https://en.wikipedia.org/wiki/Antoine_equation</li> <li>Kelvin conversion details:   https://onlinelibrary.wiley.com/doi/pdf/10.1002/9781118135341.app1</li> </ul>"},{"location":"API/particula/gas/properties/vapor_pressure_module/#signature","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\"a\": \"finite\", \"b\": \"finite\", \"c\": \"finite\", \"temperature\": \"positive\"}\n)\ndef get_antoine_vapor_pressure(\n    a: Union[float, NDArray[np.float64]],\n    b: Union[float, NDArray[np.float64]],\n    c: Union[float, NDArray[np.float64]],\n    temperature: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/properties/vapor_pressure_module/#get_buck_vapor_pressure","title":"get_buck_vapor_pressure","text":"<p>Show source in vapor_pressure_module.py:124</p> <p>Calculate vapor pressure using the Buck equation for water vapor.</p> <p>Uses separate empirical formulas below 0 \u00b0C and above 0 \u00b0C to compute water vapor pressure.</p> <ul> <li>For T &lt; 0 \u00b0C, as     p = 6.1115 \u00d7 exp( (23.036 - T/333.7) \u00d7 T / (279.82 + T ) ) \u00d7 100</li> <li>For T \u2265 0 \u00b0C, as     p = 6.1121 \u00d7 exp( (18.678 - T/234.5) \u00d7 T / (257.14 + T ) ) \u00d7 100<ul> <li>p is Vapor pressure [Pa].</li> <li>T is Temperature in Celsius [\u00b0C] (converted internally from Kelvin).</li> </ul> </li> </ul>"},{"location":"API/particula/gas/properties/vapor_pressure_module/#arguments_1","title":"Arguments","text":"<ul> <li>temperature : Temperature in Kelvin [K].</li> </ul>"},{"location":"API/particula/gas/properties/vapor_pressure_module/#returns_1","title":"Returns","text":"<ul> <li>Vapor pressure in Pascals [Pa].</li> </ul>"},{"location":"API/particula/gas/properties/vapor_pressure_module/#examples_1","title":"Examples","text":"Example usage<pre><code>import particula as par\npar.gas.get_buck_vapor_pressure(273.15)\n# Output: ~611 Pa (around ice point)\n</code></pre>"},{"location":"API/particula/gas/properties/vapor_pressure_module/#references_1","title":"References","text":"<ul> <li>Buck, A. L., (1981)</li> <li>https://en.wikipedia.org/wiki/Arden_Buck_equation</li> </ul>"},{"location":"API/particula/gas/properties/vapor_pressure_module/#signature_1","title":"Signature","text":"<pre><code>@validate_inputs({\"temperature\": \"positive\"})\ndef get_buck_vapor_pressure(\n    temperature: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/properties/vapor_pressure_module/#get_clausius_clapeyron_vapor_pressure","title":"get_clausius_clapeyron_vapor_pressure","text":"<p>Show source in vapor_pressure_module.py:66</p> <p>Calculate vapor pressure using Clausius-Clapeyron equation.</p> <p>This function calculates the final vapor pressure based on an initial temperature/pressure pair and the latent heat of vaporization, assuming ideal gas behavior.</p> <ul> <li>P_final = P_initial \u00d7 exp( (L / R) \u00d7 (1 / T_initial - 1 / T_final) )<ul> <li>P_final is Final vapor pressure [Pa].</li> <li>P_initial is Initial vapor pressure [Pa].</li> <li>L is Latent heat of vaporization [J/mol].</li> <li>R is Universal gas constant [J/(mol\u00b7K)].</li> <li>T_initial is Initial temperature [K].</li> <li>T_final is Final temperature [K].</li> </ul> </li> </ul>"},{"location":"API/particula/gas/properties/vapor_pressure_module/#arguments_2","title":"Arguments","text":"<ul> <li>latent_heat : Latent heat of vaporization [J/mol].</li> <li>temperature_initial : Initial temperature [K].</li> <li>pressure_initial : Initial vapor pressure [Pa].</li> <li>temperature : Final temperature [K].</li> <li>gas_constant : Gas constant (default 8.314 J/(mol\u00b7K)).</li> </ul>"},{"location":"API/particula/gas/properties/vapor_pressure_module/#returns_2","title":"Returns","text":"<ul> <li>Pure vapor pressure [Pa].</li> </ul>"},{"location":"API/particula/gas/properties/vapor_pressure_module/#examples_2","title":"Examples","text":"Example usage<pre><code>import particula as par\npar.gas.get_clausius_clapeyron_vapor_pressure(\n    40660, 373.15, 101325, 300\n)\n# Output: ~35307 Pa\n</code></pre>"},{"location":"API/particula/gas/properties/vapor_pressure_module/#references_2","title":"References","text":"<ul> <li>https://en.wikipedia.org/wiki/Clausius%E2%80%93Clapeyron_relation</li> </ul>"},{"location":"API/particula/gas/properties/vapor_pressure_module/#signature_2","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"latent_heat\": \"positive\",\n        \"temperature_initial\": \"positive\",\n        \"pressure_initial\": \"nonnegative\",\n        \"temperature\": \"positive\",\n    }\n)\ndef get_clausius_clapeyron_vapor_pressure(\n    latent_heat: Union[float, NDArray[np.float64]],\n    temperature_initial: Union[float, NDArray[np.float64]],\n    pressure_initial: Union[float, NDArray[np.float64]],\n    temperature: Union[float, NDArray[np.float64]],\n    gas_constant: float = GAS_CONSTANT,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/gas/properties/vapor_pressure_module/#see-also","title":"See also","text":"<ul> <li>GAS_CONSTANT</li> </ul>"},{"location":"API/particula/particles/","title":"Particles","text":"<p>Particula Index / Particula / Particles</p> <p>Auto-generated documentation for particula.particles module.</p>"},{"location":"API/particula/particles/#modules","title":"Modules","text":"<ul> <li>Activity Builders</li> <li>Activity Factories</li> <li>Activity Strategies</li> <li>Change Particle Representation</li> <li>Distribution Builders</li> <li>Distribution Factories</li> <li>Distribution Strategies</li> <li>Properties</li> <li>Representation</li> <li>Representation Builders</li> <li>Representation Factories</li> <li>Surface Builders</li> <li>Surface Factories</li> <li>Surface Strategies</li> </ul>"},{"location":"API/particula/particles/activity_builders/","title":"Activity Builders","text":"<p>Particula Index / Particula / Particles / Activity Builders</p> <p>Auto-generated documentation for particula.particles.activity_builders module.</p>"},{"location":"API/particula/particles/activity_builders/#activityidealmassbuilder","title":"ActivityIdealMassBuilder","text":"<p>Show source in activity_builders.py:27</p> <p>Builder class for IdealActivityMass objects. No additional parameters.</p>"},{"location":"API/particula/particles/activity_builders/#methods","title":"Methods","text":"<ul> <li><code>build()</code> - Validate and return the IdealActivityMass object.</li> </ul>"},{"location":"API/particula/particles/activity_builders/#signature","title":"Signature","text":"<pre><code>class ActivityIdealMassBuilder(BuilderABC):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/particles/activity_builders/#see-also","title":"See also","text":"<ul> <li>BuilderABC</li> </ul>"},{"location":"API/particula/particles/activity_builders/#activityidealmassbuilderbuild","title":"ActivityIdealMassBuilder().build","text":"<p>Show source in activity_builders.py:38</p> <p>Validate and return the IdealActivityMass object.</p>"},{"location":"API/particula/particles/activity_builders/#returns","title":"Returns","text":"<ul> <li><code>IdealActivityMass</code> - The validated IdealActivityMass object.</li> </ul>"},{"location":"API/particula/particles/activity_builders/#signature_1","title":"Signature","text":"<pre><code>def build(self) -&gt; ActivityStrategy: ...\n</code></pre>"},{"location":"API/particula/particles/activity_builders/#see-also_1","title":"See also","text":"<ul> <li>ActivityStrategy</li> </ul>"},{"location":"API/particula/particles/activity_builders/#activityidealmolarbuilder","title":"ActivityIdealMolarBuilder","text":"<p>Show source in activity_builders.py:47</p> <p>Builder class for IdealActivityMolar objects.</p>"},{"location":"API/particula/particles/activity_builders/#methods_1","title":"Methods","text":"<ul> <li><code>set_molar_mass(molar_mass,</code> molar_mass_units) - Set the molar mass of the     particle in kg/mol. Default units are 'kg/mol'.</li> <li><code>set_parameters(params)</code> - Set the parameters of the IdealActivityMolar     object from a dictionary including optional units.</li> <li><code>build()</code> - Validate and return the IdealActivityMolar object.</li> </ul>"},{"location":"API/particula/particles/activity_builders/#signature_2","title":"Signature","text":"<pre><code>class ActivityIdealMolarBuilder(BuilderABC, BuilderMolarMassMixin):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/particles/activity_builders/#see-also_2","title":"See also","text":"<ul> <li>BuilderABC</li> <li>BuilderMolarMassMixin</li> </ul>"},{"location":"API/particula/particles/activity_builders/#activityidealmolarbuilderbuild","title":"ActivityIdealMolarBuilder().build","text":"<p>Show source in activity_builders.py:63</p> <p>Validate and return the IdealActivityMolar object.</p>"},{"location":"API/particula/particles/activity_builders/#returns_1","title":"Returns","text":"<ul> <li><code>IdealActivityMolar</code> - The validated IdealActivityMolar object.</li> </ul>"},{"location":"API/particula/particles/activity_builders/#signature_3","title":"Signature","text":"<pre><code>def build(self) -&gt; ActivityStrategy: ...\n</code></pre>"},{"location":"API/particula/particles/activity_builders/#see-also_3","title":"See also","text":"<ul> <li>ActivityStrategy</li> </ul>"},{"location":"API/particula/particles/activity_builders/#activitykappaparameterbuilder","title":"ActivityKappaParameterBuilder","text":"<p>Show source in activity_builders.py:73</p> <p>Builder class for KappaParameterActivity objects.</p>"},{"location":"API/particula/particles/activity_builders/#methods_2","title":"Methods","text":"<ul> <li><code>set_kappa(kappa)</code> - Set the kappa parameter for the activity calculation.</li> <li><code>set_density(density,density_units)</code> - Set the density of the species in     kg/m^3. Default units are 'kg/m^3'.</li> <li><code>set_molar_mass(molar_mass,molar_mass_units)</code> - Set the molar mass of the     species in kg/mol. Default units are 'kg/mol'.</li> <li><code>set_water_index(water_index)</code> - Set the array index of the species.</li> <li><code>set_parameters(dict)</code> - Set the parameters of the KappaParameterActivity     object from a dictionary including optional units.</li> <li><code>build()</code> - Validate and return the KappaParameterActivity object.</li> </ul>"},{"location":"API/particula/particles/activity_builders/#signature_4","title":"Signature","text":"<pre><code>class ActivityKappaParameterBuilder(\n    BuilderABC, BuilderDensityMixin, BuilderMolarMassMixin\n):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/particles/activity_builders/#see-also_4","title":"See also","text":"<ul> <li>BuilderABC</li> <li>BuilderDensityMixin</li> <li>BuilderMolarMassMixin</li> </ul>"},{"location":"API/particula/particles/activity_builders/#activitykappaparameterbuilderbuild","title":"ActivityKappaParameterBuilder().build","text":"<p>Show source in activity_builders.py:136</p> <p>Validate and return the KappaParameterActivity object.</p>"},{"location":"API/particula/particles/activity_builders/#returns_2","title":"Returns","text":"<ul> <li><code>KappaParameterActivity</code> - The validated KappaParameterActivity     object.</li> </ul>"},{"location":"API/particula/particles/activity_builders/#signature_5","title":"Signature","text":"<pre><code>def build(self) -&gt; ActivityStrategy: ...\n</code></pre>"},{"location":"API/particula/particles/activity_builders/#see-also_5","title":"See also","text":"<ul> <li>ActivityStrategy</li> </ul>"},{"location":"API/particula/particles/activity_builders/#activitykappaparameterbuilderset_kappa","title":"ActivityKappaParameterBuilder().set_kappa","text":"<p>Show source in activity_builders.py:98</p> <p>Set the kappa parameter for the activity calculation.</p>"},{"location":"API/particula/particles/activity_builders/#arguments","title":"Arguments","text":"<ul> <li><code>kappa</code> - The kappa parameter for the activity calculation.</li> <li><code>kappa_units</code> - Not used. (for interface consistency)</li> </ul>"},{"location":"API/particula/particles/activity_builders/#signature_6","title":"Signature","text":"<pre><code>def set_kappa(\n    self, kappa: Union[float, NDArray[np.float64]], kappa_units: Optional[str] = None\n): ...\n</code></pre>"},{"location":"API/particula/particles/activity_builders/#activitykappaparameterbuilderset_water_index","title":"ActivityKappaParameterBuilder().set_water_index","text":"<p>Show source in activity_builders.py:118</p> <p>Set the array index of the species.</p>"},{"location":"API/particula/particles/activity_builders/#arguments_1","title":"Arguments","text":"<ul> <li><code>water_index</code> - The array index of the species.</li> <li><code>water_index_units</code> - Not used. (for interface consistency)</li> </ul>"},{"location":"API/particula/particles/activity_builders/#signature_7","title":"Signature","text":"<pre><code>def set_water_index(self, water_index: int, water_index_units: Optional[str] = None): ...\n</code></pre>"},{"location":"API/particula/particles/activity_factories/","title":"Activity Factories","text":"<p>Particula Index / Particula / Particles / Activity Factories</p> <p>Auto-generated documentation for particula.particles.activity_factories module.</p>"},{"location":"API/particula/particles/activity_factories/#activityfactory","title":"ActivityFactory","text":"<p>Show source in activity_factories.py:20</p> <p>Factory class to create activity strategy builders</p> <p>Factory class to create activity strategy builders for calculating activity and partial pressure of species in a mixture of liquids.</p>"},{"location":"API/particula/particles/activity_factories/#methods","title":"Methods","text":"<ul> <li><code>get_builders()</code> - Returns the mapping of strategy types to builder instances.</li> <li><code>get_strategy(strategy_type,</code> parameters) - Gets the strategy instance for the specified strategy type.<ul> <li><code>strategy_type</code> - Type of activity strategy to use, can be 'mass_ideal' (default), 'molar_ideal', or 'kappa_parameter'. parameters(Dict[str, Any], optional): Parameters required for the builder, dependent on the chosen strategy type.<ul> <li><code>mass_ideal</code> - No parameters are required.</li> <li><code>molar_ideal</code> - molar_mass kappa | kappa_parameter: kappa, density, molar_mass, water_index</li> </ul> </li> </ul> </li> </ul>"},{"location":"API/particula/particles/activity_factories/#returns","title":"Returns","text":"<ul> <li><code>ActivityStrategy</code> - An instance of the specified ActivityStrategy.</li> </ul>"},{"location":"API/particula/particles/activity_factories/#raises","title":"Raises","text":"<ul> <li><code>ValueError</code> - If an unknown strategy type is provided.</li> <li><code>ValueError</code> - If any required key is missing during check_keys or     pre_build_check, or if trying to set an invalid parameter.</li> </ul>"},{"location":"API/particula/particles/activity_factories/#examples","title":"Examples","text":"<pre><code>&gt;&gt;&gt; strategy_is = ActivityFactory().get_strategy(\"mass_ideal\")\n</code></pre>"},{"location":"API/particula/particles/activity_factories/#signature","title":"Signature","text":"<pre><code>class ActivityFactory(\n    StrategyFactoryABC[\n        Union[\n            ActivityIdealMassBuilder,\n            ActivityIdealMolarBuilder,\n            ActivityKappaParameterBuilder,\n        ],\n        Union[ActivityIdealMass, ActivityIdealMolar, ActivityKappaParameter],\n    ]\n): ...\n</code></pre>"},{"location":"API/particula/particles/activity_factories/#see-also","title":"See also","text":"<ul> <li>ActivityIdealMassBuilder</li> <li>ActivityIdealMass</li> <li>ActivityIdealMolarBuilder</li> <li>ActivityIdealMolar</li> <li>ActivityKappaParameterBuilder</li> <li>ActivityKappaParameter</li> </ul>"},{"location":"API/particula/particles/activity_factories/#activityfactoryget_builders","title":"ActivityFactory().get_builders","text":"<p>Show source in activity_factories.py:61</p> <p>Returns the mapping of strategy types to builder instances.</p>"},{"location":"API/particula/particles/activity_factories/#returns_1","title":"Returns","text":"<ul> <li><code>Dict[str,</code> Any] - A dictionary mapping strategy types to builder instances.<ul> <li><code>mass_ideal</code> - IdealActivityMassBuilder</li> <li><code>molar_ideal</code> - IdealActivityMolarBuilder</li> <li><code>kappa_parameter</code> - KappaParameterActivityBuilder</li> </ul> </li> </ul>"},{"location":"API/particula/particles/activity_factories/#signature_1","title":"Signature","text":"<pre><code>def get_builders(self): ...\n</code></pre>"},{"location":"API/particula/particles/activity_strategies/","title":"Activity Strategies","text":"<p>Particula Index / Particula / Particles / Activity Strategies</p> <p>Auto-generated documentation for particula.particles.activity_strategies module.</p>"},{"location":"API/particula/particles/activity_strategies/#activityidealmass","title":"ActivityIdealMass","text":"<p>Show source in activity_strategies.py:115</p> <p>Calculate ideal activity based on mass fractions.</p> <p>This strategy utilizes mass fractions to determine the activity, consistent with the principles outlined in Raoult's Law.</p>"},{"location":"API/particula/particles/activity_strategies/#references","title":"References","text":"<p>Mass Based Raoult's Law</p>"},{"location":"API/particula/particles/activity_strategies/#signature","title":"Signature","text":"<pre><code>class ActivityIdealMass(ActivityStrategy): ...\n</code></pre>"},{"location":"API/particula/particles/activity_strategies/#see-also","title":"See also","text":"<ul> <li>ActivityStrategy</li> </ul>"},{"location":"API/particula/particles/activity_strategies/#activityidealmassactivity","title":"ActivityIdealMass().activity","text":"<p>Show source in activity_strategies.py:125</p> <p>Calculate the activity of a species based on mass concentration.</p>"},{"location":"API/particula/particles/activity_strategies/#arguments","title":"Arguments","text":"<ul> <li><code>mass_concentration</code> - Concentration of the species in kilograms per cubic meter (kg/m^3).</li> </ul>"},{"location":"API/particula/particles/activity_strategies/#returns","title":"Returns","text":"<ul> <li><code>Union[float,</code> NDArray[np.float64]] - Activity of the particle, unitless.</li> </ul>"},{"location":"API/particula/particles/activity_strategies/#signature_1","title":"Signature","text":"<pre><code>def activity(\n    self, mass_concentration: Union[float, NDArray[np.float64]]\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/activity_strategies/#activityidealmolar","title":"ActivityIdealMolar","text":"<p>Show source in activity_strategies.py:79</p> <p>Calculate ideal activity based on mole fractions.</p> <p>This strategy uses mole fractions to compute the activity, adhering to the principles of Raoult's Law.</p>"},{"location":"API/particula/particles/activity_strategies/#arguments_1","title":"Arguments","text":"<p>molar_mass (Union[float, NDArray[np.float64]]): Molar mass of the species [kg/mol]. A single value applies to all species if only one is provided.</p>"},{"location":"API/particula/particles/activity_strategies/#references_1","title":"References","text":"<p>Molar Raoult's Law</p>"},{"location":"API/particula/particles/activity_strategies/#signature_2","title":"Signature","text":"<pre><code>class ActivityIdealMolar(ActivityStrategy):\n    def __init__(self, molar_mass: Union[float, NDArray[np.float64]] = 0.0): ...\n</code></pre>"},{"location":"API/particula/particles/activity_strategies/#see-also_1","title":"See also","text":"<ul> <li>ActivityStrategy</li> </ul>"},{"location":"API/particula/particles/activity_strategies/#activityidealmolaractivity","title":"ActivityIdealMolar().activity","text":"<p>Show source in activity_strategies.py:97</p> <p>Calculate the activity of a species based on mass concentration.</p>"},{"location":"API/particula/particles/activity_strategies/#arguments_2","title":"Arguments","text":"<ul> <li><code>mass_concentration</code> - Concentration of the species in kilograms per cubic meter (kg/m^3).</li> </ul>"},{"location":"API/particula/particles/activity_strategies/#returns_1","title":"Returns","text":"<ul> <li><code>Union[float,</code> NDArray[np.float64]] - Activity of the species, unitless.</li> </ul>"},{"location":"API/particula/particles/activity_strategies/#signature_3","title":"Signature","text":"<pre><code>def activity(\n    self, mass_concentration: Union[float, NDArray[np.float64]]\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/activity_strategies/#activityidealvolume","title":"ActivityIdealVolume","text":"<p>Show source in activity_strategies.py:141</p> <p>Calculate ideal activity based on volume fractions.</p> <p>This strategy uses volume fractions to compute the activity, following the principles of Raoult's Law.</p>"},{"location":"API/particula/particles/activity_strategies/#references_2","title":"References","text":"<p>Volume Based     Raoult's Law</p>"},{"location":"API/particula/particles/activity_strategies/#signature_4","title":"Signature","text":"<pre><code>class ActivityIdealVolume(ActivityStrategy):\n    def __init__(self, density: Union[float, NDArray[np.float64]] = 0.0): ...\n</code></pre>"},{"location":"API/particula/particles/activity_strategies/#see-also_2","title":"See also","text":"<ul> <li>ActivityStrategy</li> </ul>"},{"location":"API/particula/particles/activity_strategies/#activityidealvolumeactivity","title":"ActivityIdealVolume().activity","text":"<p>Show source in activity_strategies.py:155</p> <p>Calculate the activity of a species based on mass concentration.</p>"},{"location":"API/particula/particles/activity_strategies/#arguments_3","title":"Arguments","text":"<ul> <li><code>mass_concentration</code> - Concentration of the species in kilograms per     cubic meter (kg/m^3).</li> <li><code>density</code> - Density of the species in kilograms per cubic meter     (kg/m^3).</li> </ul>"},{"location":"API/particula/particles/activity_strategies/#returns_2","title":"Returns","text":"<ul> <li><code>Union[float,</code> NDArray[np.float64]] - Activity of the particle, unitless.</li> </ul>"},{"location":"API/particula/particles/activity_strategies/#signature_5","title":"Signature","text":"<pre><code>def activity(\n    self, mass_concentration: Union[float, NDArray[np.float64]]\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/activity_strategies/#activitykappaparameter","title":"ActivityKappaParameter","text":"<p>Show source in activity_strategies.py:176</p> <p>Non-ideal activity strategy based on the kappa hygroscopic parameter.</p> <p>This strategy calculates the activity using the kappa hygroscopic parameter, a measure of hygroscopicity. The activity is determined by the species' mass concentration along with the hygroscopic parameter.</p>"},{"location":"API/particula/particles/activity_strategies/#arguments_4","title":"Arguments","text":"<ul> <li><code>kappa</code> - Kappa hygroscopic parameter, unitless.     Includes a value for water which is excluded in calculations.</li> <li><code>density</code> - Density of the species in kilograms per     cubic meter (kg/m^3).</li> <li><code>molar_mass</code> - Molar mass of the species in kilograms     per mole (kg/mol).</li> <li><code>water_index</code> - Index of water in the mass concentration array.</li> </ul>"},{"location":"API/particula/particles/activity_strategies/#signature_6","title":"Signature","text":"<pre><code>class ActivityKappaParameter(ActivityStrategy):\n    def __init__(\n        self,\n        kappa: NDArray[np.float64] = np.array([0.0], dtype=np.float64),\n        density: NDArray[np.float64] = np.array([0.0], dtype=np.float64),\n        molar_mass: NDArray[np.float64] = np.array([0.0], dtype=np.float64),\n        water_index: int = 0,\n    ): ...\n</code></pre>"},{"location":"API/particula/particles/activity_strategies/#see-also_3","title":"See also","text":"<ul> <li>ActivityStrategy</li> </ul>"},{"location":"API/particula/particles/activity_strategies/#activitykappaparameteractivity","title":"ActivityKappaParameter().activity","text":"<p>Show source in activity_strategies.py:205</p> <p>Calculate the activity of a species based on mass concentration.</p>"},{"location":"API/particula/particles/activity_strategies/#arguments_5","title":"Arguments","text":"<ul> <li><code>mass_concentration</code> - Concentration of the species in kilograms per cubic meter (kg/m^3).</li> </ul>"},{"location":"API/particula/particles/activity_strategies/#returns_3","title":"Returns","text":"<ul> <li><code>Union[float,</code> NDArray[np.float64]] - Activity of the particle, unitless.</li> </ul>"},{"location":"API/particula/particles/activity_strategies/#references_3","title":"References","text":"<p>Petters, M. D., &amp; Kreidenweis, S. M. (2007). A single parameter representation of hygroscopic growth and cloud condensation nucleus activity. Atmospheric Chemistry and Physics, 7(8), 1961-1971. DOI, see EQ 2 and 7.</p>"},{"location":"API/particula/particles/activity_strategies/#signature_7","title":"Signature","text":"<pre><code>def activity(\n    self, mass_concentration: Union[float, NDArray[np.float64]]\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/activity_strategies/#activitystrategy","title":"ActivityStrategy","text":"<p>Show source in activity_strategies.py:22</p> <p>Abstract base class for vapor pressure strategies.</p> <p>This interface is used for implementing strategies based on particle activity calculations, specifically for calculating vapor pressures.</p>"},{"location":"API/particula/particles/activity_strategies/#methods","title":"Methods","text":"<ul> <li><code>get_name</code> - Return the type of the activity strategy.</li> <li><code>activity</code> - Calculate the activity of a species.</li> <li><code>partial_pressure</code> - Calculate the partial pressure of a species in     the mixture.</li> </ul>"},{"location":"API/particula/particles/activity_strategies/#signature_8","title":"Signature","text":"<pre><code>class ActivityStrategy(ABC): ...\n</code></pre>"},{"location":"API/particula/particles/activity_strategies/#activitystrategyactivity","title":"ActivityStrategy().activity","text":"<p>Show source in activity_strategies.py:35</p> <p>Calculate the activity of a species based on its mass concentration.</p>"},{"location":"API/particula/particles/activity_strategies/#arguments_6","title":"Arguments","text":"<ul> <li><code>mass_concentration</code> - Concentration of the species [kg/m^3]</li> </ul>"},{"location":"API/particula/particles/activity_strategies/#returns_4","title":"Returns","text":"<p>float or NDArray[float]: Activity of the particle, unitless.</p>"},{"location":"API/particula/particles/activity_strategies/#signature_9","title":"Signature","text":"<pre><code>@abstractmethod\ndef activity(\n    self, mass_concentration: Union[float, NDArray[np.float64]]\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/activity_strategies/#activitystrategyget_name","title":"ActivityStrategy().get_name","text":"<p>Show source in activity_strategies.py:48</p> <p>Return the type of the activity strategy.</p>"},{"location":"API/particula/particles/activity_strategies/#signature_10","title":"Signature","text":"<pre><code>def get_name(self) -&gt; str: ...\n</code></pre>"},{"location":"API/particula/particles/activity_strategies/#activitystrategypartial_pressure","title":"ActivityStrategy().partial_pressure","text":"<p>Show source in activity_strategies.py:52</p> <p>Calculate the vapor pressure of species in the particle phase.</p> <p>This method computes the vapor pressure based on the species' activity considering its pure vapor pressure and mass concentration.</p>"},{"location":"API/particula/particles/activity_strategies/#arguments_7","title":"Arguments","text":"<ul> <li><code>pure_vapor_pressure</code> - Pure vapor pressure of the species in pascals (Pa).</li> <li><code>mass_concentration</code> - Concentration of the species in kilograms per cubic meter (kg/m^3).</li> </ul>"},{"location":"API/particula/particles/activity_strategies/#returns_5","title":"Returns","text":"<ul> <li><code>Union[float,</code> NDArray[np.float64]] - Vapor pressure of the particle in pascals (Pa).</li> </ul>"},{"location":"API/particula/particles/activity_strategies/#signature_11","title":"Signature","text":"<pre><code>def partial_pressure(\n    self,\n    pure_vapor_pressure: Union[float, NDArray[np.float64]],\n    mass_concentration: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/change_particle_representation/","title":"Change Particle Representation","text":"<p>Particula Index / Particula / Particles / Change Particle Representation</p> <p>Auto-generated documentation for particula.particles.change_particle_representation module.</p>"},{"location":"API/particula/particles/change_particle_representation/#get_particle_resolved_binned_radius","title":"get_particle_resolved_binned_radius","text":"<p>Show source in change_particle_representation.py:18</p> <p>Get the binning for the for particle radius. Used in the kernel calculation.</p> <p>If the kernel radius is not set, it will be calculated based on the particle radius.</p>"},{"location":"API/particula/particles/change_particle_representation/#arguments","title":"Arguments","text":"<ul> <li>particle : The particle for which the radius is to be binned.</li> <li>bin_radius : The radii for the particle [m].</li> <li>total_bins : The number of kernel bins for the particle     [dimensionless], if set, this will be used instead of     bins_per_radius_decade.</li> <li>bins_per_radius_decade : The number of kernel bins per decade     [dimensionless]. Not used if total_bins is set.</li> </ul>"},{"location":"API/particula/particles/change_particle_representation/#returns","title":"Returns","text":"<p>The kernel radius for the particle [m].</p>"},{"location":"API/particula/particles/change_particle_representation/#signature","title":"Signature","text":"<pre><code>def get_particle_resolved_binned_radius(\n    particle: ParticleRepresentation,\n    bin_radius: Optional[NDArray[np.float64]] = None,\n    total_bins: Optional[int] = None,\n    bins_per_radius_decade: int = 10,\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/change_particle_representation/#see-also","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/particles/change_particle_representation/#get_speciated_mass_representation_from_particle_resolved","title":"get_speciated_mass_representation_from_particle_resolved","text":"<p>Show source in change_particle_representation.py:77</p> <p>Converts a <code>ParticleResolvedSpeciatedMass</code> to a <code>SpeciatedMassMovingBin</code> by binning the mass of each species.</p>"},{"location":"API/particula/particles/change_particle_representation/#arguments_1","title":"Arguments","text":"<ul> <li>particle : The particle for which the mass is to be binned.</li> <li>bin_radius : The radii for the particle [m].</li> </ul>"},{"location":"API/particula/particles/change_particle_representation/#returns_1","title":"Returns","text":"<p>The particle representation with the binned mass.</p>"},{"location":"API/particula/particles/change_particle_representation/#signature_1","title":"Signature","text":"<pre><code>def get_speciated_mass_representation_from_particle_resolved(\n    particle: ParticleRepresentation, bin_radius: NDArray[np.float64]\n) -&gt; ParticleRepresentation: ...\n</code></pre>"},{"location":"API/particula/particles/change_particle_representation/#see-also_1","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/particles/distribution_builders/","title":"Distribution Builders","text":"<p>Particula Index / Particula / Particles / Distribution Builders</p> <p>Auto-generated documentation for particula.particles.distribution_builders module.</p>"},{"location":"API/particula/particles/distribution_builders/#massbasedmovingbinbuilder","title":"MassBasedMovingBinBuilder","text":"<p>Show source in distribution_builders.py:16</p> <p>Builds a MassBasedMovingBin instance.</p>"},{"location":"API/particula/particles/distribution_builders/#signature","title":"Signature","text":"<pre><code>class MassBasedMovingBinBuilder(BuilderABC):\n    def __init__(self) -&gt; None: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_builders/#see-also","title":"See also","text":"<ul> <li>BuilderABC</li> </ul>"},{"location":"API/particula/particles/distribution_builders/#massbasedmovingbinbuilderbuild","title":"MassBasedMovingBinBuilder().build","text":"<p>Show source in distribution_builders.py:23</p> <p>Builds a MassBasedMovingBin instance.</p>"},{"location":"API/particula/particles/distribution_builders/#signature_1","title":"Signature","text":"<pre><code>def build(self) -&gt; MassBasedMovingBin: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_builders/#see-also_1","title":"See also","text":"<ul> <li>MassBasedMovingBin</li> </ul>"},{"location":"API/particula/particles/distribution_builders/#particleresolvedspeciatedmassbuilder","title":"ParticleResolvedSpeciatedMassBuilder","text":"<p>Show source in distribution_builders.py:52</p> <p>Builds a ParticleResolvedSpeciatedMass instance.</p>"},{"location":"API/particula/particles/distribution_builders/#signature_2","title":"Signature","text":"<pre><code>class ParticleResolvedSpeciatedMassBuilder(BuilderABC):\n    def __init__(self) -&gt; None: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_builders/#see-also_2","title":"See also","text":"<ul> <li>BuilderABC</li> </ul>"},{"location":"API/particula/particles/distribution_builders/#particleresolvedspeciatedmassbuilderbuild","title":"ParticleResolvedSpeciatedMassBuilder().build","text":"<p>Show source in distribution_builders.py:59</p>"},{"location":"API/particula/particles/distribution_builders/#signature_3","title":"Signature","text":"<pre><code>def build(self) -&gt; ParticleResolvedSpeciatedMass: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_builders/#see-also_3","title":"See also","text":"<ul> <li>ParticleResolvedSpeciatedMass</li> </ul>"},{"location":"API/particula/particles/distribution_builders/#radiibasedmovingbinbuilder","title":"RadiiBasedMovingBinBuilder","text":"<p>Show source in distribution_builders.py:28</p> <p>Builds a RadiiBasedMovingBin instance.</p>"},{"location":"API/particula/particles/distribution_builders/#signature_4","title":"Signature","text":"<pre><code>class RadiiBasedMovingBinBuilder(BuilderABC):\n    def __init__(self) -&gt; None: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_builders/#see-also_4","title":"See also","text":"<ul> <li>BuilderABC</li> </ul>"},{"location":"API/particula/particles/distribution_builders/#radiibasedmovingbinbuilderbuild","title":"RadiiBasedMovingBinBuilder().build","text":"<p>Show source in distribution_builders.py:35</p> <p>Builds a RadiiBasedMovingBin instance.</p>"},{"location":"API/particula/particles/distribution_builders/#signature_5","title":"Signature","text":"<pre><code>def build(self) -&gt; RadiiBasedMovingBin: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_builders/#see-also_5","title":"See also","text":"<ul> <li>RadiiBasedMovingBin</li> </ul>"},{"location":"API/particula/particles/distribution_builders/#speciatedmassmovingbinbuilder","title":"SpeciatedMassMovingBinBuilder","text":"<p>Show source in distribution_builders.py:40</p> <p>Builds a SpeciatedMassMovingBin instance.</p>"},{"location":"API/particula/particles/distribution_builders/#signature_6","title":"Signature","text":"<pre><code>class SpeciatedMassMovingBinBuilder(BuilderABC):\n    def __init__(self) -&gt; None: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_builders/#see-also_6","title":"See also","text":"<ul> <li>BuilderABC</li> </ul>"},{"location":"API/particula/particles/distribution_builders/#speciatedmassmovingbinbuilderbuild","title":"SpeciatedMassMovingBinBuilder().build","text":"<p>Show source in distribution_builders.py:47</p> <p>Builds a SpeciatedMassMovingBin instance.</p>"},{"location":"API/particula/particles/distribution_builders/#signature_7","title":"Signature","text":"<pre><code>def build(self) -&gt; SpeciatedMassMovingBin: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_builders/#see-also_7","title":"See also","text":"<ul> <li>SpeciatedMassMovingBin</li> </ul>"},{"location":"API/particula/particles/distribution_factories/","title":"Distribution Factories","text":"<p>Particula Index / Particula / Particles / Distribution Factories</p> <p>Auto-generated documentation for particula.particles.distribution_factories module.</p>"},{"location":"API/particula/particles/distribution_factories/#distributionfactory","title":"DistributionFactory","text":"<p>Show source in distribution_factories.py:19</p> <p>Factory class to create distribution strategy from builders.</p> <p>Used for calculating particle distributions based on the specified representation type.</p>"},{"location":"API/particula/particles/distribution_factories/#methods","title":"Methods","text":"<ul> <li><code>get_builders()</code> - Returns the mapping of strategy types to builder instances.</li> <li><code>get_strategy(strategy_type,</code> parameters) - Gets the strategy instance for the specified strategy type.<ul> <li><code>strategy_type</code> - Type of distribution strategy to use, can be 'mass_based_moving_bin', 'radii_based_moving_bin', 'speciated_mass_moving_bin', 'particle_resolved_speciated_mass'. parameters(Dict[str, Any], optional): Parameters required for the builder, dependent on the chosen strategy type.<ul> <li><code>mass_based_moving_bin</code> - None</li> <li><code>radii_based_moving_bin</code> - None</li> <li><code>speciated_mass_moving_bin</code> - None</li> <li><code>particle_resolved_speciated_mass</code> - None</li> </ul> </li> </ul> </li> </ul>"},{"location":"API/particula/particles/distribution_factories/#returns","title":"Returns","text":"<ul> <li><code>DistributionStrategy</code> - An instance of the specified DistributionStrategy.</li> </ul>"},{"location":"API/particula/particles/distribution_factories/#raises","title":"Raises","text":"<ul> <li><code>ValueError</code> - If an unknown strategy type is provided.</li> <li><code>ValueError</code> - If any required key is missing during check_keys or pre_build_check, or if trying to set an invalid parameter.</li> </ul>"},{"location":"API/particula/particles/distribution_factories/#signature","title":"Signature","text":"<pre><code>class DistributionFactory(\n    StrategyFactoryABC[\n        Union[\n            MassBasedMovingBinBuilder,\n            RadiiBasedMovingBinBuilder,\n            SpeciatedMassMovingBinBuilder,\n            ParticleResolvedSpeciatedMassBuilder,\n        ],\n        Union[\n            MassBasedMovingBin,\n            RadiiBasedMovingBin,\n            SpeciatedMassMovingBin,\n            ParticleResolvedSpeciatedMass,\n        ],\n    ]\n): ...\n</code></pre>"},{"location":"API/particula/particles/distribution_factories/#see-also","title":"See also","text":"<ul> <li>MassBasedMovingBinBuilder</li> <li>MassBasedMovingBin</li> <li>ParticleResolvedSpeciatedMassBuilder</li> <li>ParticleResolvedSpeciatedMass</li> <li>RadiiBasedMovingBinBuilder</li> <li>RadiiBasedMovingBin</li> <li>SpeciatedMassMovingBinBuilder</li> <li>SpeciatedMassMovingBin</li> </ul>"},{"location":"API/particula/particles/distribution_factories/#distributionfactoryget_builders","title":"DistributionFactory().get_builders","text":"<p>Show source in distribution_factories.py:65</p> <p>Returns the mapping of strategy types to builder instances.</p>"},{"location":"API/particula/particles/distribution_factories/#returns_1","title":"Returns","text":"<ul> <li><code>Dict[str,</code> BuilderABC] - Mapping of strategy types to builder instances.<ul> <li><code>'mass_based_moving_bin'</code> - MassBasedMovingBinBuilder</li> <li><code>'radii_based_moving_bin'</code> - RadiiBasedMovingBinBuilder</li> <li><code>'speciated_mass_moving_bin'</code> - SpeciatedMassMovingBinBuilder</li> </ul> </li> </ul>"},{"location":"API/particula/particles/distribution_factories/#signature_1","title":"Signature","text":"<pre><code>def get_builders(self): ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/","title":"Distribution Strategies","text":"<p>Particula Index / Particula / Particles / Distribution Strategies</p> <p>Auto-generated documentation for particula.particles.distribution_strategies module.</p>"},{"location":"API/particula/particles/distribution_strategies/#distributionstrategy","title":"DistributionStrategy","text":"<p>Show source in distribution_strategies.py:13</p> <p>Abstract base class for particle strategy, defining the common interface for mass, radius, and total mass calculations for different particle representations.</p>"},{"location":"API/particula/particles/distribution_strategies/#methods","title":"Methods","text":"<ul> <li><code>get_name</code> - Returns the type of the distribution strategy.</li> <li><code>get_mass</code> - Calculates the mass of particles.</li> <li><code>get_radius</code> - Calculates the radius of particles.</li> <li><code>get_total_mass</code> - Calculates the total mass of particles.</li> <li><code>add_mass</code> - Adds mass to the distribution of particles.</li> </ul>"},{"location":"API/particula/particles/distribution_strategies/#signature","title":"Signature","text":"<pre><code>class DistributionStrategy(ABC): ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#distributionstrategyadd_concentration","title":"DistributionStrategy().add_concentration","text":"<p>Show source in distribution_strategies.py:120</p> <p>Adds concentration to the distribution of particles.</p>"},{"location":"API/particula/particles/distribution_strategies/#arguments","title":"Arguments","text":"<ul> <li><code>distribution</code> - The distribution of particle sizes or masses.</li> <li><code>concentration</code> - The concentration of each particle size or mass in     the distribution.</li> <li><code>added_distribution</code> - The distribution to be added.</li> <li><code>added_concentration</code> - The concentration to be added.</li> </ul>"},{"location":"API/particula/particles/distribution_strategies/#returns","title":"Returns","text":"<ul> <li><code>(distribution,</code> concentration) - The new distribution array and the     new concentration array.</li> </ul>"},{"location":"API/particula/particles/distribution_strategies/#signature_1","title":"Signature","text":"<pre><code>@abstractmethod\ndef add_concentration(\n    self,\n    distribution: NDArray[np.float64],\n    concentration: NDArray[np.float64],\n    added_distribution: NDArray[np.float64],\n    added_concentration: NDArray[np.float64],\n) -&gt; tuple[NDArray[np.float64], NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#distributionstrategyadd_mass","title":"DistributionStrategy().add_mass","text":"<p>Show source in distribution_strategies.py:98</p> <p>Adds mass to the distribution of particles.</p>"},{"location":"API/particula/particles/distribution_strategies/#arguments_1","title":"Arguments","text":"<ul> <li><code>distribution</code> - The distribution of particle sizes or masses.</li> <li><code>concentration</code> - The concentration of each particle size or mass in     the distribution.</li> <li><code>density</code> - The density of the particles.</li> <li><code>added_mass</code> - The mass to be added per distribution bin.</li> </ul>"},{"location":"API/particula/particles/distribution_strategies/#returns_1","title":"Returns","text":"<ul> <li><code>(distribution,</code> concentration) - The new distribution array and the     new concentration array.</li> </ul>"},{"location":"API/particula/particles/distribution_strategies/#signature_2","title":"Signature","text":"<pre><code>@abstractmethod\ndef add_mass(\n    self,\n    distribution: NDArray[np.float64],\n    concentration: NDArray[np.float64],\n    density: NDArray[np.float64],\n    added_mass: NDArray[np.float64],\n) -&gt; tuple[NDArray[np.float64], NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#distributionstrategycollide_pairs","title":"DistributionStrategy().collide_pairs","text":"<p>Show source in distribution_strategies.py:142</p> <p>Collides index pairs.</p>"},{"location":"API/particula/particles/distribution_strategies/#arguments_2","title":"Arguments","text":"<ul> <li><code>distribution</code> - The distribution of particle sizes or masses.</li> <li><code>concentration</code> - The concentration of each particle size or mass in     the distribution.</li> <li><code>density</code> - The density of the particles.</li> <li><code>indices</code> - The indices of the particles to collide.</li> </ul>"},{"location":"API/particula/particles/distribution_strategies/#returns_2","title":"Returns","text":"<ul> <li><code>(distribution,</code> concentration) - The new distribution array and the     new concentration array.</li> </ul>"},{"location":"API/particula/particles/distribution_strategies/#signature_3","title":"Signature","text":"<pre><code>@abstractmethod\ndef collide_pairs(\n    self,\n    distribution: NDArray[np.float64],\n    concentration: NDArray[np.float64],\n    density: NDArray[np.float64],\n    indices: NDArray[np.int64],\n) -&gt; tuple[NDArray[np.float64], NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#distributionstrategyget_mass","title":"DistributionStrategy().get_mass","text":"<p>Show source in distribution_strategies.py:45</p> <p>Calculates the mass of the particles (or bin).</p>"},{"location":"API/particula/particles/distribution_strategies/#arguments_3","title":"Arguments","text":"<ul> <li><code>distribution</code> - The distribution of particle sizes or masses.</li> <li><code>density</code> - The density of the particles.</li> </ul>"},{"location":"API/particula/particles/distribution_strategies/#returns_3","title":"Returns","text":"<ul> <li><code>NDArray[np.float64]</code> - The mass of the particles.</li> </ul>"},{"location":"API/particula/particles/distribution_strategies/#signature_4","title":"Signature","text":"<pre><code>def get_mass(\n    self, distribution: NDArray[np.float64], density: NDArray[np.float64]\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#distributionstrategyget_name","title":"DistributionStrategy().get_name","text":"<p>Show source in distribution_strategies.py:27</p> <p>Return the type of the distribution strategy.</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_5","title":"Signature","text":"<pre><code>def get_name(self) -&gt; str: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#distributionstrategyget_radius","title":"DistributionStrategy().get_radius","text":"<p>Show source in distribution_strategies.py:84</p> <p>Calculates the radius of the particles.</p>"},{"location":"API/particula/particles/distribution_strategies/#arguments_4","title":"Arguments","text":"<ul> <li><code>distribution</code> - The distribution of particle sizes or masses.</li> <li><code>density</code> - The density of the particles.</li> </ul>"},{"location":"API/particula/particles/distribution_strategies/#returns_4","title":"Returns","text":"<ul> <li><code>NDArray[np.float64]</code> - The radius of the particles.</li> </ul>"},{"location":"API/particula/particles/distribution_strategies/#signature_6","title":"Signature","text":"<pre><code>@abstractmethod\ndef get_radius(\n    self, distribution: NDArray[np.float64], density: NDArray[np.float64]\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#distributionstrategyget_species_mass","title":"DistributionStrategy().get_species_mass","text":"<p>Show source in distribution_strategies.py:31</p> <p>The mass per species in the particles (or bin).</p>"},{"location":"API/particula/particles/distribution_strategies/#arguments_5","title":"Arguments","text":"<ul> <li><code>distribution</code> - The distribution of particle sizes or masses.</li> <li><code>density</code> - The density of the particles.</li> </ul>"},{"location":"API/particula/particles/distribution_strategies/#returns_5","title":"Returns","text":"<ul> <li><code>NDArray[np.float64]</code> - The mass of the particles</li> </ul>"},{"location":"API/particula/particles/distribution_strategies/#signature_7","title":"Signature","text":"<pre><code>@abstractmethod\ndef get_species_mass(\n    self, distribution: NDArray[np.float64], density: NDArray[np.float64]\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#distributionstrategyget_total_mass","title":"DistributionStrategy().get_total_mass","text":"<p>Show source in distribution_strategies.py:63</p> <p>Calculates the total mass of all particles (or bin).</p>"},{"location":"API/particula/particles/distribution_strategies/#arguments_6","title":"Arguments","text":"<ul> <li><code>distribution</code> - The distribution of particle sizes or masses.</li> <li><code>concentration</code> - The concentration of each particle size or mass in the distribution.</li> <li><code>density</code> - The density of the particles.</li> </ul>"},{"location":"API/particula/particles/distribution_strategies/#returns_6","title":"Returns","text":"<ul> <li><code>np.float64</code> - The total mass of the particles.</li> </ul>"},{"location":"API/particula/particles/distribution_strategies/#signature_8","title":"Signature","text":"<pre><code>def get_total_mass(\n    self,\n    distribution: NDArray[np.float64],\n    concentration: NDArray[np.float64],\n    density: NDArray[np.float64],\n) -&gt; np.float64: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#massbasedmovingbin","title":"MassBasedMovingBin","text":"<p>Show source in distribution_strategies.py:165</p> <p>A strategy for particles represented by their mass distribution.</p> <p>This strategy calculates particle mass, radius, and total mass based on the particle's mass, number concentration, and density. It also moves the bins when adding mass to the distribution.</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_9","title":"Signature","text":"<pre><code>class MassBasedMovingBin(DistributionStrategy): ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#see-also","title":"See also","text":"<ul> <li>DistributionStrategy</li> </ul>"},{"location":"API/particula/particles/distribution_strategies/#massbasedmovingbinadd_concentration","title":"MassBasedMovingBin().add_concentration","text":"<p>Show source in distribution_strategies.py:197</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_10","title":"Signature","text":"<pre><code>def add_concentration(\n    self,\n    distribution: NDArray[np.float64],\n    concentration: NDArray[np.float64],\n    added_distribution: NDArray[np.float64],\n    added_concentration: NDArray[np.float64],\n) -&gt; tuple[NDArray[np.float64], NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#massbasedmovingbinadd_mass","title":"MassBasedMovingBin().add_mass","text":"<p>Show source in distribution_strategies.py:187</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_11","title":"Signature","text":"<pre><code>def add_mass(\n    self,\n    distribution: NDArray[np.float64],\n    concentration: NDArray[np.float64],\n    density: NDArray[np.float64],\n    added_mass: NDArray[np.float64],\n) -&gt; tuple[NDArray[np.float64], NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#massbasedmovingbincollide_pairs","title":"MassBasedMovingBin().collide_pairs","text":"<p>Show source in distribution_strategies.py:233</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_12","title":"Signature","text":"<pre><code>def collide_pairs(\n    self,\n    distribution: NDArray[np.float64],\n    concentration: NDArray[np.float64],\n    density: NDArray[np.float64],\n    indices: NDArray[np.int64],\n) -&gt; tuple[NDArray[np.float64], NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#massbasedmovingbinget_radius","title":"MassBasedMovingBin().get_radius","text":"<p>Show source in distribution_strategies.py:179</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_13","title":"Signature","text":"<pre><code>def get_radius(\n    self, distribution: NDArray[np.float64], density: NDArray[np.float64]\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#massbasedmovingbinget_species_mass","title":"MassBasedMovingBin().get_species_mass","text":"<p>Show source in distribution_strategies.py:173</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_14","title":"Signature","text":"<pre><code>def get_species_mass(\n    self, distribution: NDArray[np.float64], density: NDArray[np.float64]\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#particleresolvedspeciatedmass","title":"ParticleResolvedSpeciatedMass","text":"<p>Show source in distribution_strategies.py:431</p> <p>Strategy for resolved particles via speciated mass.</p> <p>Strategy for resolved particles with speciated mass. Particles may have different densities and their mass is distributed across different species. This strategy calculates mass, radius, and total mass based on the species at each mass, density, the particle concentration.</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_15","title":"Signature","text":"<pre><code>class ParticleResolvedSpeciatedMass(DistributionStrategy): ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#see-also_1","title":"See also","text":"<ul> <li>DistributionStrategy</li> </ul>"},{"location":"API/particula/particles/distribution_strategies/#particleresolvedspeciatedmassadd_concentration","title":"ParticleResolvedSpeciatedMass().add_concentration","text":"<p>Show source in distribution_strategies.py:484</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_16","title":"Signature","text":"<pre><code>def add_concentration(\n    self,\n    distribution: NDArray[np.float64],\n    concentration: NDArray[np.float64],\n    added_distribution: NDArray[np.float64],\n    added_concentration: NDArray[np.float64],\n) -&gt; tuple[NDArray[np.float64], NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#particleresolvedspeciatedmassadd_mass","title":"ParticleResolvedSpeciatedMass().add_mass","text":"<p>Show source in distribution_strategies.py:456</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_17","title":"Signature","text":"<pre><code>def add_mass(\n    self,\n    distribution: NDArray[np.float64],\n    concentration: NDArray[np.float64],\n    density: NDArray[np.float64],\n    added_mass: NDArray[np.float64],\n) -&gt; tuple[NDArray[np.float64], NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#particleresolvedspeciatedmasscollide_pairs","title":"ParticleResolvedSpeciatedMass().collide_pairs","text":"<p>Show source in distribution_strategies.py:542</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_18","title":"Signature","text":"<pre><code>def collide_pairs(\n    self,\n    distribution: NDArray[np.float64],\n    concentration: NDArray[np.float64],\n    density: NDArray[np.float64],\n    indices: NDArray[np.int64],\n) -&gt; tuple[NDArray[np.float64], NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#particleresolvedspeciatedmassget_radius","title":"ParticleResolvedSpeciatedMass().get_radius","text":"<p>Show source in distribution_strategies.py:446</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_19","title":"Signature","text":"<pre><code>def get_radius(\n    self, distribution: NDArray[np.float64], density: NDArray[np.float64]\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#particleresolvedspeciatedmassget_species_mass","title":"ParticleResolvedSpeciatedMass().get_species_mass","text":"<p>Show source in distribution_strategies.py:441</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_20","title":"Signature","text":"<pre><code>def get_species_mass(\n    self, distribution: NDArray[np.float64], density: NDArray[np.float64]\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#radiibasedmovingbin","title":"RadiiBasedMovingBin","text":"<p>Show source in distribution_strategies.py:248</p> <p>A strategy for particles represented by their radius.</p> <p>This strategy calculates particle mass, radius, and total mass based on the particle's radius, number concentration, and density.</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_21","title":"Signature","text":"<pre><code>class RadiiBasedMovingBin(DistributionStrategy): ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#see-also_2","title":"See also","text":"<ul> <li>DistributionStrategy</li> </ul>"},{"location":"API/particula/particles/distribution_strategies/#radiibasedmovingbinadd_concentration","title":"RadiiBasedMovingBin().add_concentration","text":"<p>Show source in distribution_strategies.py:287</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_22","title":"Signature","text":"<pre><code>def add_concentration(\n    self,\n    distribution: NDArray[np.float64],\n    concentration: NDArray[np.float64],\n    added_distribution: NDArray[np.float64],\n    added_concentration: NDArray[np.float64],\n) -&gt; tuple[NDArray[np.float64], NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#radiibasedmovingbinadd_mass","title":"RadiiBasedMovingBin().add_mass","text":"<p>Show source in distribution_strategies.py:269</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_23","title":"Signature","text":"<pre><code>def add_mass(\n    self,\n    distribution: NDArray[np.float64],\n    concentration: NDArray[np.float64],\n    density: NDArray[np.float64],\n    added_mass: NDArray[np.float64],\n) -&gt; tuple[NDArray[np.float64], NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#radiibasedmovingbincollide_pairs","title":"RadiiBasedMovingBin().collide_pairs","text":"<p>Show source in distribution_strategies.py:322</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_24","title":"Signature","text":"<pre><code>def collide_pairs(\n    self,\n    distribution: NDArray[np.float64],\n    concentration: NDArray[np.float64],\n    density: NDArray[np.float64],\n    indices: NDArray[np.int64],\n) -&gt; tuple[NDArray[np.float64], NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#radiibasedmovingbinget_radius","title":"RadiiBasedMovingBin().get_radius","text":"<p>Show source in distribution_strategies.py:262</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_25","title":"Signature","text":"<pre><code>def get_radius(\n    self, distribution: NDArray[np.float64], density: NDArray[np.float64]\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#radiibasedmovingbinget_species_mass","title":"RadiiBasedMovingBin().get_species_mass","text":"<p>Show source in distribution_strategies.py:255</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_26","title":"Signature","text":"<pre><code>def get_species_mass(\n    self, distribution: NDArray[np.float64], density: NDArray[np.float64]\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#speciatedmassmovingbin","title":"SpeciatedMassMovingBin","text":"<p>Show source in distribution_strategies.py:337</p> <p>Strategy for particles with speciated mass distribution.</p> <p>Strategy for particles with speciated mass distribution. Some particles may have different densities and their mass is distributed across different species. This strategy calculates mass, radius, and total mass based on the species at each mass, density, the particle concentration.</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_27","title":"Signature","text":"<pre><code>class SpeciatedMassMovingBin(DistributionStrategy): ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#see-also_3","title":"See also","text":"<ul> <li>DistributionStrategy</li> </ul>"},{"location":"API/particula/particles/distribution_strategies/#speciatedmassmovingbinadd_concentration","title":"SpeciatedMassMovingBin().add_concentration","text":"<p>Show source in distribution_strategies.py:381</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_28","title":"Signature","text":"<pre><code>def add_concentration(\n    self,\n    distribution: NDArray[np.float64],\n    concentration: NDArray[np.float64],\n    added_distribution: NDArray[np.float64],\n    added_concentration: NDArray[np.float64],\n) -&gt; tuple[NDArray[np.float64], NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#speciatedmassmovingbinadd_mass","title":"SpeciatedMassMovingBin().add_mass","text":"<p>Show source in distribution_strategies.py:359</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_29","title":"Signature","text":"<pre><code>def add_mass(\n    self,\n    distribution: NDArray[np.float64],\n    concentration: NDArray[np.float64],\n    density: NDArray[np.float64],\n    added_mass: NDArray[np.float64],\n) -&gt; tuple[NDArray[np.float64], NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#speciatedmassmovingbincollide_pairs","title":"SpeciatedMassMovingBin().collide_pairs","text":"<p>Show source in distribution_strategies.py:416</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_30","title":"Signature","text":"<pre><code>def collide_pairs(\n    self,\n    distribution: NDArray[np.float64],\n    concentration: NDArray[np.float64],\n    density: NDArray[np.float64],\n    indices: NDArray[np.int64],\n) -&gt; tuple[NDArray[np.float64], NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#speciatedmassmovingbinget_radius","title":"SpeciatedMassMovingBin().get_radius","text":"<p>Show source in distribution_strategies.py:352</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_31","title":"Signature","text":"<pre><code>def get_radius(\n    self, distribution: NDArray[np.float64], density: NDArray[np.float64]\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/distribution_strategies/#speciatedmassmovingbinget_species_mass","title":"SpeciatedMassMovingBin().get_species_mass","text":"<p>Show source in distribution_strategies.py:347</p>"},{"location":"API/particula/particles/distribution_strategies/#signature_32","title":"Signature","text":"<pre><code>def get_species_mass(\n    self, distribution: NDArray[np.float64], density: NDArray[np.float64]\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/representation/","title":"Representation","text":"<p>Particula Index / Particula / Particles / Representation</p> <p>Auto-generated documentation for particula.particles.representation module.</p>"},{"location":"API/particula/particles/representation/#particlerepresentation","title":"ParticleRepresentation","text":"<p>Show source in representation.py:20</p> <p>Everything needed to represent a particle or a collection of particles.</p> <p>Represents a particle or a collection of particles, encapsulating the strategy for calculating mass, radius, and total mass based on a specified particle distribution, density, and concentration. This class allows for flexibility in representing particles.</p>"},{"location":"API/particula/particles/representation/#attributes","title":"Attributes","text":"<ul> <li>strategy : The computation strategy for particle representations.</li> <li>activity : The activity strategy for the partial pressure     calculations.</li> <li>surface : The surface strategy for surface tension and Kelvin effect.</li> <li>distribution : The distribution data for the particles, which could     represent sizes, masses, or another relevant metric.</li> <li>density : The density of the material from which the particles are     made.</li> <li>concentration : The concentration of particles within the     distribution.</li> <li>charge : The charge on each particle.</li> <li>volume : The air volume for simulation of particles in the air,     default is 1 m^3. This is only used in ParticleResolved Strategies.</li> </ul>"},{"location":"API/particula/particles/representation/#signature","title":"Signature","text":"<pre><code>class ParticleRepresentation:\n    def __init__(\n        self,\n        strategy: DistributionStrategy,\n        activity: ActivityStrategy,\n        surface: SurfaceStrategy,\n        distribution: NDArray[np.float64],\n        density: NDArray[np.float64],\n        concentration: NDArray[np.float64],\n        charge: NDArray[np.float64],\n        volume: float = 1,\n    ): ...\n</code></pre>"},{"location":"API/particula/particles/representation/#see-also","title":"See also","text":"<ul> <li>ActivityStrategy</li> <li>DistributionStrategy</li> <li>SurfaceStrategy</li> </ul>"},{"location":"API/particula/particles/representation/#particlerepresentationstr","title":"ParticleRepresentation().str","text":"<p>Show source in representation.py:64</p> <p>Returns a string representation of the particle representation.</p>"},{"location":"API/particula/particles/representation/#returns","title":"Returns","text":"<ul> <li>str : A string representation of the particle representation.</li> </ul>"},{"location":"API/particula/particles/representation/#examples","title":"Examples","text":"Get String Representation<pre><code>str_rep = str(particle_representation)\nprint(str_rep)\n</code></pre>"},{"location":"API/particula/particles/representation/#signature_1","title":"Signature","text":"<pre><code>def __str__(self) -&gt; str: ...\n</code></pre>"},{"location":"API/particula/particles/representation/#particlerepresentationadd_concentration","title":"ParticleRepresentation().add_concentration","text":"<p>Show source in representation.py:416</p> <p>Adds concentration to the particle distribution.</p>"},{"location":"API/particula/particles/representation/#arguments","title":"Arguments","text":"<ul> <li>added_concentration : The concentration to be   added per distribution bin.</li> </ul>"},{"location":"API/particula/particles/representation/#examples_1","title":"Examples","text":"Add Concentration<pre><code>particle_representation.add_concentration(added_concentration)\n</code></pre>"},{"location":"API/particula/particles/representation/#signature_2","title":"Signature","text":"<pre><code>def add_concentration(\n    self,\n    added_concentration: NDArray[np.float64],\n    added_distribution: Optional[NDArray[np.float64]] = None,\n) -&gt; None: ...\n</code></pre>"},{"location":"API/particula/particles/representation/#particlerepresentationadd_mass","title":"ParticleRepresentation().add_mass","text":"<p>Show source in representation.py:396</p> <p>Adds mass to the particle distribution, and updates parameters.</p>"},{"location":"API/particula/particles/representation/#arguments_1","title":"Arguments","text":"<ul> <li>added_mass : The mass to be added per   distribution bin.</li> </ul>"},{"location":"API/particula/particles/representation/#examples_2","title":"Examples","text":"Add Mass<pre><code>particle_representation.add_mass(added_mass)\n</code></pre>"},{"location":"API/particula/particles/representation/#signature_3","title":"Signature","text":"<pre><code>def add_mass(self, added_mass: NDArray[np.float64]) -&gt; None: ...\n</code></pre>"},{"location":"API/particula/particles/representation/#particlerepresentationcollide_pairs","title":"ParticleRepresentation().collide_pairs","text":"<p>Show source in representation.py:447</p> <p>Collide pairs of indices, used for ParticleResolved Strategies.</p>"},{"location":"API/particula/particles/representation/#arguments_2","title":"Arguments","text":"<ul> <li>indices : The indices to collide.</li> </ul>"},{"location":"API/particula/particles/representation/#examples_3","title":"Examples","text":"Collide Pairs<pre><code>particle_representation.collide_pairs(indices)\n</code></pre>"},{"location":"API/particula/particles/representation/#signature_4","title":"Signature","text":"<pre><code>def collide_pairs(self, indices: NDArray[np.int64]) -&gt; None: ...\n</code></pre>"},{"location":"API/particula/particles/representation/#particlerepresentationget_activity","title":"ParticleRepresentation().get_activity","text":"<p>Show source in representation.py:119</p> <p>Returns the activity strategy used for partial pressure calculations.</p>"},{"location":"API/particula/particles/representation/#arguments_3","title":"Arguments","text":"<ul> <li>clone : If True, then return a deepcopy of the activity strategy.</li> </ul>"},{"location":"API/particula/particles/representation/#returns_1","title":"Returns","text":"<ul> <li>The activity strategy used for partial pressure calculations.</li> </ul>"},{"location":"API/particula/particles/representation/#examples_4","title":"Examples","text":"Get Activity Strategy<pre><code>activity = particle_representation.get_activity()\n</code></pre>"},{"location":"API/particula/particles/representation/#signature_5","title":"Signature","text":"<pre><code>def get_activity(self, clone: bool = False) -&gt; ActivityStrategy: ...\n</code></pre>"},{"location":"API/particula/particles/representation/#see-also_1","title":"See also","text":"<ul> <li>ActivityStrategy</li> </ul>"},{"location":"API/particula/particles/representation/#particlerepresentationget_activity_name","title":"ParticleRepresentation().get_activity_name","text":"<p>Show source in representation.py:138</p> <p>Returns the name of the activity strategy used for partial pressure calculations.</p>"},{"location":"API/particula/particles/representation/#returns_2","title":"Returns","text":"<ul> <li>The name of the activity strategy used for partial pressure   calculations.</li> </ul>"},{"location":"API/particula/particles/representation/#examples_5","title":"Examples","text":"Get Activity Strategy Name<pre><code>activity_name = particle_representation.get_activity_name()\nprint(activity_name)\n</code></pre>"},{"location":"API/particula/particles/representation/#signature_6","title":"Signature","text":"<pre><code>def get_activity_name(self) -&gt; str: ...\n</code></pre>"},{"location":"API/particula/particles/representation/#particlerepresentationget_charge","title":"ParticleRepresentation().get_charge","text":"<p>Show source in representation.py:266</p> <p>Returns the charge per particle.</p>"},{"location":"API/particula/particles/representation/#arguments_4","title":"Arguments","text":"<ul> <li>clone : If True, then return a copy of the charge array.</li> </ul>"},{"location":"API/particula/particles/representation/#returns_3","title":"Returns","text":"<ul> <li>The charge of the particles.</li> </ul>"},{"location":"API/particula/particles/representation/#examples_6","title":"Examples","text":"Get Charge Array<pre><code>charge = particle_representation.get_charge()\n</code></pre>"},{"location":"API/particula/particles/representation/#signature_7","title":"Signature","text":"<pre><code>def get_charge(self, clone: bool = False) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/representation/#particlerepresentationget_concentration","title":"ParticleRepresentation().get_concentration","text":"<p>Show source in representation.py:225</p> <p>Returns the volume concentration of the particles.</p> <p>For ParticleResolved Strategies, the concentration is the number of particles per self.volume to get concentration/m^3. For other Strategies, the concentration is the already per 1/m^3.</p>"},{"location":"API/particula/particles/representation/#arguments_5","title":"Arguments","text":"<ul> <li>clone : If True, then return a copy of the concentration array.</li> </ul>"},{"location":"API/particula/particles/representation/#returns_4","title":"Returns","text":"<ul> <li>The concentration of the particles.</li> </ul>"},{"location":"API/particula/particles/representation/#examples_7","title":"Examples","text":"Get Concentration Array<pre><code>concentration = particle_representation.get_concentration()\n</code></pre>"},{"location":"API/particula/particles/representation/#signature_8","title":"Signature","text":"<pre><code>def get_concentration(self, clone: bool = False) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/representation/#particlerepresentationget_density","title":"ParticleRepresentation().get_density","text":"<p>Show source in representation.py:207</p> <p>Returns the density of the particles.</p>"},{"location":"API/particula/particles/representation/#arguments_6","title":"Arguments","text":"<ul> <li>clone : If True, then return a copy of the density array.</li> </ul>"},{"location":"API/particula/particles/representation/#returns_5","title":"Returns","text":"<ul> <li>The density of the particles.</li> </ul>"},{"location":"API/particula/particles/representation/#examples_8","title":"Examples","text":"Get Density Array<pre><code>density = particle_representation.get_density()\n</code></pre>"},{"location":"API/particula/particles/representation/#signature_9","title":"Signature","text":"<pre><code>def get_density(self, clone: bool = False) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/representation/#particlerepresentationget_distribution","title":"ParticleRepresentation().get_distribution","text":"<p>Show source in representation.py:189</p> <p>Returns the distribution of the particles.</p>"},{"location":"API/particula/particles/representation/#arguments_7","title":"Arguments","text":"<ul> <li>clone : If True, then return a copy of the distribution array.</li> </ul>"},{"location":"API/particula/particles/representation/#returns_6","title":"Returns","text":"<ul> <li>The distribution of the particles.</li> </ul>"},{"location":"API/particula/particles/representation/#examples_9","title":"Examples","text":"Get Distribution Array<pre><code>distribution = particle_representation.get_distribution()\n</code></pre>"},{"location":"API/particula/particles/representation/#signature_10","title":"Signature","text":"<pre><code>def get_distribution(self, clone: bool = False) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/representation/#particlerepresentationget_mass","title":"ParticleRepresentation().get_mass","text":"<p>Show source in representation.py:322</p> <p>Returns the mass of the particles as calculated by the strategy.</p>"},{"location":"API/particula/particles/representation/#arguments_8","title":"Arguments","text":"<ul> <li>clone : If True, then return a copy of the mass array.</li> </ul>"},{"location":"API/particula/particles/representation/#returns_7","title":"Returns","text":"<ul> <li>The mass of the particles.</li> </ul>"},{"location":"API/particula/particles/representation/#examples_10","title":"Examples","text":"Get Mass<pre><code>mass = particle_representation.get_mass()\n</code></pre>"},{"location":"API/particula/particles/representation/#signature_11","title":"Signature","text":"<pre><code>def get_mass(self, clone: bool = False) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/representation/#particlerepresentationget_mass_concentration","title":"ParticleRepresentation().get_mass_concentration","text":"<p>Show source in representation.py:342</p> <p>Returns the total mass / volume simulated.</p> <p>The mass concentration is as calculated by the strategy, taking into account the distribution and concentration.</p>"},{"location":"API/particula/particles/representation/#arguments_9","title":"Arguments","text":"<ul> <li>clone : If True, then return a copy of the mass concentration.</li> </ul>"},{"location":"API/particula/particles/representation/#returns_8","title":"Returns","text":"<ul> <li>np.float64 : The mass concentration of the particles, kg/m^3.</li> </ul>"},{"location":"API/particula/particles/representation/#examples_11","title":"Examples","text":"Get Mass Concentration<pre><code>mass_concentration = (\n    particle_representation.get_mass_concentration()\n)\nprint(mass_concentration)\n</code></pre>"},{"location":"API/particula/particles/representation/#signature_12","title":"Signature","text":"<pre><code>def get_mass_concentration(self, clone: bool = False) -&gt; np.float64: ...\n</code></pre>"},{"location":"API/particula/particles/representation/#particlerepresentationget_radius","title":"ParticleRepresentation().get_radius","text":"<p>Show source in representation.py:376</p> <p>Returns the radius of the particles as calculated by the strategy.</p>"},{"location":"API/particula/particles/representation/#arguments_10","title":"Arguments","text":"<ul> <li>clone : If True, then return a copy of the radius array.</li> </ul>"},{"location":"API/particula/particles/representation/#returns_9","title":"Returns","text":"<ul> <li>The radius of the particles.</li> </ul>"},{"location":"API/particula/particles/representation/#examples_12","title":"Examples","text":"Get Radius<pre><code>radius = particle_representation.get_radius()\n</code></pre>"},{"location":"API/particula/particles/representation/#signature_13","title":"Signature","text":"<pre><code>def get_radius(self, clone: bool = False) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/representation/#particlerepresentationget_species_mass","title":"ParticleRepresentation().get_species_mass","text":"<p>Show source in representation.py:302</p> <p>Returns the masses per species in the particles.</p>"},{"location":"API/particula/particles/representation/#arguments_11","title":"Arguments","text":"<ul> <li>clone : If True, then return a copy of the mass array.</li> </ul>"},{"location":"API/particula/particles/representation/#returns_10","title":"Returns","text":"<ul> <li>The mass of the particles per species.</li> </ul>"},{"location":"API/particula/particles/representation/#examples_13","title":"Examples","text":"Get Species Mass<pre><code>species_mass = particle_representation.get_species_mass()\n</code></pre>"},{"location":"API/particula/particles/representation/#signature_14","title":"Signature","text":"<pre><code>def get_species_mass(self, clone: bool = False) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/representation/#particlerepresentationget_strategy","title":"ParticleRepresentation().get_strategy","text":"<p>Show source in representation.py:87</p> <p>Returns the strategy used for particle representation.</p>"},{"location":"API/particula/particles/representation/#arguments_12","title":"Arguments","text":"<ul> <li>clone : If True, then return a deepcopy of the strategy.</li> </ul>"},{"location":"API/particula/particles/representation/#returns_11","title":"Returns","text":"<ul> <li>The strategy used for particle representation.</li> </ul>"},{"location":"API/particula/particles/representation/#examples_14","title":"Examples","text":"Get Strategy<pre><code>strategy = particle_representation.get_strategy()\n</code></pre>"},{"location":"API/particula/particles/representation/#signature_15","title":"Signature","text":"<pre><code>def get_strategy(self, clone: bool = False) -&gt; DistributionStrategy: ...\n</code></pre>"},{"location":"API/particula/particles/representation/#see-also_2","title":"See also","text":"<ul> <li>DistributionStrategy</li> </ul>"},{"location":"API/particula/particles/representation/#particlerepresentationget_strategy_name","title":"ParticleRepresentation().get_strategy_name","text":"<p>Show source in representation.py:105</p> <p>Returns the name of the strategy used for particle representation.</p>"},{"location":"API/particula/particles/representation/#returns_12","title":"Returns","text":"<ul> <li>The name of the strategy used for particle representation.</li> </ul>"},{"location":"API/particula/particles/representation/#examples_15","title":"Examples","text":"Get Strategy Name<pre><code>strategy_name = particle_representation.get_strategy_name()\nprint(strategy_name)\n</code></pre>"},{"location":"API/particula/particles/representation/#signature_16","title":"Signature","text":"<pre><code>def get_strategy_name(self) -&gt; str: ...\n</code></pre>"},{"location":"API/particula/particles/representation/#particlerepresentationget_surface","title":"ParticleRepresentation().get_surface","text":"<p>Show source in representation.py:154</p> <p>Returns the surface strategy used for surface tension and Kelvin effect.</p>"},{"location":"API/particula/particles/representation/#arguments_13","title":"Arguments","text":"<ul> <li>clone : If True, then return a deepcopy of the surface strategy.</li> </ul>"},{"location":"API/particula/particles/representation/#returns_13","title":"Returns","text":"<ul> <li>The surface strategy used for surface tension and Kelvin effect.</li> </ul>"},{"location":"API/particula/particles/representation/#examples_16","title":"Examples","text":"Get Surface Strategy<pre><code>surface = particle_representation.get_surface()\n</code></pre>"},{"location":"API/particula/particles/representation/#signature_17","title":"Signature","text":"<pre><code>def get_surface(self, clone: bool = False) -&gt; SurfaceStrategy: ...\n</code></pre>"},{"location":"API/particula/particles/representation/#see-also_3","title":"See also","text":"<ul> <li>SurfaceStrategy</li> </ul>"},{"location":"API/particula/particles/representation/#particlerepresentationget_surface_name","title":"ParticleRepresentation().get_surface_name","text":"<p>Show source in representation.py:173</p> <p>Returns the name of the surface strategy used for surface tension and Kelvin effect.</p>"},{"location":"API/particula/particles/representation/#returns_14","title":"Returns","text":"<ul> <li>The name of the surface strategy used for surface tension and     Kelvin effect.</li> </ul>"},{"location":"API/particula/particles/representation/#examples_17","title":"Examples","text":"Get Surface Strategy Name<pre><code>surface_name = particle_representation.get_surface_name()\nprint(surface_name)\n</code></pre>"},{"location":"API/particula/particles/representation/#signature_18","title":"Signature","text":"<pre><code>def get_surface_name(self) -&gt; str: ...\n</code></pre>"},{"location":"API/particula/particles/representation/#particlerepresentationget_total_concentration","title":"ParticleRepresentation().get_total_concentration","text":"<p>Show source in representation.py:247</p> <p>Returns the total concentration of the particles.</p>"},{"location":"API/particula/particles/representation/#arguments_14","title":"Arguments","text":"<ul> <li>clone : If True, then return a copy of the concentration array.</li> </ul>"},{"location":"API/particula/particles/representation/#returns_15","title":"Returns","text":"<ul> <li>The concentration of the particles.</li> </ul>"},{"location":"API/particula/particles/representation/#examples_18","title":"Examples","text":"Get Total Concentration<pre><code>total_concentration = (\n    particle_representation.get_total_concentration()\n)\nprint(total_concentration)\n</code></pre>"},{"location":"API/particula/particles/representation/#signature_19","title":"Signature","text":"<pre><code>def get_total_concentration(self, clone: bool = False) -&gt; np.float64: ...\n</code></pre>"},{"location":"API/particula/particles/representation/#particlerepresentationget_volume","title":"ParticleRepresentation().get_volume","text":"<p>Show source in representation.py:284</p> <p>Returns the volume of the particles.</p>"},{"location":"API/particula/particles/representation/#arguments_15","title":"Arguments","text":"<ul> <li>clone : If True, then return a copy of the volume array.</li> </ul>"},{"location":"API/particula/particles/representation/#returns_16","title":"Returns","text":"<ul> <li>The volume of the particles.</li> </ul>"},{"location":"API/particula/particles/representation/#examples_19","title":"Examples","text":"Get Volume<pre><code>volume = particle_representation.get_volume()\n</code></pre>"},{"location":"API/particula/particles/representation/#signature_20","title":"Signature","text":"<pre><code>def get_volume(self, clone: bool = False) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/particles/representation_builders/","title":"Representation Builders","text":"<p>Particula Index / Particula / Particles / Representation Builders</p> <p>Auto-generated documentation for particula.particles.representation_builders module.</p>"},{"location":"API/particula/particles/representation_builders/#builderactivitystrategymixin","title":"BuilderActivityStrategyMixin","text":"<p>Show source in representation_builders.py:113</p> <p>Mixin class for Builder classes to set activity_strategy.</p>"},{"location":"API/particula/particles/representation_builders/#methods","title":"Methods","text":"<ul> <li>set_activity_strategy : Set the activity_strategy attribute.</li> </ul>"},{"location":"API/particula/particles/representation_builders/#signature","title":"Signature","text":"<pre><code>class BuilderActivityStrategyMixin:\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/particles/representation_builders/#builderactivitystrategymixinset_activity_strategy","title":"BuilderActivityStrategyMixin().set_activity_strategy","text":"<p>Show source in representation_builders.py:123</p> <p>Set the activity strategy of the particle.</p>"},{"location":"API/particula/particles/representation_builders/#arguments","title":"Arguments","text":"<ul> <li>activity_strategy : Activity strategy of the particle.</li> <li>activity_strategy_units : Not used. (for interface consistency)</li> </ul>"},{"location":"API/particula/particles/representation_builders/#signature_1","title":"Signature","text":"<pre><code>def set_activity_strategy(\n    self,\n    activity_strategy: ActivityStrategy,\n    activity_strategy_units: Optional[str] = None,\n): ...\n</code></pre>"},{"location":"API/particula/particles/representation_builders/#see-also","title":"See also","text":"<ul> <li>ActivityStrategy</li> </ul>"},{"location":"API/particula/particles/representation_builders/#builderdistributionstrategymixin","title":"BuilderDistributionStrategyMixin","text":"<p>Show source in representation_builders.py:83</p> <p>Mixin class for Builder classes to set distribution_strategy.</p>"},{"location":"API/particula/particles/representation_builders/#methods_1","title":"Methods","text":"<ul> <li>set_distribution_strategy : Set the distribution_strategy attribute.</li> </ul>"},{"location":"API/particula/particles/representation_builders/#signature_2","title":"Signature","text":"<pre><code>class BuilderDistributionStrategyMixin:\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/particles/representation_builders/#builderdistributionstrategymixinset_distribution_strategy","title":"BuilderDistributionStrategyMixin().set_distribution_strategy","text":"<p>Show source in representation_builders.py:93</p> <p>Set the distribution strategy of the particle.</p>"},{"location":"API/particula/particles/representation_builders/#arguments_1","title":"Arguments","text":"<ul> <li>distribution_strategy : Distribution strategy of the particle.</li> <li>distribution_strategy_units : Not used. (for interface)</li> </ul>"},{"location":"API/particula/particles/representation_builders/#signature_3","title":"Signature","text":"<pre><code>def set_distribution_strategy(\n    self,\n    distribution_strategy: DistributionStrategy,\n    distribution_strategy_units: Optional[str] = None,\n): ...\n</code></pre>"},{"location":"API/particula/particles/representation_builders/#see-also_1","title":"See also","text":"<ul> <li>DistributionStrategy</li> </ul>"},{"location":"API/particula/particles/representation_builders/#buildersurfacestrategymixin","title":"BuilderSurfaceStrategyMixin","text":"<p>Show source in representation_builders.py:55</p> <p>Mixin class for Builder classes to set surface_strategy.</p>"},{"location":"API/particula/particles/representation_builders/#methods_2","title":"Methods","text":"<ul> <li>set_surface_strategy : Set the surface_strategy attribute.</li> </ul>"},{"location":"API/particula/particles/representation_builders/#signature_4","title":"Signature","text":"<pre><code>class BuilderSurfaceStrategyMixin:\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/particles/representation_builders/#buildersurfacestrategymixinset_surface_strategy","title":"BuilderSurfaceStrategyMixin().set_surface_strategy","text":"<p>Show source in representation_builders.py:65</p> <p>Set the surface strategy of the particle.</p>"},{"location":"API/particula/particles/representation_builders/#arguments_2","title":"Arguments","text":"<ul> <li>surface_strategy : Surface strategy of the particle.</li> <li>surface_strategy_units : Not used. (for interface consistency)</li> </ul>"},{"location":"API/particula/particles/representation_builders/#signature_5","title":"Signature","text":"<pre><code>def set_surface_strategy(\n    self, surface_strategy: SurfaceStrategy, surface_strategy_units: Optional[str] = None\n): ...\n</code></pre>"},{"location":"API/particula/particles/representation_builders/#see-also_2","title":"See also","text":"<ul> <li>SurfaceStrategy</li> </ul>"},{"location":"API/particula/particles/representation_builders/#particlemassrepresentationbuilder","title":"ParticleMassRepresentationBuilder","text":"<p>Show source in representation_builders.py:140</p> <p>General ParticleRepresentation objects with mass-based bins.</p>"},{"location":"API/particula/particles/representation_builders/#attributes","title":"Attributes","text":"<ul> <li>distribution_strategy : Set the DistributionStrategy.</li> <li>activity_strategy : Set the ActivityStrategy.</li> <li>surface_strategy : Set the SurfaceStrategy.</li> <li>mass : Set the mass of the particles. Default units are 'kg'.</li> <li>density : Set the density of the particles. Default units are     'kg/m^3'.</li> <li>concentration : Set the concentration of the particles.     Default units are '1/m^3'.</li> <li>charge : Set the number of charges.</li> </ul>"},{"location":"API/particula/particles/representation_builders/#signature_6","title":"Signature","text":"<pre><code>class ParticleMassRepresentationBuilder(\n    BuilderABC,\n    BuilderDistributionStrategyMixin,\n    BuilderActivityStrategyMixin,\n    BuilderSurfaceStrategyMixin,\n    BuilderMassMixin,\n    BuilderDensityMixin,\n    BuilderConcentrationMixin,\n    BuilderChargeMixin,\n):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/particles/representation_builders/#see-also_3","title":"See also","text":"<ul> <li>BuilderABC</li> <li>BuilderActivityStrategyMixin</li> <li>BuilderChargeMixin</li> <li>BuilderConcentrationMixin</li> <li>BuilderDensityMixin</li> <li>BuilderDistributionStrategyMixin</li> <li>BuilderMassMixin</li> <li>BuilderSurfaceStrategyMixin</li> </ul>"},{"location":"API/particula/particles/representation_builders/#particlemassrepresentationbuilderbuild","title":"ParticleMassRepresentationBuilder().build","text":"<p>Show source in representation_builders.py:183</p> <p>Validate and return the ParticleRepresentation object.</p>"},{"location":"API/particula/particles/representation_builders/#returns","title":"Returns","text":"<ul> <li>The validated ParticleRepresentation object.</li> </ul>"},{"location":"API/particula/particles/representation_builders/#signature_7","title":"Signature","text":"<pre><code>def build(self) -&gt; ParticleRepresentation: ...\n</code></pre>"},{"location":"API/particula/particles/representation_builders/#see-also_4","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/particles/representation_builders/#particleradiusrepresentationbuilder","title":"ParticleRadiusRepresentationBuilder","text":"<p>Show source in representation_builders.py:201</p> <p>General ParticleRepresentation objects with radius-based bins.</p>"},{"location":"API/particula/particles/representation_builders/#attributes_1","title":"Attributes","text":"<ul> <li>distribution_strategy : Set the DistributionStrategy.</li> <li>activity_strategy : Set the ActivityStrategy.</li> <li>surface_strategy : Set the SurfaceStrategy.</li> <li>radius : Set the radius of the particles. Default units are 'm'.</li> <li>density : Set the density of the particles. Default units are     'kg/m**3'.</li> <li>concentration : Set the concentration of the particles. Default units     are '1/m^3'.</li> <li>charge : Set the number of charges.</li> </ul>"},{"location":"API/particula/particles/representation_builders/#signature_8","title":"Signature","text":"<pre><code>class ParticleRadiusRepresentationBuilder(\n    BuilderABC,\n    BuilderDistributionStrategyMixin,\n    BuilderActivityStrategyMixin,\n    BuilderSurfaceStrategyMixin,\n    BuilderRadiusMixin,\n    BuilderDensityMixin,\n    BuilderConcentrationMixin,\n    BuilderChargeMixin,\n):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/particles/representation_builders/#see-also_5","title":"See also","text":"<ul> <li>BuilderABC</li> <li>BuilderActivityStrategyMixin</li> <li>BuilderChargeMixin</li> <li>BuilderConcentrationMixin</li> <li>BuilderDensityMixin</li> <li>BuilderDistributionStrategyMixin</li> <li>BuilderRadiusMixin</li> <li>BuilderSurfaceStrategyMixin</li> </ul>"},{"location":"API/particula/particles/representation_builders/#particleradiusrepresentationbuilderbuild","title":"ParticleRadiusRepresentationBuilder().build","text":"<p>Show source in representation_builders.py:244</p> <p>Validate and return the ParticleRepresentation object.</p>"},{"location":"API/particula/particles/representation_builders/#returns_1","title":"Returns","text":"<ul> <li>The validated ParticleRepresentation object.</li> </ul>"},{"location":"API/particula/particles/representation_builders/#signature_9","title":"Signature","text":"<pre><code>def build(self) -&gt; ParticleRepresentation: ...\n</code></pre>"},{"location":"API/particula/particles/representation_builders/#see-also_6","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/particles/representation_builders/#presetparticleradiusbuilder","title":"PresetParticleRadiusBuilder","text":"<p>Show source in representation_builders.py:262</p> <p>General ParticleRepresentation objects with radius-based bins.</p>"},{"location":"API/particula/particles/representation_builders/#attributes_2","title":"Attributes","text":"<ul> <li>mode : Set the mode(s) of the distribution.     Default is np.array([100e-9, 1e-6]) meters.</li> <li>geometric_standard_deviation : Set the geometric standard     deviation(s) of the distribution. Default is np.array([1.2, 1.4]).</li> <li>number_concentration : Set the number concentration of the     distribution. Default is np.array([1e4x1e6, 1e3x1e6])     particles/m^3.</li> <li>radius_bins : Set the radius bins of the distribution. Default is     np.logspace(-9, -4, 250), meters.</li> </ul>"},{"location":"API/particula/particles/representation_builders/#signature_10","title":"Signature","text":"<pre><code>class PresetParticleRadiusBuilder(\n    BuilderABC,\n    BuilderDistributionStrategyMixin,\n    BuilderActivityStrategyMixin,\n    BuilderSurfaceStrategyMixin,\n    BuilderRadiusMixin,\n    BuilderDensityMixin,\n    BuilderConcentrationMixin,\n    BuilderChargeMixin,\n    BuilderLognormalMixin,\n):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/particles/representation_builders/#see-also_7","title":"See also","text":"<ul> <li>BuilderABC</li> <li>BuilderActivityStrategyMixin</li> <li>BuilderChargeMixin</li> <li>BuilderConcentrationMixin</li> <li>BuilderDensityMixin</li> <li>BuilderDistributionStrategyMixin</li> <li>BuilderLognormalMixin</li> <li>BuilderRadiusMixin</li> <li>BuilderSurfaceStrategyMixin</li> </ul>"},{"location":"API/particula/particles/representation_builders/#presetparticleradiusbuilderbuild","title":"PresetParticleRadiusBuilder().build","text":"<p>Show source in representation_builders.py:355</p> <p>Validate and return the ParticleRepresentation object.</p> <p>This will build a distribution of particles with a lognormal size distribution, before returning the ParticleRepresentation object.</p>"},{"location":"API/particula/particles/representation_builders/#returns_2","title":"Returns","text":"<ul> <li>The validated ParticleRepresentation object.</li> </ul>"},{"location":"API/particula/particles/representation_builders/#signature_11","title":"Signature","text":"<pre><code>def build(self) -&gt; ParticleRepresentation: ...\n</code></pre>"},{"location":"API/particula/particles/representation_builders/#see-also_8","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/particles/representation_builders/#presetparticleradiusbuilderset_distribution_type","title":"PresetParticleRadiusBuilder().set_distribution_type","text":"<p>Show source in representation_builders.py:336</p> <p>Set the distribution type for the particle representation.</p>"},{"location":"API/particula/particles/representation_builders/#arguments_3","title":"Arguments","text":"<ul> <li>distribution_type : The type of distribution to use.</li> </ul>"},{"location":"API/particula/particles/representation_builders/#signature_12","title":"Signature","text":"<pre><code>def set_distribution_type(\n    self, distribution_type: str, distribution_type_units: Optional[str] = None\n): ...\n</code></pre>"},{"location":"API/particula/particles/representation_builders/#presetparticleradiusbuilderset_radius_bins","title":"PresetParticleRadiusBuilder().set_radius_bins","text":"<p>Show source in representation_builders.py:317</p> <p>Set the radius bins for the distribution</p>"},{"location":"API/particula/particles/representation_builders/#arguments_4","title":"Arguments","text":"<ul> <li>radius_bins : The radius bins for the distribution.</li> </ul>"},{"location":"API/particula/particles/representation_builders/#signature_13","title":"Signature","text":"<pre><code>def set_radius_bins(\n    self, radius_bins: NDArray[np.float64], radius_bins_units: str = \"m\"\n): ...\n</code></pre>"},{"location":"API/particula/particles/representation_builders/#presetresolvedparticlemassbuilder","title":"PresetResolvedParticleMassBuilder","text":"<p>Show source in representation_builders.py:472</p> <p>General ParticleRepresentation objects with particle resolved masses.</p> <p>This class has preset values for all the attributes, and allows you to override them as needed. This is useful when you want to quickly particle representation object with resolved masses.</p>"},{"location":"API/particula/particles/representation_builders/#attributes_3","title":"Attributes","text":"<ul> <li>distribution_strategy : Set the DistributionStrategy.</li> <li>activity_strategy : Set the ActivityStrategy.</li> <li>surface_strategy : Set the SurfaceStrategy.</li> <li>mass : Set the mass of the particles Default     units are 'kg'.</li> <li>density : Set the density of the particles.     Default units are 'kg/m^3'.</li> <li>charge : Set the number of charges.</li> <li>mode : Set the mode(s) of the distribution.     Default is np.array([100e-9, 1e-6]) meters.</li> <li>geometric_standard_deviation : Set the geometric standard     deviation(s) of the distribution. Default is np.array([1.2, 1.4]).</li> <li>number_concentration : Set the number concentration of the     distribution. Default is np.array([1e4 1e6, 1e3 1e6])     particles/m^3.</li> <li>particle_resolved_count : Set the number of resolved particles.</li> </ul>"},{"location":"API/particula/particles/representation_builders/#signature_14","title":"Signature","text":"<pre><code>class PresetResolvedParticleMassBuilder(\n    BuilderABC,\n    BuilderDistributionStrategyMixin,\n    BuilderActivityStrategyMixin,\n    BuilderSurfaceStrategyMixin,\n    BuilderDensityMixin,\n    BuilderChargeMixin,\n    BuilderLognormalMixin,\n    BuilderVolumeMixin,\n    BuilderParticleResolvedCountMixin,\n):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/particles/representation_builders/#see-also_9","title":"See also","text":"<ul> <li>BuilderABC</li> <li>BuilderActivityStrategyMixin</li> <li>BuilderChargeMixin</li> <li>BuilderDensityMixin</li> <li>BuilderDistributionStrategyMixin</li> <li>BuilderLognormalMixin</li> <li>BuilderParticleResolvedCountMixin</li> <li>BuilderSurfaceStrategyMixin</li> <li>BuilderVolumeMixin</li> </ul>"},{"location":"API/particula/particles/representation_builders/#presetresolvedparticlemassbuilderbuild","title":"PresetResolvedParticleMassBuilder().build","text":"<p>Show source in representation_builders.py:540</p> <p>Validate and return the ParticleRepresentation object.</p> <p>This will build a distribution of particles with a lognormal size distribution, before returning the ParticleRepresentation object.</p>"},{"location":"API/particula/particles/representation_builders/#returns_3","title":"Returns","text":"<ul> <li>The validated ParticleRepresentation object.</li> </ul>"},{"location":"API/particula/particles/representation_builders/#signature_15","title":"Signature","text":"<pre><code>def build(self) -&gt; ParticleRepresentation: ...\n</code></pre>"},{"location":"API/particula/particles/representation_builders/#see-also_10","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/particles/representation_builders/#resolvedparticlemassrepresentationbuilder","title":"ResolvedParticleMassRepresentationBuilder","text":"<p>Show source in representation_builders.py:395</p> <p>Builder class for constructing ParticleRepresentation objects with resolved masses.</p> <p>This class allows you to set various attributes for a particle representation, such as distribution strategy, mass, density, charge, volume, and more. These attributes are validated and there a no presets.</p>"},{"location":"API/particula/particles/representation_builders/#attributes_4","title":"Attributes","text":"<ul> <li>distribution_strategy : Set the distribution strategy for particles.</li> <li>activity_strategy : Set the activity strategy for the particles.</li> <li>surface_strategy : Set the surface strategy for the particles.</li> <li>mass : Set the particle mass. Defaults to 'kg'.</li> <li>density : Set the particle density. Defaults to 'kg/m^3'.</li> <li>charge : Set the particle charge.</li> <li>volume : Set the particle volume. Defaults to 'm^3'.</li> </ul>"},{"location":"API/particula/particles/representation_builders/#signature_16","title":"Signature","text":"<pre><code>class ResolvedParticleMassRepresentationBuilder(\n    BuilderABC,\n    BuilderDistributionStrategyMixin,\n    BuilderActivityStrategyMixin,\n    BuilderSurfaceStrategyMixin,\n    BuilderDensityMixin,\n    BuilderChargeMixin,\n    BuilderVolumeMixin,\n    BuilderMassMixin,\n):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/particles/representation_builders/#see-also_11","title":"See also","text":"<ul> <li>BuilderABC</li> <li>BuilderActivityStrategyMixin</li> <li>BuilderChargeMixin</li> <li>BuilderDensityMixin</li> <li>BuilderDistributionStrategyMixin</li> <li>BuilderMassMixin</li> <li>BuilderSurfaceStrategyMixin</li> <li>BuilderVolumeMixin</li> </ul>"},{"location":"API/particula/particles/representation_builders/#resolvedparticlemassrepresentationbuilderbuild","title":"ResolvedParticleMassRepresentationBuilder().build","text":"<p>Show source in representation_builders.py:442</p> <p>Validate and return a ParticleRepresentation object.</p> <p>This method validates all the required attributes and builds a particle representation with a lognormal size distribution.</p>"},{"location":"API/particula/particles/representation_builders/#returns_4","title":"Returns","text":"<ul> <li>ParticleRepresentation : A validated particle representation     object.</li> </ul>"},{"location":"API/particula/particles/representation_builders/#signature_17","title":"Signature","text":"<pre><code>def build(self) -&gt; ParticleRepresentation: ...\n</code></pre>"},{"location":"API/particula/particles/representation_builders/#see-also_12","title":"See also","text":"<ul> <li>ParticleRepresentation</li> </ul>"},{"location":"API/particula/particles/representation_factories/","title":"Representation Factories","text":"<p>Particula Index / Particula / Particles / Representation Factories</p> <p>Auto-generated documentation for particula.particles.representation_factories module.</p>"},{"location":"API/particula/particles/representation_factories/#particlerepresentationfactory","title":"ParticleRepresentationFactory","text":"<p>Show source in representation_factories.py:17</p> <p>Factory class to create particle representation builders.</p>"},{"location":"API/particula/particles/representation_factories/#methods","title":"Methods","text":"<ul> <li>get_builders : Returns the mapping of strategy types to builder     instances.</li> <li>get_strategy : Gets the strategy instance for the specified strategy.<ul> <li>strategy_type : Type of particle representation strategy to use,     can be 'radius' (default) or 'mass'.</li> <li>parameters : Parameters required for     the builder</li> </ul> </li> </ul>"},{"location":"API/particula/particles/representation_factories/#signature","title":"Signature","text":"<pre><code>class ParticleRepresentationFactory(\n    StrategyFactoryABC[\n        Union[\n            ParticleMassRepresentationBuilder,\n            ParticleRadiusRepresentationBuilder,\n            PresetParticleRadiusBuilder,\n            ResolvedParticleMassRepresentationBuilder,\n            PresetResolvedParticleMassBuilder,\n        ],\n        ParticleRepresentation,\n    ]\n): ...\n</code></pre>"},{"location":"API/particula/particles/representation_factories/#see-also","title":"See also","text":"<ul> <li>ParticleMassRepresentationBuilder</li> <li>ParticleRadiusRepresentationBuilder</li> <li>ParticleRepresentation</li> <li>PresetParticleRadiusBuilder</li> <li>PresetResolvedParticleMassBuilder</li> <li>ResolvedParticleMassRepresentationBuilder</li> </ul>"},{"location":"API/particula/particles/representation_factories/#particlerepresentationfactoryget_builders","title":"ParticleRepresentationFactory().get_builders","text":"<p>Show source in representation_factories.py:43</p> <p>Returns the mapping of strategy types to builder instances.</p>"},{"location":"API/particula/particles/representation_factories/#returns","title":"Returns","text":"<p>A dictionary with the strategy types as keys and the builder instances as values. - 'mass' : MassParticleRepresentationBuilder - 'radius' : RadiusParticleRepresentationBuilder - 'preset_radius' : LimitedRadiusParticleBuilder - 'resolved_mass' : ResolvedMassParticleRepresentationBuilder - 'preset_resolved_mass' : PresetResolvedMassParticleBuilder</p>"},{"location":"API/particula/particles/representation_factories/#signature_1","title":"Signature","text":"<pre><code>def get_builders(self): ...\n</code></pre>"},{"location":"API/particula/particles/surface_builders/","title":"Surface Builders","text":"<p>Particula Index / Particula / Particles / Surface Builders</p> <p>Auto-generated documentation for particula.particles.surface_builders module.</p>"},{"location":"API/particula/particles/surface_builders/#surfacestrategymassbuilder","title":"SurfaceStrategyMassBuilder","text":"<p>Show source in surface_builders.py:67</p> <p>Builder class for SurfaceStrategyMass objects.</p>"},{"location":"API/particula/particles/surface_builders/#methods","title":"Methods","text":"<ul> <li><code>set_surface_tension(surface_tension,</code> surface_tension_units) - Set the     surface tension of the particle in N/m. Default units are 'N/m'.</li> <li><code>set_density(density,</code> density_units) - Set the density of the particle in     kg/m^3. Default units are 'kg/m^3'.</li> <li><code>set_parameters(params)</code> - Set the parameters of the SurfaceStrategyMass     object from a dictionary including optional units.</li> <li><code>build()</code> - Validate and return the SurfaceStrategyMass object.</li> </ul>"},{"location":"API/particula/particles/surface_builders/#signature","title":"Signature","text":"<pre><code>class SurfaceStrategyMassBuilder(\n    BuilderABC, BuilderSurfaceTensionMixin, BuilderDensityMixin\n):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/particles/surface_builders/#see-also","title":"See also","text":"<ul> <li>BuilderABC</li> <li>BuilderDensityMixin</li> <li>BuilderSurfaceTensionMixin</li> </ul>"},{"location":"API/particula/particles/surface_builders/#surfacestrategymassbuilderbuild","title":"SurfaceStrategyMassBuilder().build","text":"<p>Show source in surface_builders.py:88</p> <p>Validate and return the SurfaceStrategyMass object.</p>"},{"location":"API/particula/particles/surface_builders/#returns","title":"Returns","text":"<ul> <li><code>SurfaceStrategyMass</code> - Instance of the SurfaceStrategyMass object.</li> </ul>"},{"location":"API/particula/particles/surface_builders/#signature_1","title":"Signature","text":"<pre><code>def build(self) -&gt; SurfaceStrategyMass: ...\n</code></pre>"},{"location":"API/particula/particles/surface_builders/#see-also_1","title":"See also","text":"<ul> <li>SurfaceStrategyMass</li> </ul>"},{"location":"API/particula/particles/surface_builders/#surfacestrategymolarbuilder","title":"SurfaceStrategyMolarBuilder","text":"<p>Show source in surface_builders.py:26</p> <p>Builder class for SurfaceStrategyMolar objects.</p>"},{"location":"API/particula/particles/surface_builders/#methods_1","title":"Methods","text":"<ul> <li><code>set_surface_tension(surface_tension,</code> surface_tension_units) - Set the     surface tension of the particle in N/m. Default units are 'N/m'.</li> <li><code>set_density(density,</code> density_units) - Set the density of the particle in     kg/m^3. Default units are 'kg/m^3'.</li> <li><code>set_molar_mass(molar_mass,</code> molar_mass_units) - Set the molar mass of the     particle in kg/mol. Default units are 'kg/mol'.</li> <li><code>set_parameters(params)</code> - Set the parameters of the SurfaceStrategyMolar     object from a dictionary including optional units.</li> <li><code>build()</code> - Validate and return the SurfaceStrategyMolar object.</li> </ul>"},{"location":"API/particula/particles/surface_builders/#signature_2","title":"Signature","text":"<pre><code>class SurfaceStrategyMolarBuilder(\n    BuilderABC, BuilderDensityMixin, BuilderSurfaceTensionMixin, BuilderMolarMassMixin\n):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/particles/surface_builders/#see-also_2","title":"See also","text":"<ul> <li>BuilderABC</li> <li>BuilderDensityMixin</li> <li>BuilderMolarMassMixin</li> <li>BuilderSurfaceTensionMixin</li> </ul>"},{"location":"API/particula/particles/surface_builders/#surfacestrategymolarbuilderbuild","title":"SurfaceStrategyMolarBuilder().build","text":"<p>Show source in surface_builders.py:53</p> <p>Validate and return the SurfaceStrategyMass object.</p>"},{"location":"API/particula/particles/surface_builders/#returns_1","title":"Returns","text":"<ul> <li><code>SurfaceStrategyMolar</code> - Instance of the SurfaceStrategyMolar object.</li> </ul>"},{"location":"API/particula/particles/surface_builders/#signature_3","title":"Signature","text":"<pre><code>def build(self) -&gt; SurfaceStrategyMolar: ...\n</code></pre>"},{"location":"API/particula/particles/surface_builders/#see-also_3","title":"See also","text":"<ul> <li>SurfaceStrategyMolar</li> </ul>"},{"location":"API/particula/particles/surface_builders/#surfacestrategyvolumebuilder","title":"SurfaceStrategyVolumeBuilder","text":"<p>Show source in surface_builders.py:101</p> <p>Builder class for SurfaceStrategyVolume objects.</p>"},{"location":"API/particula/particles/surface_builders/#methods_2","title":"Methods","text":"<ul> <li><code>set_surface_tension(surface_tension,</code> surface_tension_units) - Set the     surface tension of the particle in N/m. Default units are 'N/m'.</li> <li><code>set_density(density,</code> density_units) - Set the density of the particle in     kg/m^3. Default units are 'kg/m^3'.</li> <li><code>set_parameters(params)</code> - Set the parameters of the SurfaceStrategyVolume     object from a dictionary including optional units.</li> <li><code>build()</code> - Validate and return the SurfaceStrategyVolume object.</li> </ul>"},{"location":"API/particula/particles/surface_builders/#signature_4","title":"Signature","text":"<pre><code>class SurfaceStrategyVolumeBuilder(\n    BuilderABC, BuilderSurfaceTensionMixin, BuilderDensityMixin\n):\n    def __init__(self): ...\n</code></pre>"},{"location":"API/particula/particles/surface_builders/#see-also_4","title":"See also","text":"<ul> <li>BuilderABC</li> <li>BuilderDensityMixin</li> <li>BuilderSurfaceTensionMixin</li> </ul>"},{"location":"API/particula/particles/surface_builders/#surfacestrategyvolumebuilderbuild","title":"SurfaceStrategyVolumeBuilder().build","text":"<p>Show source in surface_builders.py:122</p> <p>Validate and return the SurfaceStrategyVolume object.</p>"},{"location":"API/particula/particles/surface_builders/#returns_2","title":"Returns","text":"<ul> <li><code>SurfaceStrategyVolume</code> - Instance of the SurfaceStrategyVolume     object.</li> </ul>"},{"location":"API/particula/particles/surface_builders/#signature_5","title":"Signature","text":"<pre><code>def build(self) -&gt; SurfaceStrategyVolume: ...\n</code></pre>"},{"location":"API/particula/particles/surface_builders/#see-also_5","title":"See also","text":"<ul> <li>SurfaceStrategyVolume</li> </ul>"},{"location":"API/particula/particles/surface_factories/","title":"Surface Factories","text":"<p>Particula Index / Particula / Particles / Surface Factories</p> <p>Auto-generated documentation for particula.particles.surface_factories module.</p>"},{"location":"API/particula/particles/surface_factories/#surfacefactory","title":"SurfaceFactory","text":"<p>Show source in surface_factories.py:17</p> <p>Factory class to call and create surface tension strategies.</p> <p>Factory class to create surface tension strategy builders for calculating surface tension and the Kelvin effect for species in particulate phases.</p>"},{"location":"API/particula/particles/surface_factories/#methods","title":"Methods","text":"<ul> <li>get_builders() : Returns the mapping of strategy types to builder     instances.</li> <li>get_strategy(strategy_type, parameters): Gets the strategy instance     for the specified strategy type.<ul> <li><code>-</code> strategy_type - Type of surface tension strategy to use, can be     'volume', 'mass', or 'molar'.</li> <li>parameters(Dict[str, Any], optional): Parameters required for the     builder, dependent on the chosen strategy type.<ul> <li><code>-</code> volume - density, surface_tension</li> <li><code>-</code> mass - density, surface_tension</li> <li><code>-</code> molar - molar_mass, density, surface_tension</li> </ul> </li> </ul> </li> </ul>"},{"location":"API/particula/particles/surface_factories/#returns","title":"Returns","text":"<p>SurfaceStrategy : An instance of the specified SurfaceStrategy.</p>"},{"location":"API/particula/particles/surface_factories/#raises","title":"Raises","text":"<p>ValueError : If an unknown strategy type is provided. ValueError : If any required key is missing during check_keys or     pre_build_check, or if trying to set an invalid parameter.</p>"},{"location":"API/particula/particles/surface_factories/#signature","title":"Signature","text":"<pre><code>class SurfaceFactory(\n    StrategyFactoryABC[\n        Union[\n            SurfaceStrategyVolumeBuilder,\n            SurfaceStrategyMassBuilder,\n            SurfaceStrategyMolarBuilder,\n        ],\n        Union[SurfaceStrategyVolume, SurfaceStrategyMass, SurfaceStrategyMolar],\n    ]\n): ...\n</code></pre>"},{"location":"API/particula/particles/surface_factories/#see-also","title":"See also","text":"<ul> <li>SurfaceStrategyMassBuilder</li> <li>SurfaceStrategyMass</li> <li>SurfaceStrategyMolarBuilder</li> <li>SurfaceStrategyMolar</li> <li>SurfaceStrategyVolumeBuilder</li> <li>SurfaceStrategyVolume</li> </ul>"},{"location":"API/particula/particles/surface_factories/#surfacefactoryget_builders","title":"SurfaceFactory().get_builders","text":"<p>Show source in surface_factories.py:57</p> <p>Returns the mapping of strategy types to builder instances.</p>"},{"location":"API/particula/particles/surface_factories/#returns_1","title":"Returns","text":"<ul> <li>A dictionary mapping strategy types to builder instances.         - <code>-</code> volume - SurfaceStrategyVolumeBuilder         - <code>-</code> mass - SurfaceStrategyMassBuilder         - <code>-</code> molar - SurfaceStrategyMolarBuilder</li> </ul>"},{"location":"API/particula/particles/surface_factories/#signature_1","title":"Signature","text":"<pre><code>def get_builders(self): ...\n</code></pre>"},{"location":"API/particula/particles/surface_strategies/","title":"Surface Strategies","text":"<p>Particula Index / Particula / Particles / Surface Strategies</p> <p>Auto-generated documentation for particula.particles.surface_strategies module.</p>"},{"location":"API/particula/particles/surface_strategies/#surfacestrategy","title":"SurfaceStrategy","text":"<p>Show source in surface_strategies.py:21</p> <p>ABC class for Surface Strategies.</p> <p>Abstract class for implementing strategies to calculate surface tension and the Kelvin effect for species in particulate phases.</p>"},{"location":"API/particula/particles/surface_strategies/#methods","title":"Methods","text":"<ul> <li><code>effective_surface_tension</code> - Calculate the effective surface tension of     species based on their concentration.</li> <li><code>effective_density</code> - Calculate the effective density of species based on     their concentration.</li> <li><code>get_name</code> - Return the type of the surface strategy.</li> <li><code>kelvin_radius</code> - Calculate the Kelvin radius which determines the     curvature effect on vapor pressure.</li> <li><code>kelvin_term</code> - Calculate the Kelvin term, which quantifies the effect of     particle curvature on vapor pressure.</li> </ul>"},{"location":"API/particula/particles/surface_strategies/#signature","title":"Signature","text":"<pre><code>class SurfaceStrategy(ABC): ...\n</code></pre>"},{"location":"API/particula/particles/surface_strategies/#surfacestrategyeffective_density","title":"SurfaceStrategy().effective_density","text":"<p>Show source in surface_strategies.py:52</p> <p>Calculate the effective density of the species mixture.</p>"},{"location":"API/particula/particles/surface_strategies/#arguments","title":"Arguments","text":"<ul> <li><code>mass_concentration</code> - Concentration of the species [kg/m^3].</li> </ul>"},{"location":"API/particula/particles/surface_strategies/#returns","title":"Returns","text":"<p>float or NDArray[float]: Effective density of the species [kg/m^3].</p>"},{"location":"API/particula/particles/surface_strategies/#signature_1","title":"Signature","text":"<pre><code>@abstractmethod\ndef effective_density(\n    self, mass_concentration: Union[float, NDArray[np.float64]]\n) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/particles/surface_strategies/#surfacestrategyeffective_surface_tension","title":"SurfaceStrategy().effective_surface_tension","text":"<p>Show source in surface_strategies.py:39</p> <p>Calculate the effective surface tension of the species mixture.</p>"},{"location":"API/particula/particles/surface_strategies/#arguments_1","title":"Arguments","text":"<ul> <li><code>mass_concentration</code> - Concentration of the species [kg/m^3].</li> </ul>"},{"location":"API/particula/particles/surface_strategies/#returns_1","title":"Returns","text":"<p>float or NDArray[float]: Effective surface tension [N/m].</p>"},{"location":"API/particula/particles/surface_strategies/#signature_2","title":"Signature","text":"<pre><code>@abstractmethod\ndef effective_surface_tension(\n    self, mass_concentration: Union[float, NDArray[np.float64]]\n) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/particles/surface_strategies/#surfacestrategyget_name","title":"SurfaceStrategy().get_name","text":"<p>Show source in surface_strategies.py:65</p> <p>Return the type of the surface strategy.</p>"},{"location":"API/particula/particles/surface_strategies/#signature_3","title":"Signature","text":"<pre><code>def get_name(self) -&gt; str: ...\n</code></pre>"},{"location":"API/particula/particles/surface_strategies/#surfacestrategykelvin_radius","title":"SurfaceStrategy().kelvin_radius","text":"<p>Show source in surface_strategies.py:69</p> <p>Calculate the Kelvin radius which determines the curvature effect.</p> <p>The kelvin radius is molecule specific and depends on the surface tension, molar mass, density, and temperature of the system. It is used to calculate the Kelvin term, which quantifies the effect of particle curvature on vapor pressure.</p>"},{"location":"API/particula/particles/surface_strategies/#arguments_2","title":"Arguments","text":"<ul> <li><code>surface_tension</code> - Surface tension of the mixture [N/m].</li> <li><code>molar_mass</code> - Molar mass of the species [kg/mol].</li> <li><code>mass_concentration</code> - Concentration of the species [kg/m^3].</li> <li><code>temperature</code> - Temperature of the system [K].</li> </ul>"},{"location":"API/particula/particles/surface_strategies/#returns_2","title":"Returns","text":"<p>float or NDArray[float]: Kelvin radius [m].</p>"},{"location":"API/particula/particles/surface_strategies/#references","title":"References","text":"<ul> <li>Based on Neil Donahue's approach to the Kelvin equation: r = 2 * surface_tension * molar_mass / (R * T * density) Kelvin Wikipedia</li> </ul>"},{"location":"API/particula/particles/surface_strategies/#signature_4","title":"Signature","text":"<pre><code>def kelvin_radius(\n    self,\n    molar_mass: Union[float, NDArray[np.float64]],\n    mass_concentration: Union[float, NDArray[np.float64]],\n    temperature: float,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/surface_strategies/#surfacestrategykelvin_term","title":"SurfaceStrategy().kelvin_term","text":"<p>Show source in surface_strategies.py:103</p> <p>Calculate the Kelvin term, which multiplies the vapor pressure.</p> <p>The Kelvin term is used to adjust the vapor pressure of a species due to the curvature of the particle.</p>"},{"location":"API/particula/particles/surface_strategies/#arguments_3","title":"Arguments","text":"<ul> <li><code>radius</code> - Radius of the particle [m].</li> <li><code>molar_mass</code> - Molar mass of the species a [kg/mol].</li> <li><code>mass_concentration</code> - Concentration of the species [kg/m^3].</li> <li><code>temperature</code> - Temperature of the system [K].</li> </ul>"},{"location":"API/particula/particles/surface_strategies/#returns_3","title":"Returns","text":"<p>float or NDArray[float]: The exponential factor adjusting vapor     pressure due to curvature.</p>"},{"location":"API/particula/particles/surface_strategies/#references_1","title":"References","text":"<p>Based on Neil Donahue's approach to the Kelvin equation: exp(kelvin_radius / particle_radius) Kelvin Eq Wikipedia</p>"},{"location":"API/particula/particles/surface_strategies/#signature_5","title":"Signature","text":"<pre><code>def kelvin_term(\n    self,\n    radius: Union[float, NDArray[np.float64]],\n    molar_mass: Union[float, NDArray[np.float64]],\n    mass_concentration: Union[float, NDArray[np.float64]],\n    temperature: float,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/surface_strategies/#surfacestrategymass","title":"SurfaceStrategyMass","text":"<p>Show source in surface_strategies.py:189</p> <p>Surface tension and density, based on mass fraction weighted values.</p>"},{"location":"API/particula/particles/surface_strategies/#arguments_4","title":"Arguments","text":"<ul> <li><code>surface_tension</code> - Surface tension of the species [N/m]. If a single     value is provided, it will be used for all species.</li> <li><code>density</code> - Density of the species [kg/m^3]. If a single value is     provided, it will be used for all species.</li> </ul>"},{"location":"API/particula/particles/surface_strategies/#references_2","title":"References","text":"<p>Mass Fractions</p>"},{"location":"API/particula/particles/surface_strategies/#signature_6","title":"Signature","text":"<pre><code>class SurfaceStrategyMass(SurfaceStrategy):\n    def __init__(\n        self,\n        surface_tension: Union[float, NDArray[np.float64]] = 0.072,\n        density: Union[float, NDArray[np.float64]] = 1000,\n    ): ...\n</code></pre>"},{"location":"API/particula/particles/surface_strategies/#see-also","title":"See also","text":"<ul> <li>SurfaceStrategy</li> </ul>"},{"location":"API/particula/particles/surface_strategies/#surfacestrategymasseffective_density","title":"SurfaceStrategyMass().effective_density","text":"<p>Show source in surface_strategies.py:222</p>"},{"location":"API/particula/particles/surface_strategies/#signature_7","title":"Signature","text":"<pre><code>def effective_density(\n    self, mass_concentration: Union[float, NDArray[np.float64]]\n) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/particles/surface_strategies/#surfacestrategymasseffective_surface_tension","title":"SurfaceStrategyMass().effective_surface_tension","text":"<p>Show source in surface_strategies.py:210</p>"},{"location":"API/particula/particles/surface_strategies/#signature_8","title":"Signature","text":"<pre><code>def effective_surface_tension(\n    self, mass_concentration: Union[float, NDArray[np.float64]]\n) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/particles/surface_strategies/#surfacestrategymolar","title":"SurfaceStrategyMolar","text":"<p>Show source in surface_strategies.py:137</p> <p>Surface tension and density, based on mole fraction weighted values.</p>"},{"location":"API/particula/particles/surface_strategies/#arguments_5","title":"Arguments","text":"<ul> <li><code>surface_tension</code> - Surface tension of the species [N/m]. If a single     value is provided, it will be used for all species.</li> <li><code>density</code> - Density of the species [kg/m^3]. If a single value is     provided, it will be used for all species.</li> <li><code>molar_mass</code> - Molar mass of the species [kg/mol]. If a single value is     provided, it will be used for all species.</li> </ul>"},{"location":"API/particula/particles/surface_strategies/#references_3","title":"References","text":"<p>Mole Fractions</p>"},{"location":"API/particula/particles/surface_strategies/#signature_9","title":"Signature","text":"<pre><code>class SurfaceStrategyMolar(SurfaceStrategy):\n    def __init__(\n        self,\n        surface_tension: Union[float, NDArray[np.float64]] = 0.072,\n        density: Union[float, NDArray[np.float64]] = 1000,\n        molar_mass: Union[float, NDArray[np.float64]] = 0.01815,\n    ): ...\n</code></pre>"},{"location":"API/particula/particles/surface_strategies/#see-also_1","title":"See also","text":"<ul> <li>SurfaceStrategy</li> </ul>"},{"location":"API/particula/particles/surface_strategies/#surfacestrategymolareffective_density","title":"SurfaceStrategyMolar().effective_density","text":"<p>Show source in surface_strategies.py:175</p>"},{"location":"API/particula/particles/surface_strategies/#signature_10","title":"Signature","text":"<pre><code>def effective_density(\n    self, mass_concentration: Union[float, NDArray[np.float64]]\n) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/particles/surface_strategies/#surfacestrategymolareffective_surface_tension","title":"SurfaceStrategyMolar().effective_surface_tension","text":"<p>Show source in surface_strategies.py:162</p>"},{"location":"API/particula/particles/surface_strategies/#signature_11","title":"Signature","text":"<pre><code>def effective_surface_tension(\n    self, mass_concentration: Union[float, NDArray[np.float64]]\n) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/particles/surface_strategies/#surfacestrategyvolume","title":"SurfaceStrategyVolume","text":"<p>Show source in surface_strategies.py:233</p> <p>Surface tension and density, based on volume fraction weighted values.</p>"},{"location":"API/particula/particles/surface_strategies/#arguments_6","title":"Arguments","text":"<ul> <li><code>surface_tension</code> - Surface tension of the species [N/m]. If a single     value is provided, it will be used for all species.</li> <li><code>density</code> - Density of the species [kg/m^3]. If a single value is     provided, it will be used for all species.</li> </ul>"},{"location":"API/particula/particles/surface_strategies/#references_4","title":"References","text":"<p>Volume Fractions</p>"},{"location":"API/particula/particles/surface_strategies/#signature_12","title":"Signature","text":"<pre><code>class SurfaceStrategyVolume(SurfaceStrategy):\n    def __init__(\n        self,\n        surface_tension: Union[float, NDArray[np.float64]] = 0.072,\n        density: Union[float, NDArray[np.float64]] = 1000,\n    ): ...\n</code></pre>"},{"location":"API/particula/particles/surface_strategies/#see-also_2","title":"See also","text":"<ul> <li>SurfaceStrategy</li> </ul>"},{"location":"API/particula/particles/surface_strategies/#surfacestrategyvolumeeffective_density","title":"SurfaceStrategyVolume().effective_density","text":"<p>Show source in surface_strategies.py:267</p>"},{"location":"API/particula/particles/surface_strategies/#signature_13","title":"Signature","text":"<pre><code>def effective_density(\n    self, mass_concentration: Union[float, NDArray[np.float64]]\n) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/particles/surface_strategies/#surfacestrategyvolumeeffective_surface_tension","title":"SurfaceStrategyVolume().effective_surface_tension","text":"<p>Show source in surface_strategies.py:254</p>"},{"location":"API/particula/particles/surface_strategies/#signature_14","title":"Signature","text":"<pre><code>def effective_surface_tension(\n    self, mass_concentration: Union[float, NDArray[np.float64]]\n) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/particles/properties/","title":"Properties","text":"<p>Particula Index / Particula / Particles / Properties</p> <p>Auto-generated documentation for particula.particles.properties module.</p>"},{"location":"API/particula/particles/properties/#modules","title":"Modules","text":"<ul> <li>Activity Module</li> <li>Aerodynamic Mobility Module</li> <li>Aerodynamic Size</li> <li>Collision Radius Module</li> <li>Coulomb Enhancement</li> <li>Diffusion Coefficient</li> <li>Diffusive Knudsen Module</li> <li>Friction Factor Module</li> <li>Inertia Time</li> <li>Kelvin Effect Module</li> <li>Knudsen Number Module</li> <li>Lognormal Size Distribution</li> <li>Mean Thermal Speed Module</li> <li>Partial Pressure Module</li> <li>Reynolds Number</li> <li>Settling Velocity</li> <li>Slip Correction Module</li> <li>Special Functions</li> <li>Stokes Number</li> <li>Vapor Correction Module</li> </ul>"},{"location":"API/particula/particles/properties/activity_module/","title":"Activity Module","text":"<p>Particula Index / Particula / Particles / Properties / Activity Module</p> <p>Auto-generated documentation for particula.particles.properties.activity_module module.</p>"},{"location":"API/particula/particles/properties/activity_module/#get_ideal_activity_mass","title":"get_ideal_activity_mass","text":"<p>Show source in activity_module.py:111</p> <p>Compute the ideal activity based on mass fractions.</p> <p>This function calculates the activity of a species using its mass fraction. In an ideal mixture, the activity (a\u1d62) can be expressed as:</p> <ul> <li>a\u1d62 = w\u1d62<ul> <li>w\u1d62 is the mass fraction of species i.</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/activity_module/#arguments","title":"Arguments","text":"<ul> <li>mass_concentration : Mass concentration of the species in kg/m\u00b3.</li> </ul>"},{"location":"API/particula/particles/properties/activity_module/#returns","title":"Returns","text":"<ul> <li>Ideal activity of the species as a dimensionless value.</li> </ul>"},{"location":"API/particula/particles/properties/activity_module/#examples","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_ideal_activity_mass(np.array([1.0, 2.0]))\n# Output: array([...])\n</code></pre>"},{"location":"API/particula/particles/properties/activity_module/#references","title":"References","text":"<ul> <li>Raoult's Law, \"Raoult's law,\" Wikipedia,   https://en.wikipedia.org/wiki/Raoult%27s_law.</li> </ul>"},{"location":"API/particula/particles/properties/activity_module/#signature","title":"Signature","text":"<pre><code>@validate_inputs({\"mass_concentration\": \"nonnegative\"})\ndef get_ideal_activity_mass(\n    mass_concentration: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/activity_module/#get_ideal_activity_molar","title":"get_ideal_activity_molar","text":"<p>Show source in activity_module.py:15</p> <p>Compute the ideal activity based on mole fractions.</p> <p>This function calculates the activity of a species using its mole fraction, which follows Raoult's Law. The ideal activity (a\u1d62) is determined using:</p> <ul> <li>a\u1d62 = X\u1d62<ul> <li>X\u1d62 is the mole fraction of species i.</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/activity_module/#arguments_1","title":"Arguments","text":"<ul> <li>mass_concentration : Mass concentration of the species in kg/m\u00b3.</li> <li>molar_mass : Molar mass of the species in kg/mol.</li> </ul>"},{"location":"API/particula/particles/properties/activity_module/#returns_1","title":"Returns","text":"<ul> <li>Ideal activity of the species as a dimensionless value.</li> </ul>"},{"location":"API/particula/particles/properties/activity_module/#examples_1","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_ideal_activity_molar(\n    mass_concentration=np.array([1.0, 2.0]),\n    molar_mass=np.array([18.015, 28.97])\n)\n# Output: array([...])\n</code></pre>"},{"location":"API/particula/particles/properties/activity_module/#references_1","title":"References","text":"<ul> <li>Raoult's Law, \"Raoult's law,\" Wikipedia,   https://en.wikipedia.org/wiki/Raoult%27s_law.</li> </ul>"},{"location":"API/particula/particles/properties/activity_module/#signature_1","title":"Signature","text":"<pre><code>@validate_inputs({\"mass_concentration\": \"nonnegative\", \"molar_mass\": \"positive\"})\ndef get_ideal_activity_molar(\n    mass_concentration: Union[float, NDArray[np.float64]],\n    molar_mass: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/activity_module/#get_ideal_activity_volume","title":"get_ideal_activity_volume","text":"<p>Show source in activity_module.py:63</p> <p>Compute the ideal activity based on volume fractions.</p> <p>This function calculates the activity of a species using its volume fraction. In an ideal mixture, the activity (a\u1d62) can be expressed as:</p> <ul> <li>a\u1d62 = \u03c6\u1d62<ul> <li>\u03c6\u1d62 is the volume fraction of species i.</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/activity_module/#arguments_2","title":"Arguments","text":"<ul> <li>mass_concentration : Mass concentration of the species in kg/m\u00b3.</li> <li>density : Density of the species in kg/m\u00b3.</li> </ul>"},{"location":"API/particula/particles/properties/activity_module/#returns_2","title":"Returns","text":"<ul> <li>Ideal activity of the species as a dimensionless value.</li> </ul>"},{"location":"API/particula/particles/properties/activity_module/#examples_2","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_ideal_activity_volume(\n    mass_concentration=np.array([1.0, 2.0]),\n    density=np.array([1000.0, 1200.0])\n)\n# Output: array([...])\n</code></pre>"},{"location":"API/particula/particles/properties/activity_module/#references_2","title":"References","text":"<ul> <li>Raoult's Law, \"Raoult's law,\" Wikipedia,   https://en.wikipedia.org/wiki/Raoult%27s_law.</li> </ul>"},{"location":"API/particula/particles/properties/activity_module/#signature_2","title":"Signature","text":"<pre><code>@validate_inputs({\"mass_concentration\": \"nonnegative\", \"density\": \"positive\"})\ndef get_ideal_activity_volume(\n    mass_concentration: Union[float, NDArray[np.float64]],\n    density: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/activity_module/#get_kappa_activity","title":"get_kappa_activity","text":"<p>Show source in activity_module.py:152</p> <p>Compute species activity using the \u03ba (kappa) hygroscopic growth parameter.</p> <p>This function calculates the activity of a mixture by combining volume-fraction weighted \u03ba-values. The water activity (a\u2098) is determined by:</p> <ul> <li>a\u2098 = 1 / (1 + \u03ba\u2091 ( V\u209b / V\u2090 ))<ul> <li>\u03ba\u2091 is the volume-fraction weighted hygroscopic parameter.</li> <li>V\u209b is the total solute volume fraction (all species except water).</li> <li>V\u2090 is the water volume fraction.</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/activity_module/#arguments_3","title":"Arguments","text":"<ul> <li>mass_concentration : Array of mass concentrations in kg/m\u00b3.</li> <li>kappa : Array of \u03ba (kappa) hygroscopic parameters, dimensionless.</li> <li>density : Array of densities in kg/m\u00b3 for each species.</li> <li>molar_mass : Array of molar masses in kg/mol for each species.</li> <li>water_index : Index of the water component in the arrays.</li> </ul>"},{"location":"API/particula/particles/properties/activity_module/#returns_3","title":"Returns","text":"<ul> <li>Array of species activities, dimensionless.</li> </ul>"},{"location":"API/particula/particles/properties/activity_module/#examples_3","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_kappa_activity(\n    mass_concentration=np.array([[1.0, 2.0], [3.0, 4.0]]),\n    kappa=np.array([0.0, 0.2]),\n    density=np.array([1000.0, 1200.0]),\n    molar_mass=np.array([18.015, 28.97]),\n    water_index=0\n)\n# Output: array([...])\n</code></pre>"},{"location":"API/particula/particles/properties/activity_module/#references_3","title":"References","text":"<ul> <li>Petters, M. D., &amp; Kreidenweis, S. M. (2007). \"A single parameter   representation of hygroscopic growth and cloud condensation nucleus   activity,\" Atmospheric Chemistry and Physics, 7(8), 1961-1971.</li> <li><code>DOI</code> - https://doi.org/10.5194/acp-7-1961-2007.</li> </ul>"},{"location":"API/particula/particles/properties/activity_module/#signature_3","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"mass_concentration\": \"nonnegative\",\n        \"kappa\": \"nonnegative\",\n        \"density\": \"positive\",\n        \"molar_mass\": \"positive\",\n    }\n)\ndef get_kappa_activity(\n    mass_concentration: NDArray[np.float64],\n    kappa: NDArray[np.float64],\n    density: NDArray[np.float64],\n    molar_mass: NDArray[np.float64],\n    water_index: int,\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/activity_module/#get_surface_partial_pressure","title":"get_surface_partial_pressure","text":"<p>Show source in activity_module.py:265</p> <p>Compute the partial pressure from activity and pure vapor pressure.</p> <p>This function calculates the partial pressure (p\u1d62) of a species, given its activity (a\u1d62) and pure vapor pressure (p\u1d62*). It follows:</p> <ul> <li>p\u1d62 = a\u1d62 \u00d7 p\u1d62*</li> </ul>"},{"location":"API/particula/particles/properties/activity_module/#arguments_4","title":"Arguments","text":"<ul> <li>pure_vapor_pressure : Pure vapor pressure of the species in Pa.</li> <li>activity : Activity of the species, dimensionless.</li> </ul>"},{"location":"API/particula/particles/properties/activity_module/#returns_4","title":"Returns","text":"<ul> <li>Partial pressure of the species in Pa.</li> </ul>"},{"location":"API/particula/particles/properties/activity_module/#examples_4","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_surface_partial_pressure(1000.0, 0.95)\n# Output: 950.0\n</code></pre>"},{"location":"API/particula/particles/properties/activity_module/#signature_4","title":"Signature","text":"<pre><code>@validate_inputs({\"pure_vapor_pressure\": \"positive\", \"activity\": \"nonnegative\"})\ndef get_surface_partial_pressure(\n    pure_vapor_pressure: Union[float, NDArray[np.float64]],\n    activity: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/aerodynamic_mobility_module/","title":"Aerodynamic Mobility Module","text":"<p>Particula Index / Particula / Particles / Properties / Aerodynamic Mobility Module</p> <p>Auto-generated documentation for particula.particles.properties.aerodynamic_mobility_module module.</p>"},{"location":"API/particula/particles/properties/aerodynamic_mobility_module/#get_aerodynamic_mobility","title":"get_aerodynamic_mobility","text":"<p>Show source in aerodynamic_mobility_module.py:13</p> <p>Calculate the aerodynamic mobility of a particle using classical fluid mechanics.</p> <p>The aerodynamic mobility (B) can be determined by:</p> <ul> <li>B = C / (6\u03c0\u03bcr)<ul> <li>B is the aerodynamic mobility (m\u00b2/s).</li> <li>C is the slip correction factor (dimensionless).</li> <li>\u03bc is the dynamic viscosity of the fluid (Pa\u00b7s).</li> <li>r is the radius of the particle (m).</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/aerodynamic_mobility_module/#arguments","title":"Arguments","text":"<ul> <li>particle_radius : The radius of the particle in meters.</li> <li>slip_correction_factor : Slip correction factor (dimensionless).</li> <li>dynamic_viscosity : Dynamic viscosity of the fluid in Pa\u00b7s.</li> </ul>"},{"location":"API/particula/particles/properties/aerodynamic_mobility_module/#returns","title":"Returns","text":"<ul> <li>The particle aerodynamic mobility in m\u00b2/s.</li> </ul>"},{"location":"API/particula/particles/properties/aerodynamic_mobility_module/#examples","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_particle_aerodynamic_mobility(\n    particle_radius=0.00005,\n    slip_correction_factor=1.1,\n    dynamic_viscosity=0.0000181\n)\n\nReferences:\n- Wikipedia contributors, \"Stokes' Law,\" Wikipedia,\nhttps://en.wikipedia.org/wiki/Stokes%27_law.\n\n#### Signature\n\n```python\n@validate_inputs(\n    {\n        \"particle_radius\": \"positive\",\n        \"slip_correction_factor\": \"nonnegative\",\n        \"dynamic_viscosity\": \"positive\",\n    }\n)\ndef get_aerodynamic_mobility(\n    particle_radius: Union[float, NDArray[np.float64]],\n    slip_correction_factor: Union[float, NDArray[np.float64]],\n    dynamic_viscosity: float,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/aerodynamic_size/","title":"Aerodynamic Size","text":"<p>Particula Index / Particula / Particles / Properties / Aerodynamic Size</p> <p>Auto-generated documentation for particula.particles.properties.aerodynamic_size module.</p>"},{"location":"API/particula/particles/properties/aerodynamic_size/#get_aerodynamic_length","title":"get_aerodynamic_length","text":"<p>Show source in aerodynamic_size.py:24</p> <p>Calculate the aerodynamic length scale of a particle for a given shape.</p> <p>The aerodynamic length (d_a) is determined by:</p> <ul> <li>d_a = d_p \u00d7 \u221a( (C_p / C_a) \u00d7 (\u03c1 / (\u03c1\u2080 \u00d7 \u03c7)) )<ul> <li>d_a is the aerodynamic size (m).</li> <li>d_p is the physical size (m).</li> <li>C_p is the slip correction factor for the physical size.</li> <li>C_a is the slip correction factor for the aerodynamic size.</li> <li>\u03c1 is the particle density (kg/m\u00b3).</li> <li>\u03c1\u2080 is the reference density (kg/m\u00b3).</li> <li>\u03c7 is the shape factor (dimensionless).</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/aerodynamic_size/#arguments","title":"Arguments","text":"<ul> <li>physical_length : Physical length scale of the particle (m).</li> <li>physical_slip_correction_factor : Slip correction factor for the     particle's physical size (dimensionless).</li> <li>aerodynamic_slip_correction_factor : Slip correction factor for the     particle's aerodynamic size (dimensionless).</li> <li>density : Density of the particle in kg/m\u00b3.</li> <li>reference_density : Reference density in kg/m\u00b3, typically water     (1000 by default).</li> <li>aerodynamic_shape_factor : Shape factor     (dimensionless, 1.0 for spheres).</li> </ul>"},{"location":"API/particula/particles/properties/aerodynamic_size/#returns","title":"Returns","text":"<ul> <li>Aerodynamic length scale (m).</li> </ul>"},{"location":"API/particula/particles/properties/aerodynamic_size/#examples","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_aerodynamic_length(\n    physical_length=0.00005,\n    physical_slip_correction_factor=1.1,\n    aerodynamic_slip_correction_factor=1.0,\n    density=1000,\n    reference_density=1000,\n    aerodynamic_shape_factor=1.0,\n)\n# Output: ...\n</code></pre>"},{"location":"API/particula/particles/properties/aerodynamic_size/#references","title":"References","text":"<ul> <li><code>-</code> \"Aerosol - Aerodynamic diameter,\" Wikipedia,   https://en.wikipedia.org/wiki/Aerosol#Aerodynamic_diameter</li> <li>Hinds, W.C. (1998). Aerosol Technology: Properties, behavior, and   measurement of airborne particles (2<sup>nd</sup> ed.). Wiley-Interscience.   (pp. 51\u201353, Section 3.6).</li> </ul>"},{"location":"API/particula/particles/properties/aerodynamic_size/#signature","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"physical_length\": \"nonnegative\",\n        \"physical_slip_correction_factor\": \"nonnegative\",\n        \"aerodynamic_slip_correction_factor\": \"nonnegative\",\n        \"density\": \"positive\",\n    }\n)\ndef get_aerodynamic_length(\n    physical_length: Union[float, NDArray[np.float64]],\n    physical_slip_correction_factor: Union[float, NDArray[np.float64]],\n    aerodynamic_slip_correction_factor: Union[float, NDArray[np.float64]],\n    density: Union[float, NDArray[np.float64]],\n    reference_density: float = 1000,\n    aerodynamic_shape_factor: float = 1.0,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/aerodynamic_size/#get_aerodynamic_shape_factor","title":"get_aerodynamic_shape_factor","text":"<p>Show source in aerodynamic_size.py:97</p> <p>Retrieve the aerodynamic shape factor for a given particle shape.</p> <p>The shape factor (\u03c7) accounts for non-sphericity in aerodynamic calculations. For spheres, \u03c7=1.0. Larger values indicate more deviation from spherical shape.</p>"},{"location":"API/particula/particles/properties/aerodynamic_size/#arguments_1","title":"Arguments","text":"<ul> <li>shape_key : String representing the particle's shape     (e.g. \"sphere\", \"sand\").</li> </ul>"},{"location":"API/particula/particles/properties/aerodynamic_size/#returns_1","title":"Returns","text":"<ul> <li>The shape factor (dimensionless).</li> </ul>"},{"location":"API/particula/particles/properties/aerodynamic_size/#examples_1","title":"Examples","text":"Example<pre><code>shape_factor = get_aerodynamic_shape_factor(\"sand\")\n# shape_factor = 1.57\n</code></pre>"},{"location":"API/particula/particles/properties/aerodynamic_size/#raises","title":"Raises","text":"<ul> <li>ValueError : If the shape key is not found in the predefined     dictionary.</li> </ul>"},{"location":"API/particula/particles/properties/aerodynamic_size/#references_1","title":"References","text":"<ul> <li>Hinds, W.C. (1998). Aerosol Technology: Properties, behavior, and   measurement of airborne particles (2<sup>nd</sup> ed.). Wiley-Interscience.</li> </ul>"},{"location":"API/particula/particles/properties/aerodynamic_size/#signature_1","title":"Signature","text":"<pre><code>def get_aerodynamic_shape_factor(shape_key: str) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/particles/properties/collision_radius_module/","title":"Collision Radius Module","text":"<p>Particula Index / Particula / Particles / Properties / Collision Radius Module</p> <p>Auto-generated documentation for particula.particles.properties.collision_radius_module module.</p>"},{"location":"API/particula/particles/properties/collision_radius_module/#get_collision_radius_mg1988","title":"get_collision_radius_mg1988","text":"<p>Show source in collision_radius_module.py:17</p> <p>Calculate the collision radius using the mg1988 model.</p> <p>The collision radius (R_c) is set equal to the radius of gyration (R_g):</p> <ul> <li>R_c = R_g</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#arguments","title":"Arguments","text":"<ul> <li>gyration_radius : Radius of gyration of the particle (m).</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#returns","title":"Returns","text":"<ul> <li>Collision radius of the particle (m).</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#examples","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_collision_radius_mg1988(1.5)\n# 1.5\n</code></pre>"},{"location":"API/particula/particles/properties/collision_radius_module/#references","title":"References","text":"<ul> <li>Mulholland, G. W., Mountain, R. D., Samson, R. J., &amp; Ernst, M. H. (1988). \"Cluster Size Distribution for Free Molecular Agglomeration.\"   Energy and Fuels, 2(4). https://doi.org/10.1021/ef00010a014</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#signature","title":"Signature","text":"<pre><code>@validate_inputs({\"gyration_radius\": \"nonnegative\"})\ndef get_collision_radius_mg1988(\n    gyration_radius: Union[NDArray[np.float64], float],\n) -&gt; Union[NDArray[np.float64], float]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/collision_radius_module/#get_collision_radius_mzg2002","title":"get_collision_radius_mzg2002","text":"<p>Show source in collision_radius_module.py:98</p> <p>Calculate the collision radius using the mzg2002 model.</p> <p>The collision radius (R_c) is given by the empirical relation:</p> <ul> <li>R_c = 1.037 \u00d7 (k\u2080^0.077) \u00d7 R_g<ul> <li>R_c is the collision radius (m).</li> <li>k\u2080 is the fractal prefactor (dimensionless).</li> <li>R_g is the radius of gyration (m).</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#arguments_1","title":"Arguments","text":"<ul> <li>gyration_radius : Radius of gyration of the particle (m).</li> <li>fractal_prefactor : Fractal prefactor of particle (dimensionless).</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#returns_1","title":"Returns","text":"<ul> <li>Collision radius of the particle (m).</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#examples_1","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_collision_radius_mzg2002(1.5, 1.2)\n# 1.577...\n</code></pre>"},{"location":"API/particula/particles/properties/collision_radius_module/#references_1","title":"References","text":"<ul> <li>Zurita-Gotor, M., &amp; Rosner, D. E. (2002). \"Effective diameters for   collisions of fractal-like aggregates: Recommendations for improved   aerosol coagulation frequency predictions.\" Journal of Colloid and   Interface Science, 255(1).   https://doi.org/10.1006/jcis.2002.8634</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#signature_1","title":"Signature","text":"<pre><code>@validate_inputs({\"gyration_radius\": \"positive\", \"fractal_prefactor\": \"positive\"})\ndef get_collision_radius_mzg2002(\n    gyration_radius: Union[NDArray[np.float64], float],\n    fractal_prefactor: Union[NDArray[np.float64], float],\n) -&gt; Union[NDArray[np.float64], float]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/collision_radius_module/#get_collision_radius_sr1992","title":"get_collision_radius_sr1992","text":"<p>Show source in collision_radius_module.py:53</p> <p>Calculate the collision radius using the sr1992 model.</p> <p>This model includes the fractal dimension (d_f). The collision radius (R_c) is:</p> <ul> <li>R_c = \u221a((d_f + 2) / 3) \u00d7 R_g<ul> <li>R_c is the collision radius (m).</li> <li>d_f is the fractal dimension (dimensionless).</li> <li>R_g is the radius of gyration (m).</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#arguments_2","title":"Arguments","text":"<ul> <li>gyration_radius : Radius of gyration of the particle (m).</li> <li>fractal_dimension : Fractal dimension of the particle     (dimensionless).</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#returns_2","title":"Returns","text":"<ul> <li>Collision radius of the particle (m).</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#examples_2","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_collision_radius_sr1992(1.5, 1.2)\n# 1.8371173...\n</code></pre>"},{"location":"API/particula/particles/properties/collision_radius_module/#references_2","title":"References","text":"<ul> <li>Rogak, S. N., &amp; Flagan, R. C. (1992). \"Coagulation of aerosol   agglomerates in the transition regime.\" Journal of Colloid and   Interface Science, 151(1), 203-224.   https://doi.org/10.1016/0021-9797(92)90252-H</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#signature_2","title":"Signature","text":"<pre><code>@validate_inputs({\"gyration_radius\": \"positive\", \"fractal_dimension\": \"positive\"})\ndef get_collision_radius_sr1992(\n    gyration_radius: Union[NDArray[np.float64], float],\n    fractal_dimension: Union[NDArray[np.float64], float],\n) -&gt; Union[NDArray[np.float64], float]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/collision_radius_module/#get_collision_radius_tt2012","title":"get_collision_radius_tt2012","text":"<p>Show source in collision_radius_module.py:142</p> <p>Calculate the collision radius using the tt2012 model.</p> <p>This function uses fitting parameters \u03b1\u2081, \u03b1\u2082 based on the fractal dimension (d_f) and number of monomers (N). The collision radius (R_c) is derived in multiple steps, ultimately returning:</p> <ul> <li>R_c = (radius_s_ii) / 2</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#arguments_3","title":"Arguments","text":"<ul> <li>fractal_dimension : Fractal dimension of the particle (dimensionless).</li> <li>number_of_particles : Number of monomers in the aggregate.</li> <li>gyration_radius : Radius of gyration of the particle (m).</li> <li>radius_monomer : Radius of the monomer (m).</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#returns_3","title":"Returns","text":"<ul> <li>Collision radius of the particle (m).</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#examples_3","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_collision_radius_tt2012(2.5, 100, 1.5, 0.1)\n# 2.034...\n</code></pre>"},{"location":"API/particula/particles/properties/collision_radius_module/#references_3","title":"References","text":"<ul> <li>Thajudeen, T., Gopalakrishnan, R., &amp; Hogan, C. J. (2012). \"The   collision rate of nonspherical particles and aggregates for all   diffusive knudsen numbers.\" Aerosol Science and Technology, 46(11).   https://doi.org/10.1080/02786826.2012.701353</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#signature_3","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"fractal_dimension\": \"positive\",\n        \"number_of_particles\": \"positive\",\n        \"gyration_radius\": \"positive\",\n        \"radius_monomer\": \"positive\",\n    }\n)\ndef get_collision_radius_tt2012(\n    fractal_dimension: float,\n    number_of_particles: float,\n    gyration_radius: Union[NDArray[np.float64], float],\n    radius_monomer: float,\n) -&gt; Union[NDArray[np.float64], float]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/collision_radius_module/#get_collision_radius_wq2022_rg","title":"get_collision_radius_wq2022_rg","text":"<p>Show source in collision_radius_module.py:199</p> <p>Calculate the collision radius using the wq2022_rg model.</p> <p>This function uses a fitted model based on the ratio (R_g / r\u2098). The collision radius (R_c) is:</p> <ul> <li>R_c = (A \u00d7 (R_g / r\u2098) + B) \u00d7 r\u2098<ul> <li>R_c is the collision radius (m).</li> <li>R_g is the radius of gyration (m).</li> <li>r\u2098 is the monomer radius (m).</li> <li>A, B are empirical coefficients from Qian et al. (2022).</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#arguments_4","title":"Arguments","text":"<ul> <li>gyration_radius : Radius of gyration of the particle (m).</li> <li>radius_monomer : Monomer radius (m).</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#returns_4","title":"Returns","text":"<ul> <li>Collision radius of the particle (m).</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#examples_4","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_collision_radius_wq2022_rg(1.5, 0.1)\n# 1.50...\n</code></pre>"},{"location":"API/particula/particles/properties/collision_radius_module/#references_4","title":"References","text":"<ul> <li>Qian, W., Kronenburg, A., Hui, X., Lin, Y., &amp; Karsch, M. (2022).   \"Effects of agglomerate characteristics on their collision kernels in   the free molecular regime.\" Journal of Aerosol Science, 159.   https://doi.org/10.1016/j.jaerosci.2021.105868</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#signature_4","title":"Signature","text":"<pre><code>@validate_inputs({\"gyration_radius\": \"positive\", \"radius_monomer\": \"positive\"})\ndef get_collision_radius_wq2022_rg(\n    gyration_radius: Union[NDArray[np.float64], float], radius_monomer: float\n) -&gt; Union[NDArray[np.float64], float]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/collision_radius_module/#get_collision_radius_wq2022_rg_df","title":"get_collision_radius_wq2022_rg_df","text":"<p>Show source in collision_radius_module.py:247</p> <p>Calculate the collision radius using the wq2022_rg_df model.</p> <p>This function uses a fitted model based on fractal dimension (d_f), ratio (R_g / r\u2098), and empirical coefficients. The collision radius (R_c) is:</p> <ul> <li>R_c = (A \u00d7 d_f^B \u00d7 (R_g / r\u2098) + C) \u00d7 r\u2098<ul> <li>R_c is the collision radius (m).</li> <li>d_f is the fractal dimension (dimensionless).</li> <li>R_g is the radius of gyration (m).</li> <li>r\u2098 is the monomer radius (m).</li> <li>A, B, C are empirical coefficients from Qian et al. (2022).</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#arguments_5","title":"Arguments","text":"<ul> <li>fractal_dimension : Fractal dimension of particle (dimensionless).</li> <li>gyration_radius : Radius of gyration of the particle (m).</li> <li>radius_monomer : Monomer radius (m).</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#returns_5","title":"Returns","text":"<ul> <li>Collision radius of the particle (m).</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#examples_5","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_collision_radius_wq2022_rg_df(2.5, 1.5, 0.1)\n# 1.66...\n</code></pre>"},{"location":"API/particula/particles/properties/collision_radius_module/#references_5","title":"References","text":"<ul> <li>Qian, W., Kronenburg, A., Hui, X., Lin, Y., &amp; Karsch, M. (2022).   \"Effects of agglomerate characteristics on their collision kernels in   the free molecular regime.\" Journal of Aerosol Science, 159.   https://doi.org/10.1016/j.jaerosci.2021.105868</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#signature_5","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"fractal_dimension\": \"positive\",\n        \"gyration_radius\": \"positive\",\n        \"radius_monomer\": \"positive\",\n    }\n)\ndef get_collision_radius_wq2022_rg_df(\n    fractal_dimension: Union[NDArray[np.float64], float],\n    gyration_radius: Union[NDArray[np.float64], float],\n    radius_monomer: float,\n) -&gt; Union[NDArray[np.float64], float]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/collision_radius_module/#get_collision_radius_wq2022_rg_df_k0","title":"get_collision_radius_wq2022_rg_df_k0","text":"<p>Show source in collision_radius_module.py:302</p> <p>Calculate the collision radius using the wq2022_rg_df_k0 model.</p> <p>This function uses a fitted expression depending on fractal dimension (d_f), fractal prefactor (k\u2080), and ratio (R_g / r\u2098). The collision radius (R_c) is:</p> <ul> <li>R_c = (A \u00d7 d_f^B \u00d7 k\u2080^C \u00d7 (R_g / r\u2098) + D \u00d7 k\u2080 + E) \u00d7 r\u2098<ul> <li>R_c is the collision radius (m).</li> <li>d_f is the fractal dimension (dimensionless).</li> <li>k\u2080 is the fractal prefactor (dimensionless).</li> <li>R_g is the radius of gyration (m).</li> <li>r\u2098 is the monomer radius (m).</li> <li>A, B, C, D, E are empirical coefficients from Qian et al. (2022).</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#arguments_6","title":"Arguments","text":"<ul> <li>fractal_dimension : Fractal dimension of particle (dimensionless).</li> <li>fractal_prefactor : Fractal prefactor of particle (dimensionless).</li> <li>gyration_radius : Radius of gyration (m).</li> <li>radius_monomer : Monomer radius (m).</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#returns_6","title":"Returns","text":"<ul> <li>Collision radius of the particle (m).</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#examples_6","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_collision_radius_wq2022_rg_df_k0(2.5, 1.2, 1.5, 0.1)\n# 1.83...\n</code></pre>"},{"location":"API/particula/particles/properties/collision_radius_module/#references_6","title":"References","text":"<ul> <li>Qian, W., Kronenburg, A., Hui, X., Lin, Y., &amp; Karsch, M. (2022).   \"Effects of agglomerate characteristics on their collision kernels in   the free molecular regime.\" Journal of Aerosol Science, 159.   https://doi.org/10.1016/j.jaerosci.2021.105868</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#signature_6","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"fractal_dimension\": \"positive\",\n        \"fractal_prefactor\": \"positive\",\n        \"gyration_radius\": \"positive\",\n        \"radius_monomer\": \"positive\",\n    }\n)\ndef get_collision_radius_wq2022_rg_df_k0(\n    fractal_dimension: float,\n    fractal_prefactor: float,\n    gyration_radius: Union[NDArray[np.float64], float],\n    radius_monomer: float,\n) -&gt; Union[NDArray[np.float64], float]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/collision_radius_module/#get_collision_radius_wq2022_rg_df_k0_a13","title":"get_collision_radius_wq2022_rg_df_k0_a13","text":"<p>Show source in collision_radius_module.py:364</p> <p>Calculate the collision radius using the wq2022_rg_df_k0_a13 model.</p> <p>This function uses a fitted expression depending on fractal dimension (d_f), fractal prefactor (k\u2080), shape anisotropy (A\u2081\u2083), and ratio (R_g / r\u2098). The collision radius (R_c) is:</p> <ul> <li>R_c = (A \u00d7 d_f^B \u00d7 k\u2080^C \u00d7 (R_g / r\u2098) + D \u00d7 k\u2080 + E \u00d7 A\u2081\u2083 + F) \u00d7 r\u2098<ul> <li>R_c is the collision radius (m).</li> <li>d_f is the fractal dimension (dimensionless).</li> <li>k\u2080 is the fractal prefactor (dimensionless).</li> <li>A\u2081\u2083 is the shape anisotropy parameter (dimensionless).</li> <li>R_g is the radius of gyration (m).</li> <li>r\u2098 is the monomer radius (m).</li> <li>A, B, C, D, E, F are empirical coefficients from Qian et al. (2022).</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#arguments_7","title":"Arguments","text":"<ul> <li>fractal_dimension : Fractal dimension of particle (dimensionless).</li> <li>fractal_prefactor : Fractal prefactor of particle (dimensionless).</li> <li>shape_anisotropy : Shape anisotropy parameter (dimensionless, A\u2081\u2083).</li> <li>gyration_radius : Radius of gyration (m).</li> <li>radius_monomer : Monomer radius (m).</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#returns_7","title":"Returns","text":"<ul> <li>Collision radius of the particle (m).</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#examples_7","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_collision_radius_wq2022_rg_df_k0_a13(\n    2.5, 1.2, 1.82, 1.5, 0.1\n)\n# 1.82...\n</code></pre>"},{"location":"API/particula/particles/properties/collision_radius_module/#references_7","title":"References","text":"<ul> <li>Qian, W., Kronenburg, A., Hui, X., Lin, Y., &amp; Karsch, M. (2022).   \"Effects of agglomerate characteristics on their collision kernels in   the free molecular regime.\" Journal of Aerosol Science, 159.   https://doi.org/10.1016/j.jaerosci.2021.105868</li> </ul>"},{"location":"API/particula/particles/properties/collision_radius_module/#signature_7","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"fractal_dimension\": \"positive\",\n        \"fractal_prefactor\": \"positive\",\n        \"shape_anisotropy\": \"positive\",\n        \"gyration_radius\": \"positive\",\n        \"radius_monomer\": \"positive\",\n    }\n)\ndef get_collision_radius_wq2022_rg_df_k0_a13(\n    fractal_dimension: float,\n    fractal_prefactor: float,\n    shape_anisotropy: float,\n    gyration_radius: Union[NDArray[np.float64], float],\n    radius_monomer: float,\n) -&gt; Union[NDArray[np.float64], float]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/coulomb_enhancement/","title":"Coulomb Enhancement","text":"<p>Particula Index / Particula / Particles / Properties / Coulomb Enhancement</p> <p>Auto-generated documentation for particula.particles.properties.coulomb_enhancement module.</p>"},{"location":"API/particula/particles/properties/coulomb_enhancement/#get_coulomb_continuum_limit","title":"get_coulomb_continuum_limit","text":"<p>Show source in coulomb_enhancement.py:144</p> <p>Calculate the continuum-limit Coulomb enhancement factor, \u0393_c.</p> <p>The continuum-limit factor is computed by:</p> <ul> <li>\u0393_c =     \u03d5_E / [1 - exp(-\u03d5_E)]    if \u03d5_E \u2260 0     1                        if \u03d5_E = 0</li> </ul> <p>where \u03d5_E is the Coulomb potential ratio (dimensionless).</p>"},{"location":"API/particula/particles/properties/coulomb_enhancement/#arguments","title":"Arguments","text":"<ul> <li>coulomb_potential : The Coulomb potential ratio \u03d5_E (dimensionless).</li> </ul>"},{"location":"API/particula/particles/properties/coulomb_enhancement/#returns","title":"Returns","text":"<ul> <li>The Coulomb enhancement factor in the continuum limit (dimensionless).</li> </ul>"},{"location":"API/particula/particles/properties/coulomb_enhancement/#examples","title":"Examples","text":"Example<pre><code>import numpy as np\nimport particula as par\npotential = np.array([-0.5, 0.0, 0.5])\npar.particles.get_coulomb_continuum_limit(potential)\nprint(gamma_cont)\n# Output: array([...])\n</code></pre>"},{"location":"API/particula/particles/properties/coulomb_enhancement/#references","title":"References","text":"<ul> <li>Equation (6b): Gopalakrishnan, R., &amp; Hogan, C. J. (2012).   Coulomb-influenced collisions in aerosols and dusty plasmas.   Physical Review E, 85(2). https://doi.org/10.1103/PhysRevE.85.026410</li> </ul>"},{"location":"API/particula/particles/properties/coulomb_enhancement/#signature","title":"Signature","text":"<pre><code>@validate_inputs({\"coulomb_potential\": \"finite\"})\ndef get_coulomb_continuum_limit(\n    coulomb_potential: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/coulomb_enhancement/#get_coulomb_enhancement_ratio","title":"get_coulomb_enhancement_ratio","text":"<p>Show source in coulomb_enhancement.py:23</p> <p>Calculate the Coulomb potential ratio, \u03d5_E, for particle-particle interactions.</p> <p>The potential ratio is computed using:</p> <ul> <li>\u03d5_E = - (q\u1d62 \u00d7 q\u2c7c \u00d7 e\u00b2) / [4\u03c0 \u03b5\u2080 (r\u1d62 + r\u2c7c) k_B T]<ul> <li>\u03d5_E is the Coulomb potential ratio (dimensionless).</li> <li>q\u1d62, q\u2c7c are the charges (dimensionless, e.g. the number of electrons).</li> <li>e is the elementary charge in coulombs (C).</li> <li>\u03b5\u2080 is the electric permittivity of free space (F\u00b7m\u207b\u00b9).</li> <li>r\u1d62, r\u2c7c are the particle radii (m).</li> <li>k_B is the Boltzmann constant (J\u00b7K\u207b\u00b9).</li> <li>T is the temperature (K).</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/coulomb_enhancement/#arguments_1","title":"Arguments","text":"<ul> <li>radius : Radius of the particles (m).</li> <li>charge : Number of integer charges on the particles (dimensionless).</li> <li>temperature : System temperature (K).</li> <li>ratio_lower_limit : Lower limit to clip the potential ratio for very   large negative (repulsive) values.</li> </ul>"},{"location":"API/particula/particles/properties/coulomb_enhancement/#returns_1","title":"Returns","text":"<ul> <li>The Coulomb potential ratio (dimensionless).</li> </ul>"},{"location":"API/particula/particles/properties/coulomb_enhancement/#examples_1","title":"Examples","text":"Example<pre><code>import numpy as np\nimport particula as par\npar.particles.get_coulomb_enhancement_ratio(\n    radius=np.array([1e-7, 2e-7]),\n    charge=np.array([1, 2]),\n    temperature=298.15,\n    ratio_lower_limit=-200\n)\n# Output: array([...])\n</code></pre>"},{"location":"API/particula/particles/properties/coulomb_enhancement/#references_1","title":"References","text":"<ul> <li>Equation (7): Gopalakrishnan, R., &amp; Hogan, C. J. (2012).   Coulomb-influenced collisions in aerosols and dusty plasmas.   Physical Review E, 85(2). https://doi.org/10.1103/PhysRevE.85.026410</li> </ul>"},{"location":"API/particula/particles/properties/coulomb_enhancement/#signature_1","title":"Signature","text":"<pre><code>@validate_inputs({\"particle_radius\": \"nonnegative\"})\ndef get_coulomb_enhancement_ratio(\n    particle_radius: Union[float, NDArray[np.float64]],\n    charge: Union[int, NDArray[np.float64]] = 0,\n    temperature: float = 298.15,\n    ratio_lower_limit: float = -200,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/coulomb_enhancement/#get_coulomb_kinetic_limit","title":"get_coulomb_kinetic_limit","text":"<p>Show source in coulomb_enhancement.py:100</p> <p>Calculate the kinetic-limit Coulomb enhancement factor, \u0393\u2096\u1d62\u2099.</p> <p>The kinetic-limit factor is computed by:</p> <ul> <li>\u0393\u2096\u1d62\u2099 =     1 + \u03d5_E      if \u03d5_E \u2265 0     exp(\u03d5_E)     if \u03d5_E &lt; 0</li> </ul> <p>where \u03d5_E is the Coulomb potential ratio (dimensionless).</p>"},{"location":"API/particula/particles/properties/coulomb_enhancement/#arguments_2","title":"Arguments","text":"<ul> <li>coulomb_potential : The Coulomb potential ratio \u03d5_E (dimensionless).</li> </ul>"},{"location":"API/particula/particles/properties/coulomb_enhancement/#returns_2","title":"Returns","text":"<ul> <li>The Coulomb enhancement factor in the kinetic limit (dimensionless).</li> </ul>"},{"location":"API/particula/particles/properties/coulomb_enhancement/#examples_2","title":"Examples","text":"Example<pre><code>import numpy as np\nimport particula as par\npotential = np.array([-0.5, 0.0, 0.5])\npar.particles.get_coulomb_kinetic_limit(potential)\n# Output: array([...])\n</code></pre>"},{"location":"API/particula/particles/properties/coulomb_enhancement/#references_2","title":"References","text":"<ul> <li>Equations (6d) and (6e): Gopalakrishnan, R., &amp; Hogan, C. J. (2012).   Coulomb-influenced collisions in aerosols and dusty plasmas.   Physical Review E, 85(2). https://doi.org/10.1103/PhysRevE.85.026410</li> </ul>"},{"location":"API/particula/particles/properties/coulomb_enhancement/#signature_2","title":"Signature","text":"<pre><code>@validate_inputs({\"coulomb_potential\": \"finite\"})\ndef get_coulomb_kinetic_limit(\n    coulomb_potential: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/diffusion_coefficient/","title":"Diffusion Coefficient","text":"<p>Particula Index / Particula / Particles / Properties / Diffusion Coefficient</p> <p>Auto-generated documentation for particula.particles.properties.diffusion_coefficient module.</p>"},{"location":"API/particula/particles/properties/diffusion_coefficient/#get_diffusion_coefficient","title":"get_diffusion_coefficient","text":"<p>Show source in diffusion_coefficient.py:22</p> <p>Calculate the diffusion coefficient of a particle based on temperature and aerodynamic mobility.</p> <p>The diffusion coefficient (D) can be computed using:</p> <ul> <li>D = k_B T \u00d7 B<ul> <li>D is the diffusion coefficient in m\u00b2/s,</li> <li>k_B is the Boltzmann constant in J/K,</li> <li>T is the temperature in Kelvin,</li> <li>B is the aerodynamic mobility in m\u00b2/s.</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/diffusion_coefficient/#arguments","title":"Arguments","text":"<ul> <li>temperature : Temperature in Kelvin (K).</li> <li>aerodynamic_mobility : Aerodynamic mobility in m\u00b2/s.</li> <li>boltzmann_constant : Boltzmann constant in J/K.</li> </ul>"},{"location":"API/particula/particles/properties/diffusion_coefficient/#returns","title":"Returns","text":"<ul> <li>The diffusion coefficient of the particle in m\u00b2/s.</li> </ul>"},{"location":"API/particula/particles/properties/diffusion_coefficient/#examples","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_diffusion_coefficient(\n    temperature=300.0, aerodynamic_mobility=1.0e-8\n)\n# Output: ...\n</code></pre>"},{"location":"API/particula/particles/properties/diffusion_coefficient/#references","title":"References","text":"<ul> <li>Einstein, A. (1905). \"On the movement of small particles suspended   in stationary liquids required by the molecular-kinetic theory of   heat.\" Annalen der Physik, 17(8), 549\u2013560.</li> <li>\"Stokes-Einstein equation,\" Wikipedia,   https://en.wikipedia.org/wiki/Stokes%E2%80%93Einstein_equation</li> </ul>"},{"location":"API/particula/particles/properties/diffusion_coefficient/#signature","title":"Signature","text":"<pre><code>@validate_inputs({\"temperature\": \"positive\", \"aerodynamic_mobility\": \"nonnegative\"})\ndef get_diffusion_coefficient(\n    temperature: Union[float, NDArray[np.float64]],\n    aerodynamic_mobility: Union[float, NDArray[np.float64]],\n    boltzmann_constant: float = BOLTZMANN_CONSTANT,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/diffusion_coefficient/#see-also","title":"See also","text":"<ul> <li>BOLTZMANN_CONSTANT</li> </ul>"},{"location":"API/particula/particles/properties/diffusion_coefficient/#get_diffusion_coefficient_via_system_state","title":"get_diffusion_coefficient_via_system_state","text":"<p>Show source in diffusion_coefficient.py:72</p> <p>Calculate the diffusion coefficient from system state parameters.</p> <p>This function determines the diffusion coefficient (D) of a particle by: 1. Computing gas properties (dynamic viscosity, mean free path), 2. Determining particle slip correction and aerodynamic mobility, 3. Calling get_diffusion_coefficient() to get D.</p>"},{"location":"API/particula/particles/properties/diffusion_coefficient/#arguments_1","title":"Arguments","text":"<ul> <li>particle_radius : Particle radius in meters (m).</li> <li>temperature : System temperature in Kelvin (K).</li> <li>pressure : System pressure in Pascals (Pa).</li> </ul>"},{"location":"API/particula/particles/properties/diffusion_coefficient/#returns_1","title":"Returns","text":"<ul> <li>The diffusion coefficient of the particle in m\u00b2/s.</li> </ul>"},{"location":"API/particula/particles/properties/diffusion_coefficient/#examples_1","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_diffusion_coefficient_via_system_state(\n    particle_radius=1.0e-7,\n    temperature=298.15,\n    pressure=101325\n)\n# Output: ...\n</code></pre>"},{"location":"API/particula/particles/properties/diffusion_coefficient/#references_1","title":"References","text":"<ul> <li>Millikan, R. A. (1923). \"On the elementary electrical charge and the   Avogadro constant.\" Physical Review, 2(2), 109\u2013143. [check]</li> <li>\"Mass Diffusion,\" Wikipedia,   https://en.wikipedia.org/wiki/Diffusion#Mass_diffusion</li> </ul>"},{"location":"API/particula/particles/properties/diffusion_coefficient/#signature_1","title":"Signature","text":"<pre><code>def get_diffusion_coefficient_via_system_state(\n    particle_radius: Union[float, NDArray[np.float64]],\n    temperature: float,\n    pressure: float,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/diffusive_knudsen_module/","title":"Diffusive Knudsen Module","text":"<p>Particula Index / Particula / Particles / Properties / Diffusive Knudsen Module</p> <p>Auto-generated documentation for particula.particles.properties.diffusive_knudsen_module module.</p>"},{"location":"API/particula/particles/properties/diffusive_knudsen_module/#get_diffusive_knudsen_number","title":"get_diffusive_knudsen_number","text":"<p>Show source in diffusive_knudsen_module.py:13</p> <p>Compute the diffusive Knudsen number for particle-particle interactions.</p> <p>The diffusive Knudsen number (Kn_d) differs from the standard Knudsen number. It represents the ratio of the mean particle persistence distance to the effective Coulombic interaction scale. Mathematically:</p> <ul> <li>Kn_d = [ \u221a(k_B \u00d7 T \u00d7 \u03bc_red) / f_red ] / [ (r\u1d62 + r\u2c7c) \u00d7 (\u0393_c / \u0393_k) ]<ul> <li>k_B is the Boltzmann constant (J/K).</li> <li>T is the temperature (K).</li> <li>\u03bc_red is the reduced mass of particles (kg).</li> <li>f_red is the reduced friction factor (dimensionless).</li> <li>r\u1d62 + r\u2c7c is the sum of radii for the interacting particles (m).</li> <li>\u0393_c is the continuum-limit Coulomb enhancement factor(dimensionless).</li> <li>\u0393_k is the kinetic-limit Coulomb enhancement factor (dimensionless).</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/diffusive_knudsen_module/#arguments","title":"Arguments","text":"<ul> <li>particle_radius : Radius of the particle(s) in meters (m).</li> <li>particle_mass : Mass of the particle(s) in kilograms (kg).</li> <li>friction_factor : Friction factor(s) (dimensionless).</li> <li>coulomb_potential_ratio : Coulomb potential ratio (dimensionless),   zero if no charge.</li> <li>temperature : Temperature of the system in Kelvin (K).</li> </ul>"},{"location":"API/particula/particles/properties/diffusive_knudsen_module/#returns","title":"Returns","text":"<ul> <li>The diffusive Knudsen number, either a float or NDArray[np.float64].</li> </ul>"},{"location":"API/particula/particles/properties/diffusive_knudsen_module/#examples","title":"Examples","text":"Single Particle Example<pre><code>import numpy as np\nimport particula as par\npar.particles.get_diffusive_knudsen_number(\n    particle_radius=1e-7,\n    particle_mass=1e-17,\n    friction_factor=0.8,\n    coulomb_potential_ratio=0.3,\n    temperature=300\n)\n# Output: 0.12...\n</code></pre> Multiple Particles Example<pre><code>import numpy as np\nimport particula as par\n# Multiple particles example\nradius_arr = np.array([1e-7, 2e-7])\nmass_arr = np.array([1e-17, 2e-17])\nfriction_arr = np.array([0.8, 1.1])\npotential_arr = np.array([0.3, 0.5])\npar.particles.par.get_diffusive_knudsen_number(\n    radius_arr, mass_arr, friction_arr, potential_arr\n)\n# Output: array([...])\n</code></pre>"},{"location":"API/particula/particles/properties/diffusive_knudsen_module/#references","title":"References","text":"<ul> <li>Chahl, H. S., &amp; Gopalakrishnan, R. (2019). \"High potential, near free   molecular regime Coulombic collisions in aerosols and dusty plasmas.\"   Aerosol Science and Technology, 53(8), 933-957.   https://doi.org/10.1080/02786826.2019.1614522</li> <li>Gopalakrishnan, R., &amp; Hogan, C. J. (2012). \"Coulomb-influenced   collisions in aerosols and dusty plasmas.\" Physical Review E, 85(2).   https://doi.org/10.1103/PhysRevE.85.026410</li> </ul>"},{"location":"API/particula/particles/properties/diffusive_knudsen_module/#signature","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"particle_radius\": \"nonnegative\",\n        \"particle_mass\": \"nonnegative\",\n        \"friction_factor\": \"nonnegative\",\n    }\n)\ndef get_diffusive_knudsen_number(\n    particle_radius: Union[float, NDArray[np.float64]],\n    particle_mass: Union[float, NDArray[np.float64]],\n    friction_factor: Union[float, NDArray[np.float64]],\n    coulomb_potential_ratio: Union[float, NDArray[np.float64]] = 0.0,\n    temperature: float = 298.15,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/friction_factor_module/","title":"Friction Factor Module","text":"<p>Particula Index / Particula / Particles / Properties / Friction Factor Module</p> <p>Auto-generated documentation for particula.particles.properties.friction_factor_module module.</p>"},{"location":"API/particula/particles/properties/friction_factor_module/#get_friction_factor","title":"get_friction_factor","text":"<p>Show source in friction_factor_module.py:18</p> <p>Calculate the friction factor for a particle in a fluid.</p> <p>This friction factor (f) is the proportionality constant between the fluid velocity and the resulting drag force on the particle. The formula used is:</p> <ul> <li>f = (6\u03c0\u03bc r) / C<ul> <li>f is the friction factor (N\u00b7s/m),</li> <li>\u03bc is the dynamic viscosity of the fluid (Pa\u00b7s),</li> <li>r is the radius of the particle (m),</li> <li>C is the slip correction factor (dimensionless).</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/friction_factor_module/#arguments","title":"Arguments","text":"<ul> <li>particle_radius : Radius of the particle in meters (m).</li> <li>dynamic_viscosity : Dynamic viscosity of the fluid in Pa\u00b7s.</li> <li>slip_correction : Slip correction factor (dimensionless).</li> </ul>"},{"location":"API/particula/particles/properties/friction_factor_module/#returns","title":"Returns","text":"<ul> <li>The friction factor of the particle in N\u00b7s/m.</li> </ul>"},{"location":"API/particula/particles/properties/friction_factor_module/#examples","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_friction_factor(\n    particle_radius=1e-7,\n    dynamic_viscosity=1.8e-5,\n    slip_correction=1.1\n)\n# Output: ...\n</code></pre>"},{"location":"API/particula/particles/properties/friction_factor_module/#references","title":"References","text":"<ul> <li>Zhang, C., Thajudeen, T., Larriba, C., Schwartzentruber, T. E.,   &amp; Hogan, C. J. (2012). \"Determination of the Scalar Friction Factor   for Nonspherical Particles and Aggregates Across the Entire Knudsen   Number Range by Direct Simulation Monte Carlo (DSMC).\"   Aerosol Science and Technology, 46(10), 1065-1078.   https://doi.org/10.1080/02786826.2012.690543</li> </ul>"},{"location":"API/particula/particles/properties/friction_factor_module/#signature","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"particle_radius\": \"nonnegative\",\n        \"dynamic_viscosity\": \"positive\",\n        \"slip_correction\": \"positive\",\n    }\n)\ndef get_friction_factor(\n    particle_radius: Union[float, NDArray[np.float64]],\n    dynamic_viscosity: float,\n    slip_correction: Union[float, NDArray[np.float64]],\n): ...\n</code></pre>"},{"location":"API/particula/particles/properties/inertia_time/","title":"Inertia Time","text":"<p>Particula Index / Particula / Particles / Properties / Inertia Time</p> <p>Auto-generated documentation for particula.particles.properties.inertia_time module.</p>"},{"location":"API/particula/particles/properties/inertia_time/#get_particle_inertia_time","title":"get_particle_inertia_time","text":"<p>Show source in inertia_time.py:12</p> <p>Compute the particle inertia time (\u03c4_p).</p> <p>The particle inertia time represents the response time of a particle to changes in fluid velocity, given by:</p> <ul> <li>\u03c4_p = (2 / 9) \u00d7 (\u03c1_p / \u03c1_f) \u00d7 (r\u00b2 / \u03bd)<ul> <li>\u03c4_p is the particle inertia time in seconds (s).</li> <li>\u03c1_p is the particle density (kg/m\u00b3).</li> <li>\u03c1_f is the surrounding fluid density (kg/m\u00b3).</li> <li>r is the particle radius (m).</li> <li>\u03bd is the kinematic viscosity of the fluid (m\u00b2/s).</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/inertia_time/#arguments","title":"Arguments","text":"<ul> <li>particle_radius : Particle radius in meters (m).</li> <li>particle_density : Density of the particle in kg/m\u00b3.</li> <li>fluid_density : Density of the fluid in kg/m\u00b3.</li> <li>kinematic_viscosity : Kinematic viscosity of the fluid in m\u00b2/s.</li> </ul>"},{"location":"API/particula/particles/properties/inertia_time/#returns","title":"Returns","text":"<ul> <li>The particle inertia time in seconds (s). Returned as either a float     or NDArray[np.float64].</li> </ul>"},{"location":"API/particula/particles/properties/inertia_time/#examples","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_particle_inertia_time(\n    particle_radius=1e-6,\n    particle_density=1000.0,\n    fluid_density=1.225,\n    kinematic_viscosity=1.5e-5\n)\n# Output: ...\n</code></pre>"},{"location":"API/particula/particles/properties/inertia_time/#references","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). \"Effects of turbulence on   the geometric collision rate of sedimenting droplets. Part 2. Theory   and parameterization.\" New Journal of Physics, 10.   https://doi.org/10.1088/1367-2630/10/7/075016</li> </ul>"},{"location":"API/particula/particles/properties/inertia_time/#signature","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"particle_radius\": \"nonnegative\",\n        \"particle_density\": \"positive\",\n        \"fluid_density\": \"positive\",\n        \"kinematic_viscosity\": \"positive\",\n    }\n)\ndef get_particle_inertia_time(\n    particle_radius: Union[float, NDArray[np.float64]],\n    particle_density: Union[float, NDArray[np.float64]],\n    fluid_density: Union[float, NDArray[np.float64]],\n    kinematic_viscosity: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/kelvin_effect_module/","title":"Kelvin Effect Module","text":"<p>Particula Index / Particula / Particles / Properties / Kelvin Effect Module</p> <p>Auto-generated documentation for particula.particles.properties.kelvin_effect_module module.</p>"},{"location":"API/particula/particles/properties/kelvin_effect_module/#get_kelvin_radius","title":"get_kelvin_radius","text":"<p>Show source in kelvin_effect_module.py:12</p> <p>Compute the Kelvin radius (r\u2096) to account for curvature effects on vapor pressure.</p> <p>The Kelvin radius is defined by:</p> <ul> <li>r\u2096 = (2 \u00d7 \u03c3 \u00d7 M) / (R \u00d7 T \u00d7 \u03c1)<ul> <li>r\u2096 is Kelvin radius in meters (m).</li> <li>\u03c3 is the effective surface tension in N/m.</li> <li>M is the molar mass in kg/mol.</li> <li>R is the universal gas constant in J/(mol\u00b7K).</li> <li>T is the temperature in Kelvin (K).</li> <li>\u03c1 is the effective density in kg/m\u00b3.</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/kelvin_effect_module/#arguments","title":"Arguments","text":"<ul> <li>effective_surface_tension : Surface tension of the mixture (N/m).</li> <li>effective_density : Effective density of the mixture (kg/m\u00b3).</li> <li>molar_mass : Molar mass (kg/mol).</li> <li>temperature : Temperature of the system (K).</li> </ul>"},{"location":"API/particula/particles/properties/kelvin_effect_module/#returns","title":"Returns","text":"<ul> <li>Kelvin radius in meters (float or NDArray[np.float64]).</li> </ul>"},{"location":"API/particula/particles/properties/kelvin_effect_module/#examples","title":"Examples","text":"Example<pre><code>import numpy as np\nimport particula as par\npar.particles.get_kelvin_radius(\n    effective_surface_tension=0.072,\n    effective_density=1000.0,\n    molar_mass=0.018,\n    temperature=298.15\n)\n# Output: ...\n</code></pre>"},{"location":"API/particula/particles/properties/kelvin_effect_module/#references","title":"References","text":"<ul> <li>\"Kelvin equation,\" Wikipedia,   https://en.wikipedia.org/wiki/Kelvin_equation</li> </ul>"},{"location":"API/particula/particles/properties/kelvin_effect_module/#signature","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"effective_surface_tension\": \"positive\",\n        \"effective_density\": \"positive\",\n        \"molar_mass\": \"positive\",\n        \"temperature\": \"positive\",\n    }\n)\ndef get_kelvin_radius(\n    effective_surface_tension: Union[float, NDArray[np.float64]],\n    effective_density: Union[float, NDArray[np.float64]],\n    molar_mass: Union[float, NDArray[np.float64]],\n    temperature: float,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/kelvin_effect_module/#get_kelvin_term","title":"get_kelvin_term","text":"<p>Show source in kelvin_effect_module.py:71</p> <p>Compute the Kelvin exponential term to account for curvature effects.</p> <p>The Kelvin term (K) is given by:</p> <ul> <li>K = exp(r\u2096 / r\u209a)<ul> <li>K is dimensionless.</li> <li>r\u2096 is the Kelvin radius (m).</li> <li>r\u209a is the particle radius (m).</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/kelvin_effect_module/#arguments_1","title":"Arguments","text":"<ul> <li>particle_radius : Radius of the particle (m).</li> <li>kelvin_radius_value : Precomputed Kelvin radius (m).</li> </ul>"},{"location":"API/particula/particles/properties/kelvin_effect_module/#returns_1","title":"Returns","text":"<ul> <li>Dimensionless exponential factor adjusting vapor pressure.</li> </ul>"},{"location":"API/particula/particles/properties/kelvin_effect_module/#examples_1","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_kelvin_term(\n    particle_radius=1e-7,\n    kelvin_radius_value=2e-7\n)\nprint(kv_term)\n# Output: ...\n</code></pre>"},{"location":"API/particula/particles/properties/kelvin_effect_module/#references_1","title":"References","text":"<ul> <li>Donahue, N. M., et al. (2013). \"How do organic vapors contribute to   new-particle formation?\" Faraday Discussions, 165, 91\u2013104.   https://doi.org/10.1039/C3FD00046J. [check]</li> </ul>"},{"location":"API/particula/particles/properties/kelvin_effect_module/#signature_1","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\"particle_radius\": \"nonnegative\", \"kelvin_radius_value\": \"nonnegative\"}\n)\ndef get_kelvin_term(\n    particle_radius: Union[float, NDArray[np.float64]],\n    kelvin_radius_value: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/knudsen_number_module/","title":"Knudsen Number Module","text":"<p>Particula Index / Particula / Particles / Properties / Knudsen Number Module</p> <p>Auto-generated documentation for particula.particles.properties.knudsen_number_module module.</p>"},{"location":"API/particula/particles/properties/knudsen_number_module/#get_knudsen_number","title":"get_knudsen_number","text":"<p>Show source in knudsen_number_module.py:13</p> <p>Calculate the Knudsen number (Kn) from the gas mean free path and particle radius.</p> <p>The Knudsen number (Kn) indicates whether a flow is in the continuum regime or the free molecular regime. It is computed by:</p> <ul> <li>Kn = \u03bb / r<ul> <li>Kn is the Knudsen number (dimensionless),</li> <li>\u03bb is the mean free path in meters (m),</li> <li>r is the particle radius in meters (m).</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/knudsen_number_module/#arguments","title":"Arguments","text":"<ul> <li>mean_free_path : Mean free path of the gas molecules in meters (m).</li> <li>particle_radius : Radius of the particle in meters (m).</li> </ul>"},{"location":"API/particula/particles/properties/knudsen_number_module/#returns","title":"Returns","text":"<ul> <li>The Knudsen number, which is the ratio of the mean free path to the     particle radius.</li> </ul>"},{"location":"API/particula/particles/properties/knudsen_number_module/#examples","title":"Examples","text":"Example Usage<pre><code>import particula as par\npar.particles.get_knudsen_number(6.5e-8, 1.0e-7)\n# Output: 0.65\n</code></pre>"},{"location":"API/particula/particles/properties/knudsen_number_module/#references","title":"References","text":"<ul> <li>Knudsen number, Wikipedia,   https://en.wikipedia.org/wiki/Knudsen_number</li> </ul>"},{"location":"API/particula/particles/properties/knudsen_number_module/#signature","title":"Signature","text":"<pre><code>@validate_inputs({\"mean_free_path\": \"nonnegative\", \"particle_radius\": \"nonnegative\"})\ndef get_knudsen_number(\n    mean_free_path: Union[float, NDArray[np.float64]],\n    particle_radius: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/lognormal_size_distribution/","title":"Lognormal Size Distribution","text":"<p>Particula Index / Particula / Particles / Properties / Lognormal Size Distribution</p> <p>Auto-generated documentation for particula.particles.properties.lognormal_size_distribution module.</p>"},{"location":"API/particula/particles/properties/lognormal_size_distribution/#get_lognormal_pdf_distribution","title":"get_lognormal_pdf_distribution","text":"<p>Show source in lognormal_size_distribution.py:16</p> <p>Compute a lognormal probability density function (PDF) for given modes.</p> <p>This function superimposes multiple lognormal PDFs, each with its own mode, geometric standard deviation, and particle count. It then returns their sum across the provided x_values. Mathematically, for each mode i:</p> <ul> <li>PDF\u1d62(x) = (1 / [x \u00b7 ln(gsd\u1d62) \u00b7 \u221a(2\u03c0)]) \u00d7              exp(- [ln(x) - ln(mode\u1d62)]\u00b2 / [2 \u00b7 (ln(gsd\u1d62))\u00b2 ])</li> </ul>"},{"location":"API/particula/particles/properties/lognormal_size_distribution/#arguments","title":"Arguments","text":"<ul> <li>x_values : 1D array of the size points at which the PDF is evaluated.</li> <li>mode : Array of lognormal mode (scale) values for each mode.</li> <li>geometric_standard_deviation : Array of GSD values for each mode.</li> <li>number_of_particles : Number of particles in each mode.</li> </ul>"},{"location":"API/particula/particles/properties/lognormal_size_distribution/#returns","title":"Returns","text":"<ul> <li>1D array of the total PDF values summed across all modes.</li> </ul>"},{"location":"API/particula/particles/properties/lognormal_size_distribution/#examples","title":"Examples","text":"Example<pre><code>import numpy as np\nimport particula as par\nx_vals = np.linspace(1e-9, 1e-6, 100)\npar.particles.get_lognormal_pdf_distribution(\n    x_values=x_vals,\n    mode=np.array([5e-8, 1e-7]),\n    geometric_standard_deviation=np.array([1.5, 2.0]),\n    number_of_particles=np.array([1e9, 5e9])\n)\n# Output: [...]\n</code></pre>"},{"location":"API/particula/particles/properties/lognormal_size_distribution/#references","title":"References","text":"<ul> <li>Log-normal Distribution Wikipedia</li> <li>Probability Density Function Wikipedia</li> <li>Scipy Lognorm Documentation</li> </ul>"},{"location":"API/particula/particles/properties/lognormal_size_distribution/#signature","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"x_values\": \"nonnegative\",\n        \"mode\": \"positive\",\n        \"geometric_standard_deviation\": \"positive\",\n        \"number_of_particles\": \"positive\",\n    }\n)\ndef get_lognormal_pdf_distribution(\n    x_values: NDArray[np.float64],\n    mode: NDArray[np.float64],\n    geometric_standard_deviation: NDArray[np.float64],\n    number_of_particles: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/lognormal_size_distribution/#get_lognormal_pmf_distribution","title":"get_lognormal_pmf_distribution","text":"<p>Show source in lognormal_size_distribution.py:94</p> <p>Compute a lognormal probability mass function (PMF) for given modes.</p> <p>This function first calculates the lognormal PDF using get_lognormal_pdf_distribution(), then converts it to a PMF by integrating (or summing) over x_values. The result reflects discrete mass (probability) distribution across the given size points.</p>"},{"location":"API/particula/particles/properties/lognormal_size_distribution/#arguments_1","title":"Arguments","text":"<ul> <li>x_values : 1D array of size points at which the PMF is evaluated.</li> <li>mode : Array of lognormal mode (scale) values for each mode.</li> <li>geometric_standard_deviation : Array of GSD values for each mode.</li> <li>number_of_particles : Number of particles in each mode.</li> </ul>"},{"location":"API/particula/particles/properties/lognormal_size_distribution/#returns_1","title":"Returns","text":"<ul> <li>1D array of the total PMF values summed across all modes.</li> </ul>"},{"location":"API/particula/particles/properties/lognormal_size_distribution/#examples_1","title":"Examples","text":"Example<pre><code>import numpy as np\nimport particula as par\nx_vals = np.linspace(1e-9, 1e-6, 100)\npar.particles.get_lognormal_pmf_distribution(\n    x_values=x_vals,\n    mode=np.array([5e-8, 1e-7]),\n    geometric_standard_deviation=np.array([1.5, 2.0]),\n    number_of_particles=np.array([1e9, 5e9])\n)\n# Output: [...]\n</code></pre>"},{"location":"API/particula/particles/properties/lognormal_size_distribution/#references_1","title":"References","text":"<ul> <li>Log-normal Distribution Wikipedia</li> <li>Probability Mass Function Wikipedia</li> <li>Scipy Lognorm Documentation</li> </ul>"},{"location":"API/particula/particles/properties/lognormal_size_distribution/#signature_1","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"x_values\": \"nonnegative\",\n        \"mode\": \"positive\",\n        \"geometric_standard_deviation\": \"positive\",\n        \"number_of_particles\": \"positive\",\n    }\n)\ndef get_lognormal_pmf_distribution(\n    x_values: NDArray[np.float64],\n    mode: NDArray[np.float64],\n    geometric_standard_deviation: NDArray[np.float64],\n    number_of_particles: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/lognormal_size_distribution/#get_lognormal_sample_distribution","title":"get_lognormal_sample_distribution","text":"<p>Show source in lognormal_size_distribution.py:168</p> <p>Generate random samples from a lognormal distribution for given modes.</p> <p>This function uses scipy.stats.lognorm.rvs() to draw samples for each mode, with a specified scale (mode) and shape (GSD). The total samples are then combined according to the relative number of particles in each mode.</p>"},{"location":"API/particula/particles/properties/lognormal_size_distribution/#arguments_2","title":"Arguments","text":"<ul> <li>mode : Array of lognormal mode (scale) values for each mode.</li> <li>geometric_standard_deviation : Array of GSD values for each mode.</li> <li>number_of_particles : Number of particles for each mode.</li> <li>number_of_samples : Total number of random samples to generate.</li> </ul>"},{"location":"API/particula/particles/properties/lognormal_size_distribution/#returns_2","title":"Returns","text":"<ul> <li>1D array of sampled particle sizes, combining all modes.</li> </ul>"},{"location":"API/particula/particles/properties/lognormal_size_distribution/#examples_2","title":"Examples","text":"Example<pre><code>import numpy as np\nimport particula as par\npar.particles.get_lognormal_sample_distribution(\n    mode=np.array([5e-8, 1e-7]),\n    geometric_standard_deviation=np.array([1.5, 2.0]),\n    number_of_particles=np.array([1e9, 5e9]),\n    number_of_samples=10_000\n)\n# Output: [...]\n</code></pre>"},{"location":"API/particula/particles/properties/lognormal_size_distribution/#references_2","title":"References","text":"<ul> <li>Log-normal Distribution Wikipedia</li> <li>Probability Density Function Wikipedia</li> <li>Scipy Lognorm Documentation</li> </ul>"},{"location":"API/particula/particles/properties/lognormal_size_distribution/#signature_2","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"mode\": \"positive\",\n        \"geometric_standard_deviation\": \"positive\",\n        \"number_of_particles\": \"positive\",\n        \"number_of_samples\": \"positive\",\n    }\n)\ndef get_lognormal_sample_distribution(\n    mode: NDArray[np.float64],\n    geometric_standard_deviation: NDArray[np.float64],\n    number_of_particles: NDArray[np.float64],\n    number_of_samples: int,\n    upper_bound: float = np.inf,\n    lower_bound: float = 0,\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/mean_thermal_speed_module/","title":"Mean Thermal Speed Module","text":"<p>Particula Index / Particula / Particles / Properties / Mean Thermal Speed Module</p> <p>Auto-generated documentation for particula.particles.properties.mean_thermal_speed_module module.</p>"},{"location":"API/particula/particles/properties/mean_thermal_speed_module/#get_mean_thermal_speed","title":"get_mean_thermal_speed","text":"<p>Show source in mean_thermal_speed_module.py:14</p> <p>Calculate the mean thermal speed of a particle in a fluid.</p> <p>The mean thermal speed (v) is derived from kinetic theory and is given by:</p> <ul> <li>v = \u221a( (8 \u00d7 k_B \u00d7 T) / (\u03c0 \u00d7 m) )<ul> <li>v is the mean thermal speed in m/s,</li> <li>k_B is the Boltzmann constant in J/K,</li> <li>T is the temperature in Kelvin (K),</li> <li>m is the particle mass in kilograms (kg).</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/mean_thermal_speed_module/#arguments","title":"Arguments","text":"<ul> <li>particle_mass : The mass of the particle(s) in kg.</li> <li>temperature : The temperature of the system in Kelvin (K).</li> </ul>"},{"location":"API/particula/particles/properties/mean_thermal_speed_module/#returns","title":"Returns","text":"<ul> <li>The mean thermal speed in m/s, as either a float or an     NDArray[np.float64].</li> </ul>"},{"location":"API/particula/particles/properties/mean_thermal_speed_module/#examples","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_mean_thermal_speed(1e-17, 298)\n# Output: ...\n</code></pre>"},{"location":"API/particula/particles/properties/mean_thermal_speed_module/#references","title":"References","text":"<ul> <li>Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric Chemistry and   Physics, Section 9.5.3 Mean Free Path of an Aerosol Particle,   Equation 9.87.</li> </ul>"},{"location":"API/particula/particles/properties/mean_thermal_speed_module/#signature","title":"Signature","text":"<pre><code>@validate_inputs({\"particle_mass\": \"nonnegative\", \"temperature\": \"positive\"})\ndef get_mean_thermal_speed(\n    particle_mass: Union[float, NDArray[np.float64]],\n    temperature: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/partial_pressure_module/","title":"Partial Pressure Module","text":"<p>Particula Index / Particula / Particles / Properties / Partial Pressure Module</p> <p>Auto-generated documentation for particula.particles.properties.partial_pressure_module module.</p>"},{"location":"API/particula/particles/properties/partial_pressure_module/#get_partial_pressure_delta","title":"get_partial_pressure_delta","text":"<p>Show source in partial_pressure_module.py:9</p> <p>Calculate the difference in partial pressure between gas and particle phase, considering the Kelvin effect.</p> <ul> <li>\u0394p = p_gas \u2212 (p_particle \u00d7 K)<ul> <li>p_gas is the partial pressure in the gas phase,</li> <li>p_particle is the partial pressure in the particle phase,</li> <li>K is the Kelvin term (dimensionless).</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/partial_pressure_module/#arguments","title":"Arguments","text":"<ul> <li>partial_pressure_gas : Partial pressure of the species in the gas     phase.</li> <li>partial_pressure_particle : Partial pressure of the species in     the particle phase.</li> <li>kelvin_term : Dimensionless Kelvin effect factor due to particle     curvature.</li> </ul>"},{"location":"API/particula/particles/properties/partial_pressure_module/#returns","title":"Returns","text":"<ul> <li>The difference in partial pressure, as either a float or     NDArray[np.float64].</li> </ul>"},{"location":"API/particula/particles/properties/partial_pressure_module/#examples","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_partial_pressure_delta(\n    partial_pressure_gas=1000.0,\n    partial_pressure_particle=900.0,\n    kelvin_term=1.01\n)\n# Output: 1000.0 - (900.0 * 1.01) = 91.0\n</code></pre>"},{"location":"API/particula/particles/properties/partial_pressure_module/#references","title":"References","text":"<ul> <li>Kelvin effect, Wikipedia</li> <li>Partial pressure, Wikipedia</li> </ul>"},{"location":"API/particula/particles/properties/partial_pressure_module/#signature","title":"Signature","text":"<pre><code>def get_partial_pressure_delta(\n    partial_pressure_gas: Union[float, NDArray[np.float64]],\n    partial_pressure_particle: Union[float, NDArray[np.float64]],\n    kelvin_term: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/reynolds_number/","title":"Reynolds Number","text":"<p>Particula Index / Particula / Particles / Properties / Reynolds Number</p> <p>Auto-generated documentation for particula.particles.properties.reynolds_number module.</p>"},{"location":"API/particula/particles/properties/reynolds_number/#get_particle_reynolds_number","title":"get_particle_reynolds_number","text":"<p>Show source in reynolds_number.py:12</p> <p>Calculate the Reynolds number (Re\u209a) of a particle in a fluid.</p> <p>This dimensionless quantity characterizes the flow regime:</p> <ul> <li>Re\u209a = (2 \u00d7 a \u00d7 v\u209a) / \u03bd<ul> <li>a is the particle radius in meters (m).</li> <li>v\u209a is the particle velocity in meters/second (m/s).</li> <li>\u03bd is the kinematic viscosity in square meters/second (m\u00b2/s).</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/reynolds_number/#arguments","title":"Arguments","text":"<ul> <li>particle_radius : Particle radius (m).</li> <li>particle_velocity : Particle velocity relative to the fluid (m/s).</li> <li>kinematic_viscosity : Kinematic viscosity of the fluid (m\u00b2/s).</li> </ul>"},{"location":"API/particula/particles/properties/reynolds_number/#returns","title":"Returns","text":"<ul> <li>Dimensionless Reynolds number (float or NDArray[np.float64]).</li> </ul>"},{"location":"API/particula/particles/properties/reynolds_number/#examples","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_particle_reynolds_number(\n    particle_radius=1e-6,\n    particle_velocity=0.1,\n    kinematic_viscosity=1.5e-5\n)\n# Output: ...\n</code></pre>"},{"location":"API/particula/particles/properties/reynolds_number/#references","title":"References","text":"<ul> <li>Reynolds number, Wikipedia</li> <li>Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric Chemistry and     Physics,</li> <li>Stokes Flow (Viscous Dominated, Re_p &lt; 1):<ul> <li>Particles follow the fluid closely (e.g., aerosols).</li> </ul> </li> <li>Transitional Flow (1 &lt; Re_p &lt; 1000):<ul> <li>Both viscous and inertial forces contribute to flow behavior.</li> <li>Intermediate drag corrections apply.</li> </ul> </li> <li>Turbulent Flow (Re_p &gt; 1000):<ul> <li>Inertial forces dominate, resulting in vortex shedding and     wake formation.</li> <li>Applies to large, fast-moving particles     (e.g., raindrops, large sediment).</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/reynolds_number/#signature","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"particle_radius\": \"positive\",\n        \"particle_velocity\": \"positive\",\n        \"kinematic_viscosity\": \"positive\",\n    }\n)\ndef get_particle_reynolds_number(\n    particle_radius: Union[float, NDArray[np.float64]],\n    particle_velocity: Union[float, NDArray[np.float64]],\n    kinematic_viscosity: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/settling_velocity/","title":"Settling Velocity","text":"<p>Particula Index / Particula / Particles / Properties / Settling Velocity</p> <p>Auto-generated documentation for particula.particles.properties.settling_velocity module.</p>"},{"location":"API/particula/particles/properties/settling_velocity/#_drag_coefficient","title":"_drag_coefficient","text":"<p>Show source in settling_velocity.py:407</p> <p>Return drag coefficient c_d given a Reynolds number Re.</p>"},{"location":"API/particula/particles/properties/settling_velocity/#arguments","title":"Arguments","text":"<ul> <li>reynolds_number : Reynolds number [-].</li> </ul>"},{"location":"API/particula/particles/properties/settling_velocity/#returns","title":"Returns","text":"<ul> <li>Drag coefficient c_d [-].</li> </ul>"},{"location":"API/particula/particles/properties/settling_velocity/#signature","title":"Signature","text":"<pre><code>def _drag_coefficient(reynolds_number: float) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/particles/properties/settling_velocity/#_velocity_mismatch","title":"_velocity_mismatch","text":"<p>Show source in settling_velocity.py:428</p> <p>Calculate the mismatch between predicted and actual velocities.</p>"},{"location":"API/particula/particles/properties/settling_velocity/#arguments_1","title":"Arguments","text":"<ul> <li>velocity : Current estimate of particle velocity [m/s].</li> <li>radius : Particle radius [m].</li> <li>rho_p : Particle density [kg/m\u00b3].</li> <li>fluid_density : Fluid density [kg/m\u00b3].</li> <li>dynamic_viscosity : Dynamic viscosity of the fluid [Pa\u00b7s].</li> <li>gravitational_acceleration : Gravitational acceleration [m/s\u00b2].</li> </ul>"},{"location":"API/particula/particles/properties/settling_velocity/#returns_1","title":"Returns","text":"<ul> <li>Squared difference between predicted and actual velocities.</li> </ul>"},{"location":"API/particula/particles/properties/settling_velocity/#signature_1","title":"Signature","text":"<pre><code>def _velocity_mismatch(\n    velocity: float,\n    radius: float,\n    rho_p: float,\n    fluid_density: float,\n    kinematic_viscosity: float,\n    gravitational_acceleration: float,\n) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/particles/properties/settling_velocity/#get_particle_settling_velocity","title":"get_particle_settling_velocity","text":"<p>Show source in settling_velocity.py:31</p> <p>Calculate the settling velocity of a particle in a fluid using Stokes' law.</p> <p>The settling velocity (v\u209b) is given by the equation:</p> <ul> <li>v\u209b = (2 \u00d7 r\u00b2 \u00d7 (\u03c1\u209a \u2212 \u03c1_f) \u00d7 g \u00d7 C_c) / (9 \u00d7 \u03bc)<ul> <li>v\u209b : Settling velocity in m/s</li> <li>r : Particle radius in m</li> <li>\u03c1\u209a : Particle density in kg/m\u00b3</li> <li>\u03c1_f : Fluid density in kg/m\u00b3</li> <li>g : Gravitational acceleration in m/s\u00b2</li> <li>C_c : Cunningham slip correction factor (dimensionless)</li> <li>\u03bc : Dynamic viscosity in Pa\u00b7s</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/settling_velocity/#arguments_2","title":"Arguments","text":"<ul> <li>particle_radius : The radius of the particle in meters.</li> <li>particle_density : The density of the particle in kg/m\u00b3.</li> <li>slip_correction_factor : Account for non-continuum effects     (dimensionless).</li> <li>dynamic_viscosity : Dynamic viscosity of the fluid in Pa\u00b7s.</li> <li>gravitational_acceleration : Gravitational acceleration in m/s\u00b2.</li> <li>fluid_density : The fluid density in kg/m\u00b3. Defaults to 0.0.</li> </ul>"},{"location":"API/particula/particles/properties/settling_velocity/#returns_2","title":"Returns","text":"<ul> <li>Settling velocity of the particle in m/s.</li> </ul>"},{"location":"API/particula/particles/properties/settling_velocity/#examples","title":"Examples","text":"Array Input Example<pre><code>import numpy as np\nimport particula as par\npar.particles.particle_settling_velocity(\n    particle_radius=np.array([1e-6, 1e-5, 1e-4]),\n    particle_density=np.array([1000, 2000, 3000]),\n    slip_correction_factor=np.array([1, 1, 1]),\n    dynamic_viscosity=1.0e-3\n)\n# Output: array([...])\n</code></pre>"},{"location":"API/particula/particles/properties/settling_velocity/#references","title":"References","text":"<ul> <li>\"Stokes' Law,\" Wikipedia,   https://en.wikipedia.org/wiki/Stokes%27_law</li> </ul>"},{"location":"API/particula/particles/properties/settling_velocity/#signature_2","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"particle_radius\": \"nonnegative\",\n        \"particle_density\": \"positive\",\n        \"slip_correction_factor\": \"positive\",\n        \"dynamic_viscosity\": \"nonnegative\",\n    }\n)\ndef get_particle_settling_velocity(\n    particle_radius: Union[float, NDArray[np.float64]],\n    particle_density: Union[float, NDArray[np.float64]],\n    slip_correction_factor: Union[float, NDArray[np.float64]],\n    dynamic_viscosity: float,\n    gravitational_acceleration: float = STANDARD_GRAVITY,\n    fluid_density: float = 0.0,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/settling_velocity/#see-also","title":"See also","text":"<ul> <li>STANDARD_GRAVITY</li> </ul>"},{"location":"API/particula/particles/properties/settling_velocity/#get_particle_settling_velocity_via_inertia","title":"get_particle_settling_velocity_via_inertia","text":"<p>Show source in settling_velocity.py:104</p> <p>Calculate gravitational settling velocity using particle inertia time.</p> <p>The settling velocity (v\u209b) is determined by:</p> <ul> <li>v\u209b = (g \u00d7 \u03c4\u209a \u00d7 C_c) / f(Re\u209a)<ul> <li>g is gravitational acceleration (m/s\u00b2).</li> <li>\u03c4\u209a is particle inertia time (s).</li> <li>C_c is the Cunningham slip correction factor (dimensionless).</li> <li>f(Re\u209a) is the drag correction factor, 1 + 0.15 \u00d7 Re\u209a^0.687.</li> <li>Re\u209a is particle Reynolds number (dimensionless).</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/settling_velocity/#arguments_3","title":"Arguments","text":"<ul> <li>particle_inertia_time : Particle inertia time in seconds (s).</li> <li>particle_radius : Particle radius in meters (m).</li> <li>relative_velocity : Relative velocity between particle and fluid     (m/s).</li> <li>slip_correction_factor : Cunningham slip correction factor     (dimensionless).</li> <li>gravitational_acceleration : Gravitational acceleration (m/s\u00b2).</li> <li>kinematic_viscosity : Kinematic viscosity of the fluid (m\u00b2/s).</li> </ul>"},{"location":"API/particula/particles/properties/settling_velocity/#returns_3","title":"Returns","text":"<ul> <li>Particle settling velocity in m/s.</li> </ul>"},{"location":"API/particula/particles/properties/settling_velocity/#examples_1","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_particle_settling_velocity_via_inertia(\n    particle_inertia_time=0.002,\n    particle_radius=1.0e-6,\n    relative_velocity=0.1,\n    slip_correction_factor=1.05,\n    gravitational_acceleration=9.81,\n    kinematic_viscosity=1.5e-5\n)\n# Output: ...\n</code></pre>"},{"location":"API/particula/particles/properties/settling_velocity/#references_1","title":"References","text":"<ul> <li>Ayala, O., Rosa, B., Wang, L. P., &amp; Grabowski, W. W. (2008).   \"Effects of turbulence on the geometric collision rate of   sedimenting droplets. Part 1. Results from direct numerical   simulation.\" New Journal of Physics, 10.   https://doi.org/10.1088/1367-2630/10/7/075015</li> </ul>"},{"location":"API/particula/particles/properties/settling_velocity/#signature_3","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"particle_inertia_time\": \"positive\",\n        \"gravitational_acceleration\": \"positive\",\n        \"slip_correction_factor\": \"positive\",\n    }\n)\ndef get_particle_settling_velocity_via_inertia(\n    particle_inertia_time: Union[float, NDArray[np.float64]],\n    particle_radius: Union[float, NDArray[np.float64]],\n    relative_velocity: Union[float, NDArray[np.float64]],\n    slip_correction_factor: Union[float, NDArray[np.float64]],\n    gravitational_acceleration: float,\n    kinematic_viscosity: float,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/settling_velocity/#get_particle_settling_velocity_via_system_state","title":"get_particle_settling_velocity_via_system_state","text":"<p>Show source in settling_velocity.py:181</p> <p>Compute the particle settling velocity based on system state parameters.</p> <p>This function calculates the dynamic viscosity from temperature, the mean free path from the same system state, and the Knudsen number of the particle, then applies the slip correction factor. Finally, it returns the settling velocity from Stokes' law with slip correction.</p>"},{"location":"API/particula/particles/properties/settling_velocity/#arguments_4","title":"Arguments","text":"<ul> <li>particle_radius : Particle radius in meters (m).</li> <li>particle_density : Particle density in kg/m\u00b3.</li> <li>temperature : Temperature of the system in Kelvin (K).</li> <li>pressure : Pressure of the system in Pascals (Pa).</li> </ul>"},{"location":"API/particula/particles/properties/settling_velocity/#returns_4","title":"Returns","text":"<ul> <li>Settling velocity of the particle in m/s.</li> </ul>"},{"location":"API/particula/particles/properties/settling_velocity/#examples_2","title":"Examples","text":"System State Example<pre><code>import particula as par\npar.particles.particle_settling_velocity_via_system_state(\n    particle_radius=1e-6,\n    particle_density=1200,\n    temperature=298.15,\n    pressure=101325\n)\n# Output: ...\n</code></pre>"},{"location":"API/particula/particles/properties/settling_velocity/#references_2","title":"References","text":"<ul> <li>Gas viscosity property estimation:   https://en.wikipedia.org/wiki/Viscosity#Gases</li> <li>Slip correction and Knudsen number relations from:   Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric   Chemistry and Physics. Wiley-Interscience.</li> </ul>"},{"location":"API/particula/particles/properties/settling_velocity/#signature_4","title":"Signature","text":"<pre><code>def get_particle_settling_velocity_via_system_state(\n    particle_radius: Union[float, NDArray[np.float64]],\n    particle_density: Union[float, NDArray[np.float64]],\n    temperature: float,\n    pressure: float,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/settling_velocity/#get_particle_settling_velocity_with_drag","title":"get_particle_settling_velocity_with_drag","text":"<p>Show source in settling_velocity.py:253</p> <p>Calculate the particle's terminal settling velocity with a full drag model.</p> <p>For low Reynolds numbers (Re &lt; re_threshold), the Stokes settling velocity (with slip correction) is used:</p> <ul> <li>v\u209b(Stokes) = (2/9) \u00d7 [r\u00b2 \u00d7 (\u03c1\u209a \u2212 \u03c1_f) \u00d7 g \u00d7 C_c] / \u03bc</li> </ul> <p>For higher Reynolds numbers, a force-balance approach is solved numerically, using a variable drag coefficient (c_d).</p> <ul> <li>v\u209b = fminbound(mismatch, 0, v_upper)<ul> <li>mismatch = (v_pred - v)\u00b2</li> <li>v_pred = sqrt((8 \u00d7 r \u00d7 (\u03c1\u209a - \u03c1_f) \u00d7 g) / (3 \u00d7 \u03c1_f \u00d7 c_d))</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/settling_velocity/#arguments_5","title":"Arguments","text":"<ul> <li>particle_radius : Particle radius (m).</li> <li>particle_density : Particle density (kg/m\u00b3).</li> <li>fluid_density : Fluid density (kg/m\u00b3).</li> <li>dynamic_viscosity : Fluid dynamic viscosity (Pa\u00b7s).</li> <li>slip_correction_factor : Slip correction factor, dimensionless.</li> <li>gravitational_acceleration : Gravitational acceleration (m/s\u00b2),   default is 9.80665.</li> <li>re_threshold : Reynolds number threshold (dimensionless),   default is 0.1.</li> <li>tol : Numeric tolerance for solver (dimensionless),   default is 1e-6.</li> <li>max_iter : Maximum function evaluations in numeric solver,   default is 100.</li> </ul>"},{"location":"API/particula/particles/properties/settling_velocity/#returns_5","title":"Returns","text":"<ul> <li>Terminal settling velocity (m/s). Scalar or NDArray.</li> </ul>"},{"location":"API/particula/particles/properties/settling_velocity/#examples_3","title":"Examples","text":"Example<pre><code>import numpy as np\nimport particula as par\nr_array = np.array([1e-6, 5e-5, 2e-4])\nrho_array = np.array([1500, 2000, 1850])\npar.particles.get_particle_settling_velocity_with_drag(\n    particle_radius=r_array,\n    particle_density=rho_array,\n    fluid_density=1.225,\n    dynamic_viscosity=1.8e-5,\n    slip_correction_factor=np.array([1.0, 0.95, 1.1])\n)\n# Output: array([...])\n</code></pre>"},{"location":"API/particula/particles/properties/settling_velocity/#references_3","title":"References","text":"<ul> <li>\"Drag Coefficient,\" Wikipedia,   https://en.wikipedia.org/wiki/Drag_coefficient</li> <li>Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric Chemistry   and Physics, 3<sup>rd</sup> ed., John Wiley &amp; Sons.</li> </ul>"},{"location":"API/particula/particles/properties/settling_velocity/#signature_5","title":"Signature","text":"<pre><code>@validate_inputs(\n    {\n        \"particle_radius\": \"positive\",\n        \"particle_density\": \"positive\",\n        \"fluid_density\": \"positive\",\n        \"dynamic_viscosity\": \"nonnegative\",\n    }\n)\ndef get_particle_settling_velocity_with_drag(\n    particle_radius: Union[float, NDArray[np.float64]],\n    particle_density: Union[float, NDArray[np.float64]],\n    fluid_density: float,\n    dynamic_viscosity: float,\n    slip_correction_factor: Union[float, NDArray[np.float64]],\n    gravitational_acceleration: float = STANDARD_GRAVITY,\n    re_threshold: float = 0.1,\n    tol: float = 1e-06,\n    max_iter: int = 100,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/settling_velocity/#see-also_1","title":"See also","text":"<ul> <li>STANDARD_GRAVITY</li> </ul>"},{"location":"API/particula/particles/properties/slip_correction_module/","title":"Slip Correction Module","text":"<p>Particula Index / Particula / Particles / Properties / Slip Correction Module</p> <p>Auto-generated documentation for particula.particles.properties.slip_correction_module module.</p>"},{"location":"API/particula/particles/properties/slip_correction_module/#get_cunningham_slip_correction","title":"get_cunningham_slip_correction","text":"<p>Show source in slip_correction_module.py:11</p> <p>Calculate the Cunningham slip correction factor for small particles in a fluid.</p> <p>The slip correction factor (C_c) accounts for non-continuum effects on small particles, correcting for the no-slip assumption used in Stokes' law. It is calculated using:</p> <ul> <li>C_c = 1 + Kn \u00d7 (1.257 + 0.4 \u00d7 exp(-1.1 / Kn))<ul> <li>Kn is the dimensionless Knudsen number.</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/slip_correction_module/#arguments","title":"Arguments","text":"<ul> <li>knudsen_number : Knudsen number (dimensionless).</li> </ul>"},{"location":"API/particula/particles/properties/slip_correction_module/#returns","title":"Returns","text":"<ul> <li>Slip correction factor (dimensionless).</li> </ul>"},{"location":"API/particula/particles/properties/slip_correction_module/#examples","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_cunningham_slip_correction(0.1)\n# Output: ...\n</code></pre>"},{"location":"API/particula/particles/properties/slip_correction_module/#references","title":"References","text":"<ul> <li>\"Cunningham correction factor,\" Wikipedia,   https://en.wikipedia.org/wiki/Cunningham_correction_factor</li> </ul>"},{"location":"API/particula/particles/properties/slip_correction_module/#signature","title":"Signature","text":"<pre><code>@validate_inputs({\"knudsen_number\": \"nonnegative\"})\ndef get_cunningham_slip_correction(\n    knudsen_number: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/special_functions/","title":"Special Functions","text":"<p>Particula Index / Particula / Particles / Properties / Special Functions</p> <p>Auto-generated documentation for particula.particles.properties.special_functions module.</p>"},{"location":"API/particula/particles/properties/special_functions/#get_debye_function","title":"get_debye_function","text":"<p>Show source in special_functions.py:13</p> <p>Calculate the generalized Debye function for a given input.</p> <p>The Debye function can be expressed as follows:</p> <ul> <li>D\u2099(x) = (n / x\u207f) \u222b[t\u207f / (exp(t) - 1)] dt  from t = 0 to x<ul> <li>x is a dimensionless variable.</li> <li>n is the exponent (default is 1).</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/special_functions/#arguments","title":"Arguments","text":"<ul> <li>variable : Upper limit of integration; can be float or NDArray.</li> <li>integration_points : Number of points for numerical integration   (default 1000).</li> <li>n : Exponent in the Debye function formula (default 1).</li> </ul>"},{"location":"API/particula/particles/properties/special_functions/#returns","title":"Returns","text":"<ul> <li>Debye function value(s). If the input is a float, returns a float.   If the input is an array, returns an array of the same shape.</li> </ul>"},{"location":"API/particula/particles/properties/special_functions/#examples","title":"Examples","text":"Debye function with n=1 for a single float value<pre><code>import particula as par\npar.particles.get_debye_function(1.0)\n# Output: 0.7765038970390566\n</code></pre> Debye function with n=2 for a single float value<pre><code>import particula as par\npar.particles.get_debye_function(1.0, n=2)\n# Output: 0.6007582206816492\n</code></pre> Debye function with n=1 for a numpy array<pre><code>import particula as par\npar.particles.get_debye_function(np.array([1.0, 2.0, 3.0]))\n# Output: [0.84140566 0.42278434 0.28784241]\n</code></pre>"},{"location":"API/particula/particles/properties/special_functions/#references","title":"References","text":"<ul> <li>Debye function</li> <li>Wolfram MathWorld: Debye Functions</li> </ul>"},{"location":"API/particula/particles/properties/special_functions/#signature","title":"Signature","text":"<pre><code>@validate_inputs({\"variable\": \"finite\"})\ndef get_debye_function(\n    variable: Union[float, NDArray[np.float64]],\n    integration_points: int = 1000,\n    n: int = 1,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/stokes_number/","title":"Stokes Number","text":"<p>Particula Index / Particula / Particles / Properties / Stokes Number</p> <p>Auto-generated documentation for particula.particles.properties.stokes_number module.</p>"},{"location":"API/particula/particles/properties/stokes_number/#get_stokes_number","title":"get_stokes_number","text":"<p>Show source in stokes_number.py:12</p> <p>Compute the Stokes number (St) to measure particle inertia relative to fluid flow.</p> <p>The Stokes number is a dimensionless parameter reflecting how much a particle resists following changes in the fluid\u2019s motion. If St &gt;&gt; 1, particle inertia dominates; if St &lt;&lt; 1, the particle closely follows fluid flow. Mathematically:</p> <ul> <li>St = \u03c4_p / \u03c4_k<ul> <li>St : Stokes number (dimensionless),</li> <li>\u03c4_p : Particle inertia time [s],</li> <li>\u03c4_k : Kolmogorov timescale [s].</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/stokes_number/#arguments","title":"Arguments","text":"<ul> <li>particle_inertia_time : Particle inertia time in seconds (s).</li> <li>kolmogorov_time : Kolmogorov timescale in seconds (s).</li> </ul>"},{"location":"API/particula/particles/properties/stokes_number/#returns","title":"Returns","text":"<ul> <li>Dimensionless Stokes number (float or NDArray[np.float64]).</li> </ul>"},{"location":"API/particula/particles/properties/stokes_number/#examples","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_stokes_number(1e-3, 2e-3)\n# Output: 0.5\n</code></pre>"},{"location":"API/particula/particles/properties/stokes_number/#references","title":"References","text":"<ul> <li>Stokes number, Wikipedia</li> <li>Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric Chemistry and   Physics, 3<sup>rd</sup> ed., Wiley-Interscience.</li> </ul>"},{"location":"API/particula/particles/properties/stokes_number/#signature","title":"Signature","text":"<pre><code>@validate_inputs({\"particle_inertia_time\": \"positive\", \"kolmogorov_time\": \"positive\"})\ndef get_stokes_number(\n    particle_inertia_time: Union[float, NDArray[np.float64]],\n    kolmogorov_time: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/particles/properties/vapor_correction_module/","title":"Vapor Correction Module","text":"<p>Particula Index / Particula / Particles / Properties / Vapor Correction Module</p> <p>Auto-generated documentation for particula.particles.properties.vapor_correction_module module.</p>"},{"location":"API/particula/particles/properties/vapor_correction_module/#get_vapor_transition_correction","title":"get_vapor_transition_correction","text":"<p>Show source in vapor_correction_module.py:14</p> <p>Calculate the Fuchs\u2013Sutugin vapor transition correction factor.</p> <p>This correction factor (f) accounts for the transition regime between free molecular flow and continuum diffusion when computing mass or heat transport.</p> <p>Mathematically:</p> <ul> <li>f(Kn, \u03b1) = [0.75\u00b7\u03b1\u00b7(1+Kn)] / [Kn\u00b2 + Kn + 0.283\u00b7\u03b1\u00b7Kn + 0.75\u00b7\u03b1]<ul> <li>Kn is the Knudsen number (dimensionless),</li> <li>\u03b1 is the mass accommodation coefficient (dimensionless).</li> </ul> </li> </ul>"},{"location":"API/particula/particles/properties/vapor_correction_module/#arguments","title":"Arguments","text":"<ul> <li>knudsen_number : Dimensionless Knudsen number.</li> <li>mass_accommodation : Mass accommodation coefficient (dimensionless).</li> </ul>"},{"location":"API/particula/particles/properties/vapor_correction_module/#returns","title":"Returns","text":"<ul> <li>Transition correction factor (float or NDArray[np.float64]).</li> </ul>"},{"location":"API/particula/particles/properties/vapor_correction_module/#examples","title":"Examples","text":"Example<pre><code>import particula as par\npar.particles.get_vapor_transition_correction(\n    knudsen_number=0.1, mass_accommodation=1.0\n)\n# Output: 0.73...\n</code></pre>"},{"location":"API/particula/particles/properties/vapor_correction_module/#references","title":"References","text":"<ul> <li>Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric Chemistry   and Physics, Ch. 12. Equation 12.43.</li> <li>Fuchs, N. A., &amp; Sutugin, A. G. (1971). High-Dispersed Aerosols.   In Topics in Current Aerosol Research, Elsevier, pp. 1\u201360.</li> </ul>"},{"location":"API/particula/particles/properties/vapor_correction_module/#signature","title":"Signature","text":"<pre><code>@validate_inputs({\"knudsen_number\": \"nonnegative\", \"mass_accommodation\": \"nonnegative\"})\ndef get_vapor_transition_correction(\n    knudsen_number: Union[float, NDArray[np.float64]],\n    mass_accommodation: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/util/","title":"Util","text":"<p>Particula Index / Particula / Util</p> <p>Auto-generated documentation for particula.util module.</p>"},{"location":"API/particula/util/#modules","title":"Modules","text":"<ul> <li>Arbitrary Round</li> <li>Colors</li> <li>Constants</li> <li>Converting</li> <li>Lf2013 Coagulation</li> <li>Machine Limit</li> <li>Reduced Quantity</li> <li>Refractive Index Mixing</li> <li>Validate Inputs</li> </ul>"},{"location":"API/particula/util/arbitrary_round/","title":"Arbitrary Round","text":"<p>Particula Index / Particula / Util / Arbitrary Round</p> <p>Auto-generated documentation for particula.util.arbitrary_round module.</p>"},{"location":"API/particula/util/arbitrary_round/#get_arbitrary_round","title":"get_arbitrary_round","text":"<p>Show source in arbitrary_round.py:15</p> <p>Round values to the nearest multiple of a specified base.</p> <p>The function supports \"round\", \"floor\", or \"ceil\" modes, and can retain original nonzero values if rounding returns zero.</p>"},{"location":"API/particula/util/arbitrary_round/#arguments","title":"Arguments","text":"<ul> <li>values : The values to be rounded.</li> <li>base : Positive float indicating the rounding interval.</li> <li>mode : Rounding mode, one of ['round', 'floor', 'ceil'].</li> <li>nonzero_edge : If True, zeros after rounding are replaced with the     original values.</li> </ul>"},{"location":"API/particula/util/arbitrary_round/#returns","title":"Returns","text":"<ul> <li>The input values rounded according to the specified base and mode.</li> </ul>"},{"location":"API/particula/util/arbitrary_round/#examples","title":"Examples","text":"Example Usage<pre><code>import numpy as np\nimport particula as par\n\narr = np.array([1.2, 2.5, 3.7, 4.0])\nprint(par.get_arbitrary_round(arr, base=1.0, mode='round'))\n# Output: [1.  2.  4.  4.]\n\nprint(par.get_arbitrary_round(arr, base=0.5, mode='floor'))\n# Output: [1.  2.  3.5 4. ]\n\nprint(par.get_arbitrary_round(2.5, base=1.0, mode='round'))\n# Output: 2.0\n</code></pre>"},{"location":"API/particula/util/arbitrary_round/#references","title":"References","text":"<ul> <li>\"Rounding,\" Python Documentation, docs.python.org.</li> <li>\"NumPy Rounding,\" NumPy Documentation, NumPy.org.</li> </ul>"},{"location":"API/particula/util/arbitrary_round/#signature","title":"Signature","text":"<pre><code>def get_arbitrary_round(\n    values: Union[float, list[float], np.ndarray],\n    base: Union[float, np.float64] = 1.0,\n    mode: str = \"round\",\n    nonzero_edge: bool = False,\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/util/colors/","title":"Colors","text":"<p>Particula Index / Particula / Util / Colors</p> <p>Auto-generated documentation for particula.util.colors module.</p>"},{"location":"API/particula/util/constants/","title":"Constants","text":"<p>Particula Index / Particula / Util / Constants</p> <p>Auto-generated documentation for particula.util.constants module.</p>"},{"location":"API/particula/util/constants/#attributes","title":"Attributes","text":"<ul> <li> <p><code>GAS_CONSTANT</code> - Gas constant in J mol^-1 K^-1 = m^2 kg mol^-1 s^-2 K^-1   J = kg m^2 s^-2: BOLTZMANN_CONSTANT * AVOGADRO_NUMBER</p> </li> <li> <p><code>RELATIVE_PERMITTIVITY_AIR_ROOM</code> - Relative permittivity of air at approx.   296.15 K and 101325 Pa and 40% RH   See https://www.osti.gov/servlets/purl/1504063   Previously known as the \"dielectric constant\"   Often denoted as epsilon: 1.000530569</p> </li> <li> <p><code>RELATIVE_PERMITTIVITY_AIR_STP</code> - At STP (273.15 K, 1 atm):   see: https://en.wikipedia.org/wiki/Relative_permittivity: 1.00058986</p> </li> <li> <p><code>RELATIVE_PERMITTIVITY_AIR</code> - select one of the two:: RELATIVE_PERMITTIVITY_AIR_ROOM</p> </li> <li> <p><code>VACUUM_PERMITTIVITY</code> - Permittivity of free space in F/m   Also known as the electric constant, permittivity of free space   Often denoted by epsilon_0: scipy.constants.epsilon_0</p> </li> <li> <p><code>REF_VISCOSITY_AIR_STP</code> - These values are used to calculate the dynamic viscosity of air   Here, REF temperature and viscosity are at STP:   Standard temperature and pressure (273.15 K and 101325 Pa): 1.716e-05</p> </li> </ul>"},{"location":"API/particula/util/machine_limit/","title":"Machine Limit","text":"<p>Particula Index / Particula / Util / Machine Limit</p> <p>Auto-generated documentation for particula.util.machine_limit module.</p>"},{"location":"API/particula/util/machine_limit/#get_safe_exp","title":"get_safe_exp","text":"<p>Show source in machine_limit.py:13</p> <p>Compute the exponential of each element in the input array, with overflow protection.</p> <p>The exponential is calculated using:     - y = exp(x), where x is clipped to avoid exceeding machine limits.</p>"},{"location":"API/particula/util/machine_limit/#arguments","title":"Arguments","text":"<ul> <li>value : Array-like of values to exponentiate.</li> </ul>"},{"location":"API/particula/util/machine_limit/#returns","title":"Returns","text":"<ul> <li>np.ndarray of exponentiated values, with machine-level clipping.</li> </ul>"},{"location":"API/particula/util/machine_limit/#examples","title":"Examples","text":"Example Usage<pre><code>import numpy as np\nimport particula as par\n\narr = np.array([0, 10, 1000])\nprint(par.get_safe_exp(arr))\n# Output: [1.00000000e+000 2.20264658e+004 1.79769313e+308]\n</code></pre>"},{"location":"API/particula/util/machine_limit/#references","title":"References","text":"<ul> <li>\"Floating Point Arithmetic,\" NumPy Documentation, NumPy.org.</li> </ul>"},{"location":"API/particula/util/machine_limit/#signature","title":"Signature","text":"<pre><code>def get_safe_exp(value: ArrayLike) -&gt; np.ndarray: ...\n</code></pre>"},{"location":"API/particula/util/machine_limit/#get_safe_log","title":"get_safe_log","text":"<p>Show source in machine_limit.py:45</p> <p>Compute the natural logarithm of each element in the input array, with underflow protection.</p> <p>The natural log is calculated using:     - y = ln(x), where x is clipped away from zero to maintain positivity.</p>"},{"location":"API/particula/util/machine_limit/#arguments_1","title":"Arguments","text":"<ul> <li>value : Array-like of values for logarithm calculation.</li> </ul>"},{"location":"API/particula/util/machine_limit/#returns_1","title":"Returns","text":"<ul> <li>np.ndarray of natural logarithms, with machine-level clipping.</li> </ul>"},{"location":"API/particula/util/machine_limit/#examples_1","title":"Examples","text":"Example Usage<pre><code>import numpy as np\nimport particula as par\n\narr = np.array([1e-320, 1.0, 10.0])\nprint(get_safe_log(arr))\n# Output: [-7.40545337e+02  0.00000000e+00  2.30258509e+00]\n</code></pre>"},{"location":"API/particula/util/machine_limit/#references_1","title":"References","text":"<ul> <li>\"Logarithms and Machine Precision,\" NumPy Documentation, NumPy.org.</li> </ul>"},{"location":"API/particula/util/machine_limit/#signature_1","title":"Signature","text":"<pre><code>def get_safe_log(value: ArrayLike) -&gt; np.ndarray: ...\n</code></pre>"},{"location":"API/particula/util/machine_limit/#get_safe_log10","title":"get_safe_log10","text":"<p>Show source in machine_limit.py:77</p> <p>Compute the base-10 logarithm of each element in the input array, with underflow protection.</p> <p>The base-10 log is calculated using:     - y = log10(x), where x is clipped away from zero to maintain positivity.</p>"},{"location":"API/particula/util/machine_limit/#arguments_2","title":"Arguments","text":"<ul> <li>value : Array-like of values for base-10 logarithm calculation.</li> </ul>"},{"location":"API/particula/util/machine_limit/#returns_2","title":"Returns","text":"<ul> <li>np.ndarray of base-10 logarithms, with machine-level clipping.</li> </ul>"},{"location":"API/particula/util/machine_limit/#examples_2","title":"Examples","text":"Example Usage<pre><code>import numpy as np\nimport particula as par\n\narr = np.array([1e-320, 1.0, 1000.0])\nprint(par.get_safe_log10(arr))\n# Output: [-320.           0.           3.        ]\n</code></pre>"},{"location":"API/particula/util/machine_limit/#references_2","title":"References","text":"<ul> <li>\"Logarithms and Machine Precision,\" NumPy Documentation, NumPy.org.</li> </ul>"},{"location":"API/particula/util/machine_limit/#signature_2","title":"Signature","text":"<pre><code>def get_safe_log10(value: ArrayLike) -&gt; np.ndarray: ...\n</code></pre>"},{"location":"API/particula/util/machine_limit/#get_safe_power","title":"get_safe_power","text":"<p>Show source in machine_limit.py:109</p> <p>Compute the power (base ** exponent) with overflow protection.</p> <p>The power is computed as: result = exp(exponent * log(base)) where the intermediate value is clipped to avoid overflow beyond the machine limits. This function assumes that <code>base</code> contains positive values. The behavior for non-positive bases is undefined.</p>"},{"location":"API/particula/util/machine_limit/#arguments_3","title":"Arguments","text":"<ul> <li>base : Array-like of positive base values.</li> <li>exponent : Array-like of exponents.</li> </ul>"},{"location":"API/particula/util/machine_limit/#returns_3","title":"Returns","text":"<ul> <li>np.ndarray of power values, computed with machine-level clipping.</li> </ul>"},{"location":"API/particula/util/machine_limit/#examples_3","title":"Examples","text":"Example Usage<pre><code>import numpy as np\nimport particula as par\n\nbase = np.array([1, 2, 3])\nexponent = np.array([1, 2, 3])\nprint(par.get_safe_power(base, exponent))\n# Output: [ 1.  4. 27.]\n</code></pre>"},{"location":"API/particula/util/machine_limit/#references_3","title":"References","text":"<ul> <li>\"Floating Point Arithmetic,\" NumPy Documentation, NumPy.org.</li> </ul>"},{"location":"API/particula/util/machine_limit/#signature_3","title":"Signature","text":"<pre><code>@validate_inputs({\"base\": \"positive\"})\ndef get_safe_power(base: ArrayLike, exponent: ArrayLike) -&gt; np.ndarray: ...\n</code></pre>"},{"location":"API/particula/util/reduced_quantity/","title":"Reduced Quantity","text":"<p>Particula Index / Particula / Util / Reduced Quantity</p> <p>Auto-generated documentation for particula.util.reduced_quantity module.</p>"},{"location":"API/particula/util/reduced_quantity/#get_reduced_self_broadcast","title":"get_reduced_self_broadcast","text":"<p>Show source in reduced_quantity.py:71</p> <p>Return a square matrix of pairwise reduced values using a single array.</p> <p>Each element is calculated by broadcasting the array with its transpose: - r_ij = (\u03b1_i \u00d7 \u03b1_j) / (\u03b1_i + \u03b1_j),     - r_ij is the reduced quantity between \u03b1_i and \u03b1_j.</p>"},{"location":"API/particula/util/reduced_quantity/#arguments","title":"Arguments","text":"<ul> <li>alpha_array : A 1D array for pairwise reduced value calculations.</li> </ul>"},{"location":"API/particula/util/reduced_quantity/#returns","title":"Returns","text":"<ul> <li>A 2D square matrix of pairwise reduced values.</li> </ul>"},{"location":"API/particula/util/reduced_quantity/#examples","title":"Examples","text":"Example<pre><code>from particula.util.reduced_quantity import get_reduced_self_broadcast\nimport numpy as np\n\narr = np.array([1.0, 2.0, 3.0])\nprint(get_reduced_self_broadcast(arr))\n# Output: [[0.5       0.6666667 0.75     ]\n#          [0.6666667 1.        1.2      ]\n#          [0.75      1.2       1.5      ]]\n</code></pre>"},{"location":"API/particula/util/reduced_quantity/#references","title":"References","text":"<ul> <li>Reduced Mass, Wikipedia</li> </ul>"},{"location":"API/particula/util/reduced_quantity/#signature","title":"Signature","text":"<pre><code>def get_reduced_self_broadcast(\n    alpha_array: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/util/reduced_quantity/#get_reduced_value","title":"get_reduced_value","text":"<p>Show source in reduced_quantity.py:15</p> <p>Return the reduced value of two parameters.</p> <p>The reduced value is computed using: - r = (\u03b1 \u00d7 \u03b2) / (\u03b1 + \u03b2),     - r is the reduced quantity,     - \u03b1, \u03b2 are the input parameters.</p>"},{"location":"API/particula/util/reduced_quantity/#arguments_1","title":"Arguments","text":"<ul> <li>alpha : The first parameter (scalar or array).</li> <li>beta : The second parameter (scalar or array).</li> </ul>"},{"location":"API/particula/util/reduced_quantity/#returns_1","title":"Returns","text":"<ul> <li>The element-wise reduced quantity, zero if (\u03b1+\u03b2)=0.</li> </ul>"},{"location":"API/particula/util/reduced_quantity/#raises","title":"Raises","text":"<ul> <li>ValueError : If arrays have incompatible shapes.</li> </ul>"},{"location":"API/particula/util/reduced_quantity/#examples_1","title":"Examples","text":"Example<pre><code>from particula.util.reduced_quantity import get_reduced_value\nimport numpy as np\n\nprint(get_reduced_value(3.0, 6.0))\n# Output: 2.0\n\narrA = np.array([1.0, 2.0, 3.0])\narrB = np.array([2.0, 5.0, 10.0])\nprint(get_reduced_value(arrA, arrB))\n# Output: [0.666..., 1.428..., 2.142...]\n</code></pre>"},{"location":"API/particula/util/reduced_quantity/#references_1","title":"References","text":"<ul> <li>Reduced Mass, Wikipedia</li> </ul>"},{"location":"API/particula/util/reduced_quantity/#signature_1","title":"Signature","text":"<pre><code>def get_reduced_value(\n    alpha: Union[float, NDArray[np.float64]], beta: Union[float, NDArray[np.float64]]\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/util/refractive_index_mixing/","title":"Refractive Index Mixing","text":"<p>Particula Index / Particula / Util / Refractive Index Mixing</p> <p>Auto-generated documentation for particula.util.refractive_index_mixing module.</p>"},{"location":"API/particula/util/refractive_index_mixing/#get_effective_refractive_index","title":"get_effective_refractive_index","text":"<p>Show source in refractive_index_mixing.py:11</p> <p>Calculate the effective refractive index of a two-solute mixture.</p> <p>The calculation uses volume-weighted molar refraction, described by: - r_eff = (v0 / (v0 + v1)) * ((m0 - 1) / (m0 + 2)) +           (v1 / (v0 + v1)) * ((m1 - 1) / (m1 + 2))     - r_eff is the effective molar refraction,     - m0, m1 are the refractive indices of each solute,     - v0, v1 are the volumes of each solute.</p> <p>Then the resulting refractive index is: - n_eff = (2 \u00d7 r_eff + 1) / (1 - r_eff).</p>"},{"location":"API/particula/util/refractive_index_mixing/#arguments","title":"Arguments","text":"<ul> <li>m_zero : Refractive index of solute 0 (float or complex).</li> <li>m_one : Refractive index of solute 1 (float or complex).</li> <li>volume_zero : Volume of solute 0.</li> <li>volume_one : Volume of solute 1.</li> </ul>"},{"location":"API/particula/util/refractive_index_mixing/#returns","title":"Returns","text":"<ul> <li>Effective refractive index of the mixture (float or complex).</li> </ul>"},{"location":"API/particula/util/refractive_index_mixing/#examples","title":"Examples","text":"Example<pre><code>import particula as par\nn_mix = par.get_effective_refractive_index(1.33, 1.50, 2.0, 1.0)\nprint(n_mix)\n# Output: ~1.382\n</code></pre>"},{"location":"API/particula/util/refractive_index_mixing/#references","title":"References","text":"<ul> <li>Y. Liu &amp; P. H. Daum, \"Relationship of refractive index to mass   density and self-consistency mixing rules for multicomponent   mixtures like ambient aerosols,\" Journal of Aerosol Science,   vol. 39(11), pp. 974\u2013986, 2008.</li> <li><code>DOI</code> - 10.1016/j.jaerosci.2008.06.006</li> <li>Wikipedia contributors, \"Refractive index,\" Wikipedia.</li> </ul>"},{"location":"API/particula/util/refractive_index_mixing/#signature","title":"Signature","text":"<pre><code>def get_effective_refractive_index(\n    m_zero: Union[float, complex],\n    m_one: Union[float, complex],\n    volume_zero: float,\n    volume_one: float,\n) -&gt; Union[float, complex]: ...\n</code></pre>"},{"location":"API/particula/util/validate_inputs/","title":"Validate Inputs","text":"<p>Particula Index / Particula / Util / Validate Inputs</p> <p>Auto-generated documentation for particula.util.validate_inputs module.</p>"},{"location":"API/particula/util/validate_inputs/#validate_finite","title":"validate_finite","text":"<p>Show source in validate_inputs.py:98</p> <p>Validate that a numeric array or scalar has no infinities or NaNs.</p>"},{"location":"API/particula/util/validate_inputs/#arguments","title":"Arguments","text":"<ul> <li>value : Array-like numeric values to check.</li> <li>name : The argument name, used in the error message.</li> </ul>"},{"location":"API/particula/util/validate_inputs/#raises","title":"Raises","text":"<ul> <li>ValueError : If any element is inf or NaN.</li> </ul>"},{"location":"API/particula/util/validate_inputs/#signature","title":"Signature","text":"<pre><code>def validate_finite(value, name): ...\n</code></pre>"},{"location":"API/particula/util/validate_inputs/#validate_inputs","title":"validate_inputs","text":"<p>Show source in validate_inputs.py:113</p> <p>A decorator to validate function inputs against specified constraints.</p> <p>The constraints are defined by a dictionary of argument names and their validation types (e.g., \"positive\", \"negative\", \"nonnegative\", etc.). If any argument violates its constraint, a ValueError is raised.</p>"},{"location":"API/particula/util/validate_inputs/#arguments_1","title":"Arguments","text":"<ul> <li>dict_args : Dictionary {argument_name: constraint_type}, where the     constraint_type is one of:<ul> <li>\"positive\" : Must be strictly &gt; 0.</li> <li>\"negative\" : Must be strictly &lt; 0.</li> <li>\"nonpositive\" : Must be &lt;= 0.</li> <li>\"nonnegative\" : Must be &gt;= 0.</li> <li>\"nonzero\" : Must be != 0.</li> <li>\"finite\" : Must not contain inf or NaN.</li> </ul> </li> </ul>"},{"location":"API/particula/util/validate_inputs/#returns","title":"Returns","text":"<ul> <li>A decorator that applies the specified input validations.</li> </ul>"},{"location":"API/particula/util/validate_inputs/#examples","title":"Examples","text":"<pre><code>from particula.util.validate_inputs import validate_inputs\n\n@validate_inputs({\"mass\": \"positive\", \"temperature\": \"nonnegative\"})\ndef some_function(mass, temperature):\n    return mass * temperature\n</code></pre>"},{"location":"API/particula/util/validate_inputs/#signature_1","title":"Signature","text":"<pre><code>def validate_inputs(dict_args): ...\n</code></pre>"},{"location":"API/particula/util/validate_inputs/#validate_negative","title":"validate_negative","text":"<p>Show source in validate_inputs.py:38</p> <p>Validate that a numeric array or scalar is strictly negative.</p>"},{"location":"API/particula/util/validate_inputs/#arguments_2","title":"Arguments","text":"<ul> <li>value : Array-like numeric values to check.</li> <li>name : The argument name, used in the error message.</li> </ul>"},{"location":"API/particula/util/validate_inputs/#raises_1","title":"Raises","text":"<ul> <li>ValueError : If any element is &gt;= 0.</li> </ul>"},{"location":"API/particula/util/validate_inputs/#signature_2","title":"Signature","text":"<pre><code>def validate_negative(value, name): ...\n</code></pre>"},{"location":"API/particula/util/validate_inputs/#validate_nonnegative","title":"validate_nonnegative","text":"<p>Show source in validate_inputs.py:68</p> <p>Validate that a numeric array or scalar is nonnegative (&gt;= 0).</p>"},{"location":"API/particula/util/validate_inputs/#arguments_3","title":"Arguments","text":"<ul> <li>value : Array-like numeric values to check.</li> <li>name : The argument name, used in the error message.</li> </ul>"},{"location":"API/particula/util/validate_inputs/#raises_2","title":"Raises","text":"<ul> <li>ValueError : If any element is &lt; 0.</li> </ul>"},{"location":"API/particula/util/validate_inputs/#signature_3","title":"Signature","text":"<pre><code>def validate_nonnegative(value, name): ...\n</code></pre>"},{"location":"API/particula/util/validate_inputs/#validate_nonpositive","title":"validate_nonpositive","text":"<p>Show source in validate_inputs.py:53</p> <p>Validate that a numeric array or scalar is nonpositive (&lt;= 0).</p>"},{"location":"API/particula/util/validate_inputs/#arguments_4","title":"Arguments","text":"<ul> <li>value : Array-like numeric values to check.</li> <li>name : The argument name, used in the error message.</li> </ul>"},{"location":"API/particula/util/validate_inputs/#raises_3","title":"Raises","text":"<ul> <li>ValueError : If any element is &gt; 0.</li> </ul>"},{"location":"API/particula/util/validate_inputs/#signature_4","title":"Signature","text":"<pre><code>def validate_nonpositive(value, name): ...\n</code></pre>"},{"location":"API/particula/util/validate_inputs/#validate_nonzero","title":"validate_nonzero","text":"<p>Show source in validate_inputs.py:83</p> <p>Validate that a numeric array or scalar is nonzero.</p>"},{"location":"API/particula/util/validate_inputs/#arguments_5","title":"Arguments","text":"<ul> <li>value : Array-like numeric values to check.</li> <li>name : The argument name, used in the error message.</li> </ul>"},{"location":"API/particula/util/validate_inputs/#raises_4","title":"Raises","text":"<ul> <li>ValueError : If any element is 0.</li> </ul>"},{"location":"API/particula/util/validate_inputs/#signature_5","title":"Signature","text":"<pre><code>def validate_nonzero(value, name): ...\n</code></pre>"},{"location":"API/particula/util/validate_inputs/#validate_positive","title":"validate_positive","text":"<p>Show source in validate_inputs.py:23</p> <p>Validate that a numeric array or scalar is strictly positive.</p>"},{"location":"API/particula/util/validate_inputs/#arguments_6","title":"Arguments","text":"<ul> <li>value : Array-like numeric values to check.</li> <li>name : The argument name, used in the error message.</li> </ul>"},{"location":"API/particula/util/validate_inputs/#raises_5","title":"Raises","text":"<ul> <li>ValueError : If any element is &lt;= 0.</li> </ul>"},{"location":"API/particula/util/validate_inputs/#signature_6","title":"Signature","text":"<pre><code>def validate_positive(value, name): ...\n</code></pre>"},{"location":"API/particula/util/converting/","title":"Converting","text":"<p>Particula Index / Particula / Util / Converting</p> <p>Auto-generated documentation for particula.util.converting module.</p>"},{"location":"API/particula/util/converting/#modules","title":"Modules","text":"<ul> <li>Convert Dtypes</li> <li>Convert Kappa Volumes</li> <li>Convert Mass Concentration</li> <li>Convert Mole Fraction</li> <li>Convert Size Distribution</li> <li>Convert Units</li> </ul>"},{"location":"API/particula/util/converting/convert_dtypes/","title":"Convert Dtypes","text":"<p>Particula Index / Particula / Util / Converting / Convert Dtypes</p> <p>Auto-generated documentation for particula.util.converting.convert_dtypes module.</p>"},{"location":"API/particula/util/converting/convert_dtypes/#get_coerced_type","title":"get_coerced_type","text":"<p>Show source in convert_dtypes.py:16</p> <p>Coerce the given data to the specified dtype if it is not already of that type.</p>"},{"location":"API/particula/util/converting/convert_dtypes/#arguments","title":"Arguments","text":"<ul> <li>data : The data to be coerced (any type).</li> <li>dtype : The desired data type, e.g. float, int, or np.ndarray.</li> </ul>"},{"location":"API/particula/util/converting/convert_dtypes/#returns","title":"Returns","text":"<ul> <li>The data converted to the specified type.</li> </ul>"},{"location":"API/particula/util/converting/convert_dtypes/#raises","title":"Raises","text":"<ul> <li>ValueError : If the data cannot be coerced to the desired dtype.</li> </ul>"},{"location":"API/particula/util/converting/convert_dtypes/#examples","title":"Examples","text":"Coerce integer to float<pre><code>import particula as par\nx = par.get_coerced_type(1, float)\nprint(x)\n# 1.0\n</code></pre> Coerce list to numpy array<pre><code>import numpy as np\nimport particula as par\narr = par.get_coerced_type([1, 2, 3], np.ndarray)\nprint(arr)\n# [1 2 3]\n</code></pre>"},{"location":"API/particula/util/converting/convert_dtypes/#references","title":"References","text":"<ul> <li>NumPy Documentation: https://numpy.org/doc/</li> </ul>"},{"location":"API/particula/util/converting/convert_dtypes/#signature","title":"Signature","text":"<pre><code>def get_coerced_type(data, dtype): ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_dtypes/#get_dict_from_list","title":"get_dict_from_list","text":"<p>Show source in convert_dtypes.py:58</p> <p>Convert a list of strings into a dictionary mapping each string to its index.</p>"},{"location":"API/particula/util/converting/convert_dtypes/#arguments_1","title":"Arguments","text":"<ul> <li>list_of_str : A non-empty list of strings.</li> </ul>"},{"location":"API/particula/util/converting/convert_dtypes/#returns_1","title":"Returns","text":"<ul> <li>A dict where keys are the strings and values are their indices.</li> </ul>"},{"location":"API/particula/util/converting/convert_dtypes/#raises_1","title":"Raises","text":"<ul> <li>AssertionError : If the list is empty or contains non-string items.</li> </ul>"},{"location":"API/particula/util/converting/convert_dtypes/#examples_1","title":"Examples","text":"Convert list of strings to dictionary<pre><code>import particula as par\n\nstr_list = [\"alpha\", \"beta\", \"gamma\"]\nmapping = par.get_dict_from_list(str_list)\nprint(mapping)\n# {'alpha': 0, 'beta': 1, 'gamma': 2}\n</code></pre>"},{"location":"API/particula/util/converting/convert_dtypes/#signature_1","title":"Signature","text":"<pre><code>def get_dict_from_list(list_of_str: list) -&gt; dict: ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_dtypes/#get_shape_check","title":"get_shape_check","text":"<p>Show source in convert_dtypes.py:130</p> <p>Validate or reshape a data array to ensure compatibility with a time array and header list.</p> <p>If data is 2D, the function attempts to align the time dimension with one of the axes. If data is 1D, the header list must have exactly one entry.</p>"},{"location":"API/particula/util/converting/convert_dtypes/#arguments_2","title":"Arguments","text":"<ul> <li>time : 1D array of time values.</li> <li>data : 1D or 2D array of data values.</li> <li>header : List of headers corresponding to the data dimensions.</li> </ul>"},{"location":"API/particula/util/converting/convert_dtypes/#returns_2","title":"Returns","text":"<ul> <li>A possibly reshaped data array ensuring alignment with time and   header constraints.</li> </ul>"},{"location":"API/particula/util/converting/convert_dtypes/#raises_2","title":"Raises","text":"<ul> <li>ValueError : If the header length does not match the data shape,   or if data is 1D but header has more than one entry.</li> </ul>"},{"location":"API/particula/util/converting/convert_dtypes/#examples_2","title":"Examples","text":"<pre><code>import numpy as np\nimport particula as par\ntime_array = np.arange(0, 10)\ndata_2d = np.random.rand(10, 5)\nheaders = ['sensor1', 'sensor2', 'sensor3', 'sensor4', 'sensor5']\nreshaped_data = par.get_shape_check(time_array, data_2d, headers)\nprint(reshaped_data.shape)\n# Should be (10, 5)\n</code></pre>"},{"location":"API/particula/util/converting/convert_dtypes/#signature_2","title":"Signature","text":"<pre><code>def get_shape_check(time: np.ndarray, data: np.ndarray, header: list) -&gt; np.ndarray: ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_dtypes/#get_values_of_dict","title":"get_values_of_dict","text":"<p>Show source in convert_dtypes.py:93</p> <p>Retrieve a list of index values from a dictionary for the specified keys.</p>"},{"location":"API/particula/util/converting/convert_dtypes/#arguments_3","title":"Arguments","text":"<ul> <li>key_list : The keys to look up in the dictionary.</li> <li>dict_to_check : The dictionary from which values are retrieved.</li> </ul>"},{"location":"API/particula/util/converting/convert_dtypes/#returns_3","title":"Returns","text":"<ul> <li>A list of values corresponding to the given keys.</li> </ul>"},{"location":"API/particula/util/converting/convert_dtypes/#raises_3","title":"Raises","text":"<ul> <li>KeyError : If any key in key_list is not found in dict_to_check.</li> </ul>"},{"location":"API/particula/util/converting/convert_dtypes/#examples_3","title":"Examples","text":"<pre><code>import particula as par\nmy_dict = {'a': 1, 'b': 2, 'c': 3}\nvals = par.get_values_of_dict(['a', 'c'], my_dict)\nprint(vals)\n# [1, 3]\n</code></pre>"},{"location":"API/particula/util/converting/convert_dtypes/#signature_3","title":"Signature","text":"<pre><code>def get_values_of_dict(\n    key_list: List[str], dict_to_check: Dict[str, Any]\n) -&gt; List[Any]: ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_kappa_volumes/","title":"Convert Kappa Volumes","text":"<p>Particula Index / Particula / Util / Converting / Convert Kappa Volumes</p> <p>Auto-generated documentation for particula.util.converting.convert_kappa_volumes module.</p>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#get_kappa_from_volumes","title":"get_kappa_from_volumes","text":"<p>Show source in convert_kappa_volumes.py:108</p> <p>Compute the \u03ba parameter from known volumes of solute and water, given water activity.</p> <p>Rearranging \u03ba-K\u00f6hler-based relationships, we have: - \u03ba = ( (1/aw) - 1 ) \u00d7 (V_water / V_solute).</p>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#arguments","title":"Arguments","text":"<ul> <li>volume_solute : Solute volume (float or NDArray).</li> <li>volume_water : Water volume (float or NDArray).</li> <li>water_activity : Water activity (float or NDArray, 0 &lt; aw \u2264 1).</li> </ul>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#returns","title":"Returns","text":"<ul> <li>The kappa parameter (float or NDArray).</li> </ul>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#examples","title":"Examples","text":"<pre><code>import particula as par\nkappa_val = par.get_kappa_from_volumes(1e-19, 4e-19, 0.95)\nprint(kappa_val)\n# ~indicative value for the solute's hygroscopicity\n</code></pre>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#references","title":"References","text":"<ul> <li>Petters, M. D. &amp; Kreidenweis, S. M. (2007). \"A single parameter   representation of hygroscopic growth and cloud condensation nucleus   activity.\" Atmos. Chem. Phys.</li> </ul>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#signature","title":"Signature","text":"<pre><code>def get_kappa_from_volumes(\n    volume_solute: Union[float, np.ndarray],\n    volume_water: Union[float, np.ndarray],\n    water_activity: Union[float, np.ndarray],\n) -&gt; Union[float, np.ndarray]: ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#get_solute_volume_from_kappa","title":"get_solute_volume_from_kappa","text":"<p>Show source in convert_kappa_volumes.py:19</p> <p>Calculate the solute volume from the total solution volume using \u03ba-K\u00f6hler theory.</p> <p>The relation for \u03ba-K\u00f6hler can be written as: - V_solute = V_total \u00d7 F   where F depends on kappa and water activity (aw), ensuring that   for aw \u2192 0, V_solute \u2192 V_total.</p>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#arguments_1","title":"Arguments","text":"<ul> <li>volume_total : Volume of the total solution (float or NDArray).</li> <li>kappa : Kappa parameter (float or NDArray).</li> <li>water_activity : Water activity (float or NDArray, 0 &lt; aw \u2264 1).</li> </ul>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#returns_1","title":"Returns","text":"<ul> <li>Solute volume (float or NDArray).</li> </ul>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#examples_1","title":"Examples","text":"Example Usage<pre><code>import particula as par\nv_sol = par.get_solute_from_kappa_volume(1e-18, 0.8, 0.9)\nprint(v_sol)\n# ~some fraction of the total volume\n</code></pre>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#references_1","title":"References","text":"<ul> <li>Petters, M. D. &amp; Kreidenweis, S. M. (2007). \"A single parameter   representation of hygroscopic growth and cloud condensation nucleus   activity.\" Atmos. Chem. Phys.</li> </ul>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#signature_1","title":"Signature","text":"<pre><code>def get_solute_volume_from_kappa(\n    volume_total: Union[float, np.ndarray],\n    kappa: Union[float, np.ndarray],\n    water_activity: Union[float, np.ndarray],\n) -&gt; Union[float, np.ndarray]: ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#get_water_volume_from_kappa","title":"get_water_volume_from_kappa","text":"<p>Show source in convert_kappa_volumes.py:65</p> <p>Calculate the water volume from the solute volume, \u03ba parameter, and water activity.</p> <p>This uses \u03ba-K\u00f6hler-type relations where: - V_water = V_solute \u00d7 ( \u03ba / (1/aw - 1) ), ensuring that for aw \u2192 0,   V_water \u2192 0.</p>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#arguments_2","title":"Arguments","text":"<ul> <li>volume_solute : Volume of solute (float or NDArray).</li> <li>kappa : Kappa parameter (float or NDArray).</li> <li>water_activity : Water activity (float or NDArray, 0 &lt; aw \u2264 1).</li> </ul>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#returns_2","title":"Returns","text":"<ul> <li>Water volume (float or NDArray).</li> </ul>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#examples_2","title":"Examples","text":"Example Usage<pre><code>import particula as par\nv_water = par.get_water_volume_from_kappa(1e-19, 0.5, 0.95)\nprint(v_water)\n# ~some fraction of the solute volume\n</code></pre>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#references_2","title":"References","text":"<ul> <li>Petters, M. D. &amp; Kreidenweis, S. M. (2007). \"A single parameter   representation of hygroscopic growth and cloud condensation nucleus   activity.\" Atmos. Chem. Phys.</li> </ul>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#signature_2","title":"Signature","text":"<pre><code>def get_water_volume_from_kappa(\n    volume_solute: Union[float, NDArray[np.float64]],\n    kappa: Union[float, NDArray[np.float64]],\n    water_activity: Union[float, NDArray[np.float64]],\n) -&gt; Union[float, NDArray[np.float64]]: ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#get_water_volume_in_mixture","title":"get_water_volume_in_mixture","text":"<p>Show source in convert_kappa_volumes.py:149</p> <p>Calculate the water volume in a solute-water mixture from a specified water volume fraction.</p> <p>The relationship is:</p> <ul> <li>V_water = (\u03c6_water \u00d7 V_solute_dry) / (1 - \u03c6_water)<ul> <li>\u03c6_water is the water volume fraction.</li> </ul> </li> </ul>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#arguments_3","title":"Arguments","text":"<ul> <li>volume_solute_dry : Volume of the solute (float), excluding water.</li> <li>volume_fraction_water : Fraction of water volume in the total mixture   (float, 0 \u2264 \u03c6_water &lt; 1).</li> </ul>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#returns_3","title":"Returns","text":"<ul> <li>The water volume (float), in the same units as volume_solute_dry.</li> </ul>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#examples_3","title":"Examples","text":"Example Usage<pre><code>import particula as par\nv_water = par.get_water_volume_in_mixture(100.0, 0.8)\nprint(v_water)\n# 400.0\n</code></pre>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#references_3","title":"References","text":"<ul> <li>\"Volume Fractions in Mixture Calculations,\" Standard Chemistry Texts.</li> </ul>"},{"location":"API/particula/util/converting/convert_kappa_volumes/#signature_3","title":"Signature","text":"<pre><code>def get_water_volume_in_mixture(\n    volume_solute_dry: Union[float, np.ndarray],\n    volume_fraction_water: Union[float, np.ndarray],\n) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_mass_concentration/","title":"Convert Mass Concentration","text":"<p>Particula Index / Particula / Util / Converting / Convert Mass Concentration</p> <p>Auto-generated documentation for particula.util.converting.convert_mass_concentration module.</p>"},{"location":"API/particula/util/converting/convert_mass_concentration/#get_mass_fraction_from_mass","title":"get_mass_fraction_from_mass","text":"<p>Show source in convert_mass_concentration.py:165</p> <p>Convert mass concentrations to mass fractions for N components.</p> <p>The mass fraction is computed by:</p> <ul> <li>w\u1d62 = m\u1d62 / m\u209c\u2092\u209c\u2090\u2097<ul> <li>w\u1d62 is the mass fraction of component i (unitless),</li> <li>m\u1d62 is the mass concentration of component i (kg/m\u00b3),</li> <li>m\u209c\u2092\u209c\u2090\u2097 is the total mass concentration of all components (kg/m\u00b3).</li> </ul> </li> </ul>"},{"location":"API/particula/util/converting/convert_mass_concentration/#arguments","title":"Arguments","text":"<ul> <li>mass_concentrations : Mass concentrations (kg/m\u00b3). Can be 1D or 2D.</li> </ul>"},{"location":"API/particula/util/converting/convert_mass_concentration/#returns","title":"Returns","text":"<ul> <li>Mass fractions (unitless). Rows sum to 1 if input is 2D; returns 1D   mass fractions if input is 1D.</li> </ul>"},{"location":"API/particula/util/converting/convert_mass_concentration/#examples","title":"Examples","text":"<pre><code>import numpy as np\nimport particula as par\n\nmass_conc = np.array([10.0, 30.0, 60.0])  # kg/m\u00b3\npar.get_mass_fraction(mass_conc)\n# Output might be array([0.1, 0.3, 0.6])\n</code></pre>"},{"location":"API/particula/util/converting/convert_mass_concentration/#references","title":"References","text":"<ul> <li>Wikipedia contributors, \"Mass fraction (chemistry),\" Wikipedia,   https://en.wikipedia.org/wiki/Mass_fraction_(chemistry).</li> </ul>"},{"location":"API/particula/util/converting/convert_mass_concentration/#signature","title":"Signature","text":"<pre><code>@validate_inputs({\"mass_concentrations\": \"nonnegative\"})\ndef get_mass_fraction_from_mass(\n    mass_concentrations: NDArray[np.float64],\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_mass_concentration/#get_mole_fraction_from_mass","title":"get_mole_fraction_from_mass","text":"<p>Show source in convert_mass_concentration.py:9</p> <p>Convert mass concentrations to mole fractions for N components.</p> <p>The mole fraction is computed using:</p> <ul> <li>x\u1d62 = (m\u1d62 / M\u1d62) / \u03a3\u2c7c(m\u2c7c / M\u2c7c)<ul> <li>x\u1d62 is the mole fraction of component i,</li> <li>m\u1d62 is the mass concentration of component i (kg/m\u00b3),</li> <li>M\u1d62 is the molar mass of component i (kg/mol).</li> </ul> </li> </ul>"},{"location":"API/particula/util/converting/convert_mass_concentration/#arguments_1","title":"Arguments","text":"<ul> <li>mass_concentrations : Mass concentrations (kg/m\u00b3). Can be 1D or 2D.</li> <li>molar_masses : Molar masses (kg/mol). Must match dimensions of   mass_concentrations.</li> </ul>"},{"location":"API/particula/util/converting/convert_mass_concentration/#returns_1","title":"Returns","text":"<ul> <li>Mole fractions (unitless). Rows sum to 1 if input is 2D; returns 1D   mole fractions if input is 1D.</li> </ul>"},{"location":"API/particula/util/converting/convert_mass_concentration/#examples_1","title":"Examples","text":"<pre><code>import numpy as np\nimport particula as par\nmass_conc = np.array([0.2, 0.8])  # kg/m\u00b3\nmol_masses = np.array([0.018, 0.032])  # kg/mol\nget_mole_fraction_from_mass(mass_conc, mol_masses))\n# Output might be array([0.379..., 0.620...])\n</code></pre>"},{"location":"API/particula/util/converting/convert_mass_concentration/#references_1","title":"References","text":"<ul> <li>Wikipedia contributors, \"Mole fraction,\" Wikipedia,   https://en.wikipedia.org/wiki/Mole_fraction.</li> </ul>"},{"location":"API/particula/util/converting/convert_mass_concentration/#signature_1","title":"Signature","text":"<pre><code>@validate_inputs({\"mass_concentrations\": \"nonnegative\", \"molar_masses\": \"positive\"})\ndef get_mole_fraction_from_mass(\n    mass_concentrations: NDArray[np.float64], molar_masses: NDArray[np.float64]\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_mass_concentration/#get_volume_fraction_from_mass","title":"get_volume_fraction_from_mass","text":"<p>Show source in convert_mass_concentration.py:84</p> <p>Convert mass concentrations to volume fractions for N components.</p> <p>The volume fraction is determined by:</p> <ul> <li>\u03d5\u1d62 = v\u1d62 / v\u209c\u2092\u209c\u2090\u2097<ul> <li>\u03d5\u1d62 is the volume fraction of component i (unitless),</li> <li>v\u1d62 is the volume of component i (m\u00b3),</li> <li>v\u209c\u2092\u209c\u2090\u2097 is the total volume of all components (m\u00b3).</li> </ul> </li> </ul> <p>Volumes computed from mass concentration (m\u1d62) and density (\u03c1\u1d62) using: - v\u1d62 = m\u1d62 / \u03c1\u1d62.</p>"},{"location":"API/particula/util/converting/convert_mass_concentration/#arguments_2","title":"Arguments","text":"<ul> <li>mass_concentrations : Mass concentrations (kg/m\u00b3). Can be 1D or 2D.</li> <li>densities : Densities (kg/m\u00b3). Must match the shape of   mass_concentrations.</li> </ul>"},{"location":"API/particula/util/converting/convert_mass_concentration/#returns_2","title":"Returns","text":"<ul> <li>Volume fractions (unitless). Rows sum to 1 if input is 2D; returns 1D   volume fractions if input is 1D.</li> </ul>"},{"location":"API/particula/util/converting/convert_mass_concentration/#examples_2","title":"Examples","text":"<pre><code>import numpy as np\nimport particula as par\n\nmass_conc = np.array([[1.0, 2.0], [0.5, 0.5]])  # kg/m\u00b3\ndens = np.array([1000.0, 800.0])               # kg/m\u00b3\npar.get_volume_fraction_from_mass(mass_conc, dens))\n# Output:\n# array([[0.444..., 0.555...],\n#        [0.5     , 0.5     ]])\n</code></pre>"},{"location":"API/particula/util/converting/convert_mass_concentration/#references_2","title":"References","text":"<ul> <li>Wikipedia contributors, \"Volume fraction,\" Wikipedia,   https://en.wikipedia.org/wiki/Volume_fraction.</li> </ul>"},{"location":"API/particula/util/converting/convert_mass_concentration/#signature_2","title":"Signature","text":"<pre><code>@validate_inputs({\"mass_concentrations\": \"nonnegative\", \"densities\": \"positive\"})\ndef get_volume_fraction_from_mass(\n    mass_concentrations: NDArray[np.float64], densities: NDArray[np.float64]\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_mole_fraction/","title":"Convert Mole Fraction","text":"<p>Particula Index / Particula / Util / Converting / Convert Mole Fraction</p> <p>Auto-generated documentation for particula.util.converting.convert_mole_fraction module.</p>"},{"location":"API/particula/util/converting/convert_mole_fraction/#get_mass_fractions_from_moles","title":"get_mass_fractions_from_moles","text":"<p>Show source in convert_mole_fraction.py:11</p> <p>Convert mole fractions to mass fractions for N components.</p> <p>The relationship between mass fraction (w\u1d62) and mole fraction (x\u1d62) is:</p> <ul> <li>w\u1d62 = (x\u1d62 \u00d7 M\u1d62) / \u03a3\u2c7c(x\u2c7c \u00d7 M\u2c7c)<ul> <li>w\u1d62 is the mass fraction of component i (unitless),</li> <li>x\u1d62 is the mole fraction of component i (unitless),</li> <li>M\u1d62 is the molecular weight of component i (kg/mol),</li> <li>\u03a3\u2c7c(x\u2c7c \u00d7 M\u2c7c) is the total mass (per total moles).</li> </ul> </li> </ul>"},{"location":"API/particula/util/converting/convert_mole_fraction/#arguments","title":"Arguments","text":"<p>mole_fractions : Mole fractions (unitless). Can be 1D or 2D.     If 2D, each row is treated as a set of mole fractions for N     components. molecular_weights : Molecular weights (kg/mol). Must match the shape of     <code>mole_fractions</code> in the last dimension.</p>"},{"location":"API/particula/util/converting/convert_mole_fraction/#returns","title":"Returns","text":"<ul> <li>Mass fractions (unitless). Rows sum to 1 if input is 2D; returns 1D   mass fractions if input is 1D.</li> </ul>"},{"location":"API/particula/util/converting/convert_mole_fraction/#examples","title":"Examples","text":"Example 1: 1D<pre><code>import numpy as np\nimport particula as par\nx_1d = np.array([0.2, 0.5, 0.3])    # mole fractions\nmw_1d = np.array([18.0, 44.0, 28.0])  # molecular weights\npar.get_mass_fractions_from_moles(x_1d, mw_1d)\n# Output: ([0.379..., 0.620..., 0.0])\n</code></pre> Example 2: 2D<pre><code>import numpy as np\nimport particula as par\nx_2d = np.array([\n    [0.2, 0.5, 0.3],\n    [0.3, 0.3, 0.4]\n])\nmw_2d = np.array([18.0, 44.0, 28.0])\npar.get_mass_fractions_from_moles(x_2d, mw_2d)\n</code></pre>"},{"location":"API/particula/util/converting/convert_mole_fraction/#references","title":"References","text":"<ul> <li>Wikipedia contributors, \"Mass fraction (chemistry),\" Wikipedia,   https://en.wikipedia.org/wiki/Mass_fraction_(chemistry).</li> </ul>"},{"location":"API/particula/util/converting/convert_mole_fraction/#signature","title":"Signature","text":"<pre><code>@validate_inputs({\"mole_fractions\": \"nonnegative\", \"molecular_weights\": \"positive\"})\ndef get_mass_fractions_from_moles(\n    mole_fractions: NDArray[np.float64], molecular_weights: NDArray[np.float64]\n) -&gt; NDArray[np.float64]: ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/","title":"Convert Size Distribution","text":"<p>Particula Index / Particula / Util / Converting / Convert Size Distribution</p> <p>Auto-generated documentation for particula.util.converting.convert_size_distribution module.</p>"},{"location":"API/particula/util/converting/convert_size_distribution/#conversionstrategy","title":"ConversionStrategy","text":"<p>Show source in convert_size_distribution.py:39</p> <p>Defines an interface for conversion strategies between particle size distribution formats.</p> <p>All subclasses must implement the convert method to perform the actual conversion logic.</p>"},{"location":"API/particula/util/converting/convert_size_distribution/#examples","title":"Examples","text":"Subclass Example<pre><code>class CustomStrategy(ConversionStrategy):\n    def convert(self, diameters, concentration, inverse=False):\n        # Custom conversion logic here\n        return concentration\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#signature","title":"Signature","text":"<pre><code>class ConversionStrategy: ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#conversionstrategyconvert","title":"ConversionStrategy().convert","text":"<p>Show source in convert_size_distribution.py:56</p> <p>Convert distribution data from one scale to another.</p>"},{"location":"API/particula/util/converting/convert_size_distribution/#arguments","title":"Arguments","text":"<ul> <li>diameters : Array of particle diameters.</li> <li>concentration : The distribution data corresponding to these     diameters.</li> <li>inverse : If True, reverse the direction of the conversion.</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#returns","title":"Returns","text":"<ul> <li>np.ndarray of converted distribution data.</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#raises","title":"Raises","text":"<ul> <li>NotImplementedError : If not overridden by a subclass.</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#signature_1","title":"Signature","text":"<pre><code>def convert(\n    self, diameters: np.ndarray, concentration: np.ndarray, inverse: bool = False\n) -&gt; np.ndarray: ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#dndlogdptopdfconversionstrategy","title":"DNdlogDPtoPDFConversionStrategy","text":"<p>Show source in convert_size_distribution.py:187</p> <p>Conversion strategy for converting between dn/dlogdp and PDF formats, possibly through an intermediate PMF conversion.</p>"},{"location":"API/particula/util/converting/convert_size_distribution/#examples_1","title":"Examples","text":"Example Usage<pre><code>strategy = DNdlogDPtoPDFConversionStrategy()\nresult_pdf = strategy.convert(diameters, dn_dlogdp_data)\n# result_pdf is now in PDF format\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#signature_2","title":"Signature","text":"<pre><code>class DNdlogDPtoPDFConversionStrategy(ConversionStrategy): ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#see-also","title":"See also","text":"<ul> <li>ConversionStrategy</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#dndlogdptopdfconversionstrategyconvert","title":"DNdlogDPtoPDFConversionStrategy().convert","text":"<p>Show source in convert_size_distribution.py:200</p> <p>Convert between dn/dlogdp and PDF formats through an intermediate PMF step.</p>"},{"location":"API/particula/util/converting/convert_size_distribution/#arguments_1","title":"Arguments","text":"<ul> <li>diameters : Array of particle diameters.</li> <li>concentration : Distribution data in dn/dlogdp or PDF format.</li> <li>inverse : If True, convert from PDF to dn/dlogdp; otherwise the     opposite.</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#returns_1","title":"Returns","text":"<ul> <li>np.ndarray of the distribution in the target format.</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#signature_3","title":"Signature","text":"<pre><code>def convert(\n    self, diameters: np.ndarray, concentration: np.ndarray, inverse: bool = False\n) -&gt; np.ndarray: ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#dndlogdptopmfconversionstrategy","title":"DNdlogDPtoPMFConversionStrategy","text":"<p>Show source in convert_size_distribution.py:117</p> <p>Conversion strategy for converting between dn/dlogdp and PMF formats.</p>"},{"location":"API/particula/util/converting/convert_size_distribution/#examples_2","title":"Examples","text":"Example Usage<pre><code>strategy = DNdlogDPtoPMFConversionStrategy()\nresult = strategy.convert(diameters, dn_dlogdp_conc)\n# result is now in PMF format\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#signature_4","title":"Signature","text":"<pre><code>class DNdlogDPtoPMFConversionStrategy(ConversionStrategy): ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#see-also_1","title":"See also","text":"<ul> <li>ConversionStrategy</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#dndlogdptopmfconversionstrategyconvert","title":"DNdlogDPtoPMFConversionStrategy().convert","text":"<p>Show source in convert_size_distribution.py:129</p> <p>Perform the conversion between dn/dlogdp and PMF formats.</p>"},{"location":"API/particula/util/converting/convert_size_distribution/#arguments_2","title":"Arguments","text":"<ul> <li>diameters : Array of particle diameters.</li> <li>concentration : Distribution data in dn/dlogdp or PMF format.</li> <li>inverse : If True, convert from PMF to dn/dlogdp; otherwise the     opposite.</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#returns_2","title":"Returns","text":"<ul> <li>np.ndarray of the distribution in the target format.</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#signature_5","title":"Signature","text":"<pre><code>def convert(\n    self, diameters: np.ndarray, concentration: np.ndarray, inverse: bool = False\n) -&gt; np.ndarray: ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#pmftopdfconversionstrategy","title":"PMFtoPDFConversionStrategy","text":"<p>Show source in convert_size_distribution.py:152</p> <p>Conversion strategy for converting between PMF and PDF formats.</p>"},{"location":"API/particula/util/converting/convert_size_distribution/#examples_3","title":"Examples","text":"Example Usage<pre><code>strategy = PMFtoPDFConversionStrategy()\nresult_pdf = strategy.convert(diameters, PMF_data, inverse=False)\n# result_pdf is now in PDF format\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#signature_6","title":"Signature","text":"<pre><code>class PMFtoPDFConversionStrategy(ConversionStrategy): ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#see-also_2","title":"See also","text":"<ul> <li>ConversionStrategy</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#pmftopdfconversionstrategyconvert","title":"PMFtoPDFConversionStrategy().convert","text":"<p>Show source in convert_size_distribution.py:164</p> <p>Perform the conversion between PMF and PDF formats.</p>"},{"location":"API/particula/util/converting/convert_size_distribution/#arguments_3","title":"Arguments","text":"<ul> <li>diameters : Array of particle diameters.</li> <li>concentration : Distribution data in PMF or PDF format.</li> <li>inverse : If True, convert from PDF to PMF; otherwise from PMF     to PDF.</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#returns_3","title":"Returns","text":"<ul> <li>np.ndarray of the distribution in the target format.</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#signature_7","title":"Signature","text":"<pre><code>def convert(\n    self, diameters: np.ndarray, concentration: np.ndarray, inverse: bool = False\n) -&gt; np.ndarray: ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#samescaleconversionstrategy","title":"SameScaleConversionStrategy","text":"<p>Show source in convert_size_distribution.py:82</p> <p>Conversion strategy that returns the input concentration unchanged.</p> <p>No conversion is performed because the input and output scales are the same.</p>"},{"location":"API/particula/util/converting/convert_size_distribution/#examples_4","title":"Examples","text":"Example Usage<pre><code>strategy = SameScaleConversionStrategy()\nresult = strategy.convert(diameters, concentration)\n# result is identical to concentration\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#signature_8","title":"Signature","text":"<pre><code>class SameScaleConversionStrategy(ConversionStrategy): ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#see-also_3","title":"See also","text":"<ul> <li>ConversionStrategy</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#samescaleconversionstrategyconvert","title":"SameScaleConversionStrategy().convert","text":"<p>Show source in convert_size_distribution.py:97</p> <p>Return the concentration unchanged, since no conversion is needed.</p>"},{"location":"API/particula/util/converting/convert_size_distribution/#arguments_4","title":"Arguments","text":"<ul> <li>diameters : Array of particle diameters (unused).</li> <li>concentration : The original distribution data.</li> <li>inverse : Flag indicating direction (unused).</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#returns_4","title":"Returns","text":"<ul> <li>np.ndarray identical to the input concentration.</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#signature_9","title":"Signature","text":"<pre><code>def convert(\n    self, diameters: np.ndarray, concentration: np.ndarray, inverse: bool = False\n) -&gt; np.ndarray: ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#sizerconverter","title":"SizerConverter","text":"<p>Show source in convert_size_distribution.py:235</p> <p>A converter that composes a ConversionStrategy to transform particle size distribution data between formats. [might not be needed or used, -kyle]</p>"},{"location":"API/particula/util/converting/convert_size_distribution/#examples_5","title":"Examples","text":"Example Usage<pre><code>diameters = [1e-7, 1e-6, 1e-5]\nconcentration = [1e6, 1e5, 1e4]\n\nstrategy = DNdlogDPtoPMFConversionStrategy()\nconverter = SizerConverter(strategy)\nnew_conc = converter.convert(diameters, concentration)\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#signature_10","title":"Signature","text":"<pre><code>class SizerConverter:\n    def __init__(self, strategy: ConversionStrategy): ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#see-also_4","title":"See also","text":"<ul> <li>ConversionStrategy</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#sizerconverterconvert","title":"SizerConverter().convert","text":"<p>Show source in convert_size_distribution.py:260</p> <p>Convert the particle size distribution data using the assigned strategy.</p>"},{"location":"API/particula/util/converting/convert_size_distribution/#arguments_5","title":"Arguments","text":"<ul> <li>diameters : Array of particle diameters.</li> <li>concentration : Distribution data.</li> <li>inverse : If True, reverse the conversion direction     (if supported).</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#returns_5","title":"Returns","text":"<ul> <li>np.ndarray of the converted distribution.</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#signature_11","title":"Signature","text":"<pre><code>def convert(\n    self, diameters: np.ndarray, concentration: np.ndarray, inverse: bool = False\n) -&gt; np.ndarray: ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#get_conversion_strategy","title":"get_conversion_strategy","text":"<p>Show source in convert_size_distribution.py:282</p> <p>Factory function to obtain a conversion strategy based on the input and output scales.</p>"},{"location":"API/particula/util/converting/convert_size_distribution/#arguments_6","title":"Arguments","text":"<ul> <li>input_scale : Scale of the input distribution, e.g.     'dn/dlogdp' or 'pmf'.</li> <li>output_scale : Desired scale of the output distribution, e.g.     'pmf' or 'pdf'.</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#returns_6","title":"Returns","text":"<ul> <li>A ConversionStrategy object supporting the requested conversion.</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#raises_1","title":"Raises","text":"<ul> <li>ValueError : If scales are invalid or unsupported.</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#examples_6","title":"Examples","text":"Example Usage<pre><code>strategy = get_conversion_strategy('dn/dlogdp', 'pdf')\nconverter = SizerConverter(strategy)\nconverted_data = converter.convert(diameters, concentration)\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#signature_12","title":"Signature","text":"<pre><code>def get_conversion_strategy(\n    input_scale: str, output_scale: str\n) -&gt; ConversionStrategy: ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#see-also_5","title":"See also","text":"<ul> <li>ConversionStrategy</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#get_distribution_in_dn","title":"get_distribution_in_dn","text":"<p>Show source in convert_size_distribution.py:344</p> <p>Convert the sizer data between dn/dlogdp and d_num formats.</p> <p>If inverse=False, this function applies: - d_num = dn_dlogdp \u00d7 (log10(upper / lower))     - The bin width is determined by upper and lower diameter limits,       with log10 scaling.</p> <p>If inverse=True, it reverts: - dn/dlogdp = d_num / (log10(upper / lower))</p>"},{"location":"API/particula/util/converting/convert_size_distribution/#arguments_7","title":"Arguments","text":"<ul> <li>diameter : Array of particle diameters.</li> <li>dn_dlogdp : Array representing either dn/dlogdp or d_num.</li> <li>inverse : If True, converts from d_num to dn/dlogdp; otherwise the     opposite.</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#returns_7","title":"Returns","text":"<ul> <li>A np.ndarray of the converted distribution.</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#examples_7","title":"Examples","text":"<pre><code>import numpy as np\nfrom particula.util.size_distribution_convert import convert_sizer_dn\n\ndiam = np.array([1e-7, 2e-7, 4e-7])\ndn_logdp = np.array([1e6, 1e5, 1e4])\nresult = convert_sizer_dn(diam, dn_logdp, inverse=False)\nprint(result)\n# Output: d_num format for each diameter bin\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#references","title":"References","text":"<ul> <li>\"dN/dlogD_p and dN/dD_p,\" TSI Application Note PR-001, 2010.     link</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#signature_13","title":"Signature","text":"<pre><code>def get_distribution_in_dn(\n    diameter: np.ndarray, dn_dlogdp: np.ndarray, inverse: bool = False\n) -&gt; np.ndarray: ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#get_pdf_distribution_in_pmf","title":"get_pdf_distribution_in_pmf","text":"<p>Show source in convert_size_distribution.py:406</p> <p>Convert the distribution data between a probability density function (PDF) and a probability mass spectrum (PMF).</p> <p>The conversion uses: - y_pdf = y_PMF / \u0394x - y_PMF = y_pdf * \u0394x   - \u0394x is the bin width, determined by consecutive differences in x_array.</p>"},{"location":"API/particula/util/converting/convert_size_distribution/#arguments_8","title":"Arguments","text":"<ul> <li>x_array : An array of diameters/radii for the distribution bins.</li> <li>distribution : The original distribution data (PMF or PDF).</li> <li>to_pdf : If True, convert from PMF to PDF; if False, from PDF to PMF.</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#returns_8","title":"Returns","text":"<ul> <li>A np.ndarray of the converted distribution data.</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#examples_8","title":"Examples","text":"<pre><code>import numpy as np\nimport particula as par\nx_vals = np.array([1.0, 2.0, 3.0])\nPMF = np.array([10.0, 5.0, 2.5])\npdf = par.get_pdf_distribution_in_pmf(x_vals, PMF, to_pdf=True)\nprint(pdf)\n# Output: [10.  5.  2.5] / [1.0, 1.0, ...] = ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_size_distribution/#references_1","title":"References","text":"<ul> <li>Detailed bin width discussion in: TSI Application Note   \"Aerosol Statistics and Densities.\"</li> </ul>"},{"location":"API/particula/util/converting/convert_size_distribution/#signature_14","title":"Signature","text":"<pre><code>def get_pdf_distribution_in_pmf(\n    x_array: np.ndarray, distribution: np.ndarray, to_pdf: bool = True\n) -&gt; np.ndarray: ...\n</code></pre>"},{"location":"API/particula/util/converting/convert_units/","title":"Convert Units","text":"<p>Particula Index / Particula / Util / Converting / Convert Units</p> <p>Auto-generated documentation for particula.util.converting.convert_units module.</p>"},{"location":"API/particula/util/converting/convert_units/#get_unit_conversion","title":"get_unit_conversion","text":"<p>Show source in convert_units.py:29</p> <p>Convert a numeric value or unit expression from one unit to another using Pint.</p> <p>For simple multiplicative units, if no value is provided, this function returns the conversion factor. For units with an offset (e.g., temperatures), or if a value is supplied, a fully converted numeric value is returned instead.</p>"},{"location":"API/particula/util/converting/convert_units/#arguments","title":"Arguments","text":"<ul> <li>old : A string representing the current unit (e.g., \"m\", \"degC\").</li> <li>new : A string representing the target unit.</li> <li>value : An optional numeric value to convert. If omitted, returns the     conversion factor between old and new.</li> </ul>"},{"location":"API/particula/util/converting/convert_units/#raises","title":"Raises","text":"<ul> <li>ImportError : If Pint is not installed. Install it using:     <code>pip install pint</code>.</li> </ul>"},{"location":"API/particula/util/converting/convert_units/#returns","title":"Returns","text":"<ul> <li>A float representing either the conversion factor or the fully   converted value in the target unit.</li> </ul>"},{"location":"API/particula/util/converting/convert_units/#examples","title":"Examples","text":"Example Multi-Unit Conversion<pre><code>import particula as par\nfactor = par.get_unit_conversion(\"ug/m^3\", \"kg/m^3\")\nprint(factor)\n# 1e-9\n</code></pre> Example Temperature Conversion<pre><code>import particula as par\ndegF = par.get_unit_conversion(\"degC\", \"degF\", value=25)\nprint(degF)\n# ~77.0\n</code></pre>"},{"location":"API/particula/util/converting/convert_units/#references","title":"References","text":"<ul> <li>Pint documentation: https://pint.readthedocs.io/</li> </ul>"},{"location":"API/particula/util/converting/convert_units/#signature","title":"Signature","text":"<pre><code>def get_unit_conversion(old: str, new: str, value: Optional[float] = None) -&gt; float: ...\n</code></pre>"},{"location":"API/particula/util/lf2013_coagulation/","title":"Lf2013 Coagulation","text":"<p>Particula Index / Particula / Util / Lf2013 Coagulation</p> <p>Auto-generated documentation for particula.util.lf2013_coagulation module.</p>"},{"location":"API/particula/util/lf2013_coagulation/#modules","title":"Modules","text":"<ul> <li>Src Lf2013 Coagulation</li> </ul>"},{"location":"API/particula/util/lf2013_coagulation/src_lf2013_coagulation/","title":"Src Lf2013 Coagulation","text":"<p>Particula Index / Particula / Util / Lf2013 Coagulation / Src Lf2013 Coagulation</p> <p>Auto-generated documentation for particula.util.lf2013_coagulation.src_lf2013_coagulation module.</p>"},{"location":"API/particula/util/lf2013_coagulation/src_lf2013_coagulation/#lf2013_coag_full","title":"lf2013_coag_full","text":"<p>Show source in src_lf2013_coagulation.py:13</p> <p>calculate ion--particle coagulation according to lf2013</p>"},{"location":"API/particula/util/lf2013_coagulation/src_lf2013_coagulation/#signature","title":"Signature","text":"<pre><code>def lf2013_coag_full(\n    ion_type=\"air\",\n    particle_type=\"conductive\",\n    temperature_val=298.15,\n    pressure_val=101325,\n    charge_vals=None,\n    radius_vals=None,\n): ...\n</code></pre>"},{"location":"Discussions/","title":"Discussions","text":""},{"location":"Discussions/#technical-topics","title":"Technical Topics","text":"<ul> <li>Condensation Equations</li> <li>Dynamic Viscosity</li> <li>Mean Free Path</li> </ul>"},{"location":"Discussions/#coagulation","title":"Coagulation","text":"<ul> <li>Cloud Droplet Coagulation Kernel Ayala 2008</li> <li>Ion-Particle Coagulation</li> </ul>"},{"location":"Discussions/#particula-concepts","title":"Particula Concepts","text":"<ul> <li>Maps</li> </ul>"},{"location":"Discussions/Particula_Concepts/Particle_maps/","title":"Relational Maps","text":""},{"location":"Discussions/Particula_Concepts/Particle_maps/#particles","title":"Particles","text":"<pre><code>mindmap\n  root((*particula.next.particles*))\n    distribution\n      strategies\n        MassBasedMovingBin\n        RadiiBasedMovingBin\n        SpeciatedMassMovingBin\n        ParticleResolvedSpeciatedMass\n      builders\n      DistributionFactory\n    activity\n      strategies\n        ActivityIdealMass\n        ActivityIdealMolar\n        ActivityKappaParameter\n      builders\n      ActivityFactory\n    representation\n      ParticleRepresentation\n      builders\n      ParticleRepresentationFactory\n    surface\n      strategies\n        SurfaceStrategyVolume\n        SurfaceStrategyMass\n        SurfaceStrategyMolar\n      builders\n      SurfaceFactory\n    properties</code></pre>"},{"location":"Discussions/Technical/Condensation_Equations/","title":"Condensation Discussion","text":"<p>Isothermal and non-isothermal condensation processes are fundamental in aerosol dynamics. Condensation involves the transfer of gas-phase species to the particle phase, which can be reversible when the species evaporates back into the gas phase. This process is pivotal in the formation of cloud droplets and the growth of atmospheric particles, influencing climate and air quality.</p>"},{"location":"Discussions/Technical/Condensation_Equations/#condensation-isothermal","title":"Condensation Isothermal","text":"<p>In the isothermal case, we consider condensation processes where the temperature remains constant, and the latent heat of vaporization is neglected. This approximation is valid when the heat released or absorbed during condensation or evaporation is insufficient to cause significant temperature changes.</p> <p>This follows Chapter 2 (EQ 2.41) by Topping, D., &amp; Bane, M. (2022). Introduction to Aerosol Modelling (D. Topping &amp; M. Bane, Eds.). Wiley. https://doi.org/10.1002/9781119625728. Also Chapter 12 and 13 (EQ 13.3) of Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric Chemistry and Physics: From Air Pollution to Climate Change (3<sup>rd</sup> ed.). Wiley.</p> <p>The isothermal condensation or evaporation process is defined by the following equation:</p> <p>Equation 1: Rate of Mass Change</p> <p>dmi/dt = N \u00d7 k_cond \u00d7 (p\u1d62, gas \u2212 p\u1d62, particle surface) \u00d7 (molar mass\u1d62 / (R \u00d7 T))</p> <p>Where:</p> <ul> <li>dmi/dt: Rate of change of mass of species i in the particle phase.</li> <li>N: Number of particles.</li> <li>k_cond: Per-particle first-order condensation coefficient.</li> <li>p\u1d62, gas: Partial pressure of species i in the gas phase.</li> <li>p\u1d62, particle surface: Partial pressure of species i at the particle surface, accounting for curvature and activity effects.</li> <li>molar mass\u1d62: Molar mass of species i.</li> <li>R: Ideal gas constant.</li> <li>T: Temperature.</li> </ul> <p>Description:</p> <p>This equation quantifies the net mass flux of species i from the gas phase to the particle phase (or vice versa) due to condensation or evaporation. The driving force is the difference in partial pressures (p\u1d62, gas \u2212 p\u1d62, particle surface), and it's scaled by the molar mass and thermodynamic constants to yield a mass rate.</p>"},{"location":"Discussions/Technical/Condensation_Equations/#condensation-with-latent-heat","title":"Condensation with Latent Heat","text":"<p>When condensation results in significant heat release or absorption, the latent heat of vaporization must be considered. This scenario is critical in cloud droplet formation, where the heat effects can influence the condensation rate and local temperature.</p> <p>Derivation from Topping, D., &amp; Bane, M. (2022) equation 2.36.</p> <p>Equation 5: Rate of Mass Change with Latent Heat</p> <p>dm/dt = [N \u00d7 4 \u00d7 \u03c0 \u00d7 radius_wet \u00d7 D\u1d62 \u00d7 (p\u1d62, gas \u2212 p\u1d62, particle surface)] / { [ (D\u1d62 \u00d7 L\u1d62 \u00d7 p\u1d62) / (\u03ba \u00d7 T) ] \u00d7 [ (L\u1d62 / (R \u00d7 T)) \u2212 1 ] + R\u1d62 \u00d7 T }</p> <p>Where:</p> <ul> <li>dm/dt: Rate of change of mass of the droplet.</li> <li>m: Mass of the droplet.</li> <li>radius_wet: Wet radius of the droplet.</li> <li>D\u1d62: Diffusion coefficient of species i.</li> <li>p\u1d62, gas: Partial pressure of species i in the gas phase.</li> <li>p\u1d62, particle surface: Partial pressure at the particle surface.</li> <li>L\u1d62: Latent heat of vaporization for species i.</li> <li>\u03ba: Thermal conductivity of air.</li> <li>T: Temperature.</li> <li>R\u1d62: Specific gas constant for species i (R / molar mass\u1d62).</li> </ul> <p>Description:</p> <p>This equation modifies the isothermal rate to include thermal effects due to latent heat. The denominator accounts for the additional resistance to mass transfer caused by the temperature gradient established from heat release or absorption during phase change.</p>"},{"location":"Discussions/Technical/Condensation_Equations/#additional-parameters","title":"Additional Parameters","text":""},{"location":"Discussions/Technical/Condensation_Equations/#first-order-condensation-coefficient","title":"First-Order Condensation Coefficient","text":"<p>Equation 2: Condensation Coefficient</p> <p>k_cond = 4 \u00d7 \u03c0 \u00d7 radius_particle \u00d7 D\u1d62 \u00d7 f(Kn, \u03b1\u1d62)</p> <p>Where:</p> <ul> <li>radius_particle: Radius of the particle.</li> <li>D\u1d62: Diffusion coefficient of species i in the gas phase.</li> <li>f(Kn, \u03b1\u1d62): Correction factor accounting for the transition between free-molecular and continuum regimes.</li> <li>Kn: Knudsen number.</li> <li>\u03b1\u1d62: Mass accommodation coefficient.</li> </ul> <p>Description:</p> <p>The condensation coefficient k_cond represents the flux of molecules to the particle surface per unit concentration difference. It combines geometric factors with diffusion dynamics and corrections for different flow regimes.</p>"},{"location":"Discussions/Technical/Condensation_Equations/#correction-factor-fkn-i","title":"Correction Factor f(Kn, \u03b1\u1d62)","text":"<p>Equation 3: Correction Factor</p> <p>f = [0.75 \u00d7 \u03b1\u1d62 \u00d7 (1 + Kn)] / [Kn\u00b2 + Kn + 0.283 \u00d7 \u03b1\u1d62 \u00d7 Kn + 0.75 \u00d7 \u03b1\u1d62]</p> <p>Where:</p> <ul> <li>\u03b1\u1d62: Mass accommodation coefficient for species i.</li> <li>Kn: Knudsen number.</li> </ul> <p>Knudsen Number:</p> <p>Equation 4: Knudsen Number</p> <p>Kn = \u03bb\u1d62 / radius_particle</p> <p>Where:</p> <ul> <li>\u03bb\u1d62: Mean free path of gas molecules for species i.</li> <li>radius_particle: Particle radius.</li> </ul> <p>Description:</p> <p>The correction factor f(Kn, \u03b1\u1d62) adjusts the condensation coefficient to account for the finite mean free path of gas molecules relative to the particle size. It ensures accurate depiction of mass transfer in both the free-molecular (high Kn) and continuum (low Kn) regimes.</p>"},{"location":"Discussions/Technical/Condensation_Equations/#partial-pressures","title":"Partial Pressures","text":"<p>Understanding the partial pressures in the gas phase and at the particle surface is essential for calculating the condensation rate.</p> <p>Gas Phase Partial Pressure:</p> <p>Equation 6: Gas Phase Partial Pressure</p> <p>p\u1d62, gas = conc\u1d62, gas \u00d7 (R \u00d7 T) / molar mass\u1d62</p> <p>Where:</p> <ul> <li>conc\u1d62, gas: Concentration of species i in the gas phase.</li> </ul> <p>Description:</p> <p>This equation relates the concentration of a gas-phase species to its partial pressure using the ideal gas law, adjusted for the molar mass of the species.</p> <p>Particle Surface Partial Pressure:</p> <p>Equation 7: Particle Surface Partial Pressure</p> <p>p\u1d62, particle surface = p\u1d62^pure \u00d7 \u03b3\u1d62 \u00d7 x\u1d62 \u00d7 k\u1d62, Kelvin</p> <p>Where:</p> <ul> <li>p\u1d62^pure: Saturation vapor pressure of pure species i (also denoted as p\u1d62^sat, p\u1d62^vap, or p\u1d62^0).</li> <li>\u03b3\u1d62: Activity coefficient of species i in the particle phase.</li> <li>x\u1d62: Mole fraction of species i in the particle phase.</li> <li>k\u1d62, Kelvin: Kelvin effect correction factor.</li> </ul> <p>Description:</p> <p>This equation adjusts the pure saturation vapor pressure to account for solution non-idealities (via \u03b3\u1d62 and x\u1d62) and curvature effects (via k\u1d62, Kelvin).</p>"},{"location":"Discussions/Technical/Condensation_Equations/#kelvin-effect-correction-factor","title":"Kelvin Effect Correction Factor","text":"<p>Equation 8: Kelvin Effect</p> <p>k\u1d62, Kelvin = exp( k\u1d62, Kelvin radius / radius_particle )</p> <p>Where:</p> <ul> <li>k\u1d62, Kelvin radius: Kelvin radius factor.</li> </ul> <p>Equation 9: Kelvin Radius Factor</p> <p>k\u1d62, Kelvin radius = [2 \u00d7 \u03c3_surface \u00d7 molar mass\u1d62] / [ R \u00d7 T \u00d7 density ]</p> <p>Where:</p> <ul> <li>\u03c3_surface: Surface tension of the particle.</li> <li>density: Density of the particle.</li> </ul> <p>Description:</p> <p>The Kelvin effect expresses how vapor pressure over a curved surface differs from that over a flat surface. Small particles exhibit increased vapor pressure due to curvature, influencing condensation and evaporation rates.</p>"},{"location":"Discussions/Technical/Condensation_Equations/#variable-descriptions","title":"Variable Descriptions","text":"<p>Understanding the Parameters:</p> <ol> <li> <p>Mass Accommodation Coefficient (\u03b1\u1d62):</p> </li> <li> <p>Represents the probability that a molecule colliding with the particle surface will stick and be incorporated into the particle.</p> </li> <li>Values range from 0 (no sticking) to 1 (all molecules stick upon collision).</li> <li> <p>Influenced by surface properties, temperature, and species-specific interactions.</p> </li> <li> <p>Diffusion Coefficient (D\u1d62):</p> </li> <li> <p>Indicates how quickly species i diffuses through the gas phase.</p> </li> <li>Dependent on temperature, pressure, and molecular characteristics.</li> <li> <p>Higher D\u1d62 leads to faster mass transfer to the particle surface.</p> </li> <li> <p>Mean Free Path (\u03bb\u1d62):</p> </li> <li> <p>Average distance a gas molecule travels before colliding with another molecule.</p> </li> <li>Inversely proportional to pressure; decreases as pressure increases.</li> <li> <p>Important for calculating the Knudsen number and determining the appropriate flow regime.</p> </li> <li> <p>Knudsen Number (Kn):</p> </li> <li> <p>Dimensionless number that characterizes the flow regime.</p> <ul> <li>Kn &lt;&lt; 1: Continuum regime; diffusion dominates.</li> <li>Kn &gt;&gt; 1: Free-molecular regime; ballistic motion dominates.</li> </ul> </li> <li> <p>Essential for selecting the correct correction factor f(Kn, \u03b1\u1d62).</p> </li> <li> <p>Latent Heat of Vaporization (L\u1d62):</p> </li> <li> <p>Energy required to convert species i from liquid to vapor without temperature change.</p> </li> <li> <p>Affects the heat balance during condensation and influences the condensation rate when significant.</p> </li> <li> <p>Thermal Conductivity (\u03ba):</p> </li> <li> <p>Measures the ability of air to conduct heat.</p> </li> <li> <p>Determines how quickly heat generated or absorbed at the particle surface is dissipated.</p> </li> <li> <p>Activity Coefficient (\u03b3\u1d62):</p> </li> <li> <p>Accounts for non-ideal interactions between molecules in the particle phase.</p> </li> <li> <p>Deviations from ideality can significantly impact the equilibrium vapor pressure.</p> </li> <li> <p>Surface Tension (\u03c3_surface):</p> </li> <li> <p>Affects the Kelvin effect.</p> </li> <li>Dependent on particle composition and temperature.</li> <li>Influential for small particles where curvature effects are pronounced.</li> </ol> <p>Applications and Implications:</p> <ul> <li> <p>Aerosol Growth: These equations are vital for predicting how aerosols grow through condensation, impacting visibility, climate forcing, and human health.</p> </li> <li> <p>Cloud Formation: Understanding condensation with latent heat is essential for cloud microphysics, influencing cloud droplet activation and lifetime.</p> </li> <li> <p>Air Quality Modeling: Accurately modeling gas-particle partitioning helps in predicting pollutant behavior and secondary aerosol formation.</p> </li> </ul> <p>Assumptions and Limitations:</p> <ul> <li> <p>Isothermal Assumption: In the isothermal equation, neglecting latent heat is valid only when temperature changes are negligible. For processes involving significant heat exchange, the non-isothermal equation should be used.</p> </li> <li> <p>Spherical Particles: The equations assume particles are spherical, which may not hold true for all aerosols (e.g., fractal soot particles).</p> </li> <li> <p>Uniform Composition: Assumes homogeneous particle composition. In reality, phase separation or gradients may exist within particles.</p> </li> </ul> <p>Further Considerations:</p> <ul> <li> <p>Multicomponent Systems: In mixtures, interactions between different species can complicate calculations. Mutual diffusion coefficients and interactive effects need to be considered.</p> </li> <li> <p>Dynamic Conditions: Environmental factors like fluctuating temperature and pressure can affect condensation rates. Real-world applications may require time-dependent modeling.</p> </li> <li> <p>Parameter Estimation: Accurate values for parameters like D\u1d62, \u03b1\u1d62, and \u03b3\u1d62 are necessary for precise predictions but can be challenging to obtain, especially for complex organic species.</p> </li> </ul>"},{"location":"Discussions/Technical/Condensation_Equations/#conclusion","title":"Conclusion","text":"<p>By reviewing the equations and expanding on the descriptions, we enhance the understanding of condensation processes in aerosol dynamics. The interplay between mass transfer, thermodynamics, and kinetics is critical for accurately modeling aerosol behavior. Recognizing the importance of each parameter and the assumptions inherent in these equations allows for more informed application and interpretation in research and environmental modeling.</p>"},{"location":"Discussions/Technical/Condensation_Equations/#references","title":"References","text":"<ol> <li> <p>Topping, D., &amp; Bane, M. (2022). Introduction to Aerosol Modelling. Wiley. DOI: 10.1002/9781119625728</p> </li> <li> <p>Seinfeld, J. H., &amp; Pandis, S. N. (2016). Atmospheric Chemistry and Physics: From Air Pollution to Climate Change (3<sup>rd</sup> ed.). Wiley.</p> </li> </ol>"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/","title":"Droplet Coagulation Kernel Ayala 2008","text":"<p>Here, we discuss the implementation of the geometric collision kernel for cloud droplets as described in Part II by Ayala et al. (2008). Part I provides a detailed explanation of the direct numerical simulations. Where as Part II is the parameterization of the collision kernel for cloud droplets in turbulent flows. The implementation involves calculating the geometric collision rate of sedimenting droplets based on the turbulent flow properties and droplet characteristics.</p> <p>Ayala, O., Rosa, B., Wang, L. P., &amp; Grabowski, W. W. (2008). Effects of turbulence on the geometric collision rate of sedimenting droplets. Part 1. Results from direct numerical simulation. New Journal of Physics, 10. https://doi.org/10.1088/1367-2630/10/7/075015</p> <p>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on the geometric collision rate of sedimenting droplets. Part 2. Theory and parameterization. New Journal of Physics, 10. https://doi.org/10.1088/1367-2630/10/7/075016</p>"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#gamma_12-kernel-description","title":"\\(\\Gamma_{12}\\): Kernel Description","text":"<p>In the parameterization below, the input parameters are:</p> <ul> <li>The radii \\(a_1\\) and \\(a_2\\) of the droplets</li> <li>The water density \\(\\rho_w\\)</li> <li>Turbulent air flow requires:<ul> <li>The density \\(\\rho\\)</li> <li>The viscosity \\(\\nu\\)</li> <li>The turbulence dissipation rate \\(\\varepsilon\\)</li> <li>The Taylor-microscale Reynolds number \\(R_\\lambda\\)</li> </ul> </li> <li>The gravitational acceleration \\(|g|\\)</li> </ul> <p>The output is the collision kernel \\(\\Gamma_{12}\\)</p> <p>This is valid under the conditions when \\(a_k &lt;&lt; \\eta\\), \\(\\rho_w &gt;&gt; \\rho\\), and \\(Sv &gt; 1\\) , the geometric collision kernel can be calculated as follows:</p> \\[ \\Gamma_{12} = 2\\pi R^2 \\langle |w_r| \\rangle g_{12} \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#langle-w_r-rangle-radial-relative-velocity","title":"\\(\\langle |w_r| \\rangle\\): Radial Relative Velocity","text":"<p>There are two options for calculating the radial relative velocity:</p>"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#langle-w_r-rangle-dodin-2002","title":"\\(\\langle |w_r| \\rangle\\) Dodin 2002:","text":"<p>Using the spherical formulation, Dodin and Elperin (2002), decomposed the relative velocity into turbulent and gravity-induced components and assumed that the turbulent component is normally distributed.</p> <p>Dodin Z and Elperin T 2002 Phys. Fluids 14 2921\u201324</p> \\[ \\langle |w_r| \\rangle = \\sqrt{\\frac{2}{\\pi}} \\sigma f(b) \\] <p>where:</p> \\[ f(b) = \\frac{1}{2}\\sqrt{\\pi}\\left(b + \\frac{0.5}{b}\\right)\\text{erf}(b) + \\frac{1}{2}\\exp(-b^2) \\] \\[ b = \\frac{g|\\tau_{p1} - \\tau_{p2}|}{\\sqrt{2} \\sigma} \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#langle-w_r-rangle-ayala-2008","title":"\\(\\langle |w_r| \\rangle\\) Ayala 2008:","text":"<p>Here both particle inertia and gravitational effects are accounted for in the relative velocity calculation. Derived by Ayala et al. (2008) based on DNS results.</p> \\[ \\langle |w_r| \\rangle = \\sqrt{\\frac{2}{\\pi}} \\left(\\sigma^2 + \\pi/8 (\\tau_{p1} + \\tau_{p2})^2 |g|^2\\right)^{1/2} \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#sigma2-direct-numerical-simulation-fit","title":"\\(\\sigma^2\\) Direct Numerical Simulation Fit","text":"\\[ \\sigma^2 = \\langle (v'^{(2)})^2 \\rangle + \\langle (v'^{(1)})^2 \\rangle - 2 \\langle v'^{(1)} v'^{(2)} \\rangle \\] <p>The term \\(\\langle (v'^{(2)})^2 \\rangle\\) is the square of the RMS fluctuation velocity of droplet 2, and \\(\\langle v'^{(1)} v'^{(2)} \\rangle\\) is the cross-correlation of the fluctuating velocities of droplets 1 and 2.</p> <p>The square of the RMS fluctuation velocity is given by, for k-th droplet:</p> \\[ \\left\\langle \\left(v'^{(k)}\\right)^2 \\right\\rangle = \\frac{u'^2}{\\tau_{pk}} \\left[b_1 d_1 \\Psi(c_1, e_1) - b_1 d_2 \\Psi(c_1, e_2) - b_2 d_1 \\Psi(c_2, e_1) + b_2 d_2 \\Psi(c_2, e_2)\\right], \\] <p>Cross terms is defined as:</p> \\[ \\left\\langle v'^{(1)} v'^{(2)} \\right\\rangle = \\frac{u'^2 f_2(R)}{\\tau_{p1} \\tau_{p2}}\\\\ \\times \\left[b_1 d_1 \\Phi(c_1, e_1) - b_1 d_2 \\Phi(c_1, e_2) - b_2 d_1 \\Phi(c_2, e_1) + b_2 d_2 \\Phi(c_2, e_2)\\right]. \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#f_2r-longitudinal-velocity-correlation","title":"\\(f_2(R)\\) Longitudinal velocity correlation","text":"<p>This is the longitudinal two-point velocity correlation function, which is a function of the separation distance R between two points in the flow. The function evaluated at r = R is given by:</p> \\[ f_2(R) = \\frac{1}{2(1 - 2\\beta^2)^{1/2}}  \\Bigg\\{ \\left(1 + \\sqrt{1 - 2\\beta^2}\\right) \\\\ \\times \\exp\\left[-\\frac{2R}{(1 + \\sqrt{1 - 2\\beta^2})L_e}\\right] \\quad - \\left(1 - \\sqrt{1 - 2\\beta^2}\\right) \\\\ \\times \\exp\\left[-\\frac{2R}{(1 - \\sqrt{1 - 2\\beta^2})L_e}\\right] \\Bigg\\} \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#b_1-b_2-c_1-c_2-d_1-d_2-e_1-e_2-definitions","title":"\\(b_1, b_2, c_1, c_2, d_1, d_2, e_1, e_2\\): Definitions","text":"\\[ b_1 = \\frac{1 + \\sqrt{1 - 2z^2}}{2\\sqrt{1 - 2z^2}} \\] \\[ b_2 = \\frac{1 - \\sqrt{1 - 2z^2}}{2\\sqrt{1 - 2z^2}} \\] \\[ c_1 = \\frac{(1 + \\sqrt{1 - 2z^2})T_L}{2} \\] \\[ c_2 = \\frac{(1 - \\sqrt{1 - 2z^2})T_L}{2} \\] \\[ d_1 = \\frac{1 + \\sqrt{1 - 2\\beta^2}}{2\\sqrt{1 - 2\\beta^2}} \\] \\[ d_2 = \\frac{1 - \\sqrt{1 - 2\\beta^2}}{2\\sqrt{1 - 2\\beta^2}} \\] \\[ e_1 = \\frac{(1 + \\sqrt{1 - 2\\beta^2})L_e}{2} \\] \\[ e_2 = \\frac{(1 - \\sqrt{1 - 2\\beta^2})L_e}{2} \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#z-and-beta-definitions","title":"\\(z\\) and \\(\\beta\\): Definitions","text":"\\[ z = \\frac{\\tau_T}{L_e} \\] \\[ \\beta = \\frac{\\sqrt{2} \\lambda}{L_e} \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#phialpha-phi-definitions","title":"\\(\\Phi(\\alpha, \\phi)\\): Definitions","text":"<p>For the case when taking \\(v_{p1}&gt;v_{p2}\\).</p> \\[ \\Phi(\\alpha, \\phi) = \\Bigg\\{ \\frac{1}{\\left(v_{p2}/\\phi - (1/\\tau_{p2}) - (1/\\alpha)\\right)}  - \\frac{1}{\\left(v_{p1}/\\phi + (1/\\tau_{p1}) + (1/\\alpha)\\right)} \\Bigg\\} \\\\ \\quad \\times \\frac{v_{p1} - v_{p2}}{2\\phi \\left((v_{p1} - v_{p2}/\\phi) + (1/\\tau_{p1}) + (1/\\tau_{p2})\\right)^2}  + \\Bigg\\{ \\frac{4}{\\left(v_{p2}/\\phi\\right)^2 - \\left((1/\\tau_{p2}) + (1/\\alpha)\\right)^2} \\\\ \\quad - \\frac{1}{\\left(v_{p2}/\\phi + (1/\\tau_{p2}) + (1/\\alpha)\\right)^2}  - \\frac{1}{\\left(v_{p2}/\\phi - (1/\\tau_{p2}) - (1/\\alpha)\\right)^2} \\Bigg\\} \\\\ \\quad \\times \\frac{v_{p2}}{2\\phi \\left((1/\\tau_{p1}) - (1/\\alpha) + ((1/\\tau_{p2}) + (1/\\alpha))(v_{p1}/v_{p2})\\right)} \\\\ \\quad + \\Bigg\\{ \\frac{2\\phi}{\\left((v_{p1}/\\phi) + (1/\\tau_{p1}) + (1/\\alpha)\\right)}  - \\frac{2\\phi}{\\left((v_{p2}/\\phi) - (1/\\tau_{p2}) - (1/\\alpha)\\right)} \\\\ \\quad - \\frac{v_{p1}}{\\left((v_{p1}/\\phi) + (1/\\tau_{p1}) + (1/\\alpha)\\right)^2}  + \\frac{v_{p2}}{\\left((v_{p2}/\\phi) - (1/\\tau_{p2}) - (1/\\alpha)\\right)^2} \\Bigg\\} \\\\ \\quad \\times \\frac{1}{2\\phi \\left((v_{p1} - v_{p2}/\\phi) + (1/\\tau_{p1}) + (1/\\tau_{p2})\\right)} \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#psialpha-phi-definitions","title":"\\(\\Psi(\\alpha, \\phi)\\): Definitions","text":"<p>For the case when taking for the k-th droplet:</p> \\[ \\Psi(\\alpha, \\phi) = \\frac{1}{(1/\\tau_{pk}) + (1/\\alpha) + (v_{pk}/\\phi)}  - \\frac{v_{pk}}{2\\phi \\left((1/\\tau_{pk}) + (1/\\alpha) + (v_{pk}/\\phi)\\right)^2} \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#g_12-radial-distribution-function","title":"\\(g_{12}\\): Radial Distribution Function","text":"<p>The radial distribution function is given by:</p> \\[ g_{12} = \\left(\\frac{\\eta^2 + r_c^2}{R^2 + r_c^2}\\right)^{C_1/2} \\] <p>Where \\(C_1\\) and \\(r_c\\) are derived based on droplet and turbulence properties.</p>"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#c_1-calculation","title":"\\(C_1\\): Calculation","text":"\\[ C_1 = \\frac{y(St)}{\\left(|\\mathbf{g}| / (v_k / \\tau_k)\\right)^{f_3(R_\\lambda)}} \\] \\[ y(St) = -0.1988 St^4 + 1.5275 St^3 - 4.2942 St^2 + 5.3406 St \\] \\[ f_3(R_\\lambda) = 0.1886 \\exp\\left(\\frac{20.306}{R_\\lambda}\\right) \\] <p>Where:</p> \\[ St = max(St_1, St_2) \\] <p>Since the fitting for \\(y(St)\\) was done for a limited range of St in DNS, it should be set to zero for large \\(St\\) when the function \\(y(St)\\) becomes negative.</p>"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#r_c-expression","title":"\\(r_c\\): Expression","text":"\\[ \\left(\\frac{r_c}{\\eta}\\right)^2 = |St_2 - St_1| F(a_o, R_\\lambda) \\] <p>solving for \\(r_c\\):</p> \\[ r_c = \\eta \\sqrt{|St_2 - St_1| F(a_o, R_\\lambda)} \\] <p>where:</p> \\[ a_{Og} = a_o + \\frac{\\pi}{8} \\left(\\frac{|\\mathbf{g}|}{v_k / \\tau_k}\\right)^2 \\] \\[ F(a_{Og}, R_\\lambda) = 20.115 \\left(\\frac{a_{Og}}{R_\\lambda}\\right)^{1/2} \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#derived-parameters","title":"Derived Parameters","text":""},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#tau_k-kolmogorov-time","title":"\\(\\tau_k\\): Kolmogorov Time","text":"<p>The smallest timescale in turbulence where viscous forces dominate:</p> \\[ \\tau_k = \\left(\\frac{\\nu}{\\varepsilon}\\right)^{1/2} \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#eta-kolmogorov-length-scale","title":"\\(\\eta\\): Kolmogorov Length Scale","text":"<p>The smallest scale in turbulence:</p> \\[ \\eta = \\left(\\frac{\\nu^3}{\\varepsilon}\\right)^{1/4} \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#v_k-kolmogorov-velocity-scale","title":"\\(v_k\\): Kolmogorov Velocity Scale","text":"<p>A velocity scale related to the smallest turbulent eddies:</p> \\[ v_k = (\\nu \\varepsilon)^{1/4} \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#u-fluid-rms-fluctuation-velocity","title":"\\(u'\\): Fluid RMS Fluctuation Velocity","text":"<p>Quantifies turbulence intensity:</p> \\[ u' = \\frac{R_\\lambda^{1/2} v_k}{15^{1/4}}  \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#t_l-lagrangian-integral-scale","title":"\\(T_L\\): Lagrangian Integral Scale","text":"<p>Describes large-scale turbulence:</p> \\[ T_L = \\frac{u'^2}{\\epsilon} \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#l_e-eulerian-integral-scale","title":"\\(L_e\\): Eulerian Integral Scale","text":"<p>Length scale for large eddies:</p> \\[ L_e = 0.5 \\frac{u'^3}{\\epsilon} \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#a_o-coefficient","title":"\\(a_o\\): Coefficient","text":"<p>A Reynolds-dependent parameter:</p> \\[ a_o = \\frac{11+7 R_\\lambda}{205 + R_\\lambda} \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#tau_t-lagrangian-taylor-microscale-time","title":"\\(\\tau_T\\): Lagrangian Taylor Microscale Time","text":"<p>Time correlation decay for turbulent trajectories:</p> \\[ \\tau_T = \\tau_k \\left(\\frac{2 R_\\lambda}{15^{1/2} a_o}\\right)^{1/2} \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#lambda-taylor-microscale","title":"\\(\\lambda\\): Taylor Microscale","text":"<p>Length scale linked to fluid flow:</p> \\[ \\lambda = u' \\left(\\frac{15 \\nu^2}{\\epsilon}\\right)^{1/2} \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#tau_p-droplet-inertia-time","title":"\\(\\tau_p\\): Droplet Inertia Time","text":"<p>Adjusts droplet inertia:</p> \\[ \\tau_p = \\frac{2}{9} \\frac{\\rho_w}{\\rho} \\frac{a^2}{\\nu f(Re_p)} \\] <p>with:</p> \\[ f(Re_p) = 1 + 0.15 Re_p^{0.687} \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#v_p-droplet-settling-velocity","title":"\\(v_p\\): Droplet Settling Velocity","text":"<p>The settling velocity under gravity:</p> \\[ v_p = \\tau_p |g| \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#re_p-particle-reynolds-number","title":"\\(Re_p\\): Particle Reynolds Number","text":"<p>Characterizes droplet flow:</p> \\[ Re_p = \\frac{2 a v_p}{\\nu} \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#st-stokes-number","title":"\\(St\\): Stokes Number","text":"<p>Non-dimensional inertia parameter:</p> \\[ St = \\frac{\\tau_p}{\\tau_k} \\]"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#variable-descriptions","title":"Variable Descriptions","text":"<p>Here are the variables, their definitions.</p>"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#droplet-particle-properties","title":"Droplet (Particle) Properties","text":"<ul> <li> <p>\\(a_1, a_2\\): Radii of the droplets. These determine size-dependent properties such as droplet inertia and terminal velocity. </p> </li> <li> <p>\\(\\rho_w\\): Density of water. The mass per unit volume of water, typically \\(1000 \\, \\text{kg/m}^3\\). It is essential for calculating droplet inertia and terminal velocity.</p> </li> <li> <p>\\(\\rho\\): Density of air. The mass per unit volume of air, affecting drag and settling velocity. Typical sea-level values are around \\(1.225 \\, \\text{kg/m}^3\\).</p> </li> <li> <p>\\(\\nu\\): Kinematic viscosity. The ratio of dynamic viscosity to fluid density, quantifying resistance to flow.</p> </li> <li> <p>\\(\\tau_p\\): Droplet inertial response time. The characteristic time it takes for a droplet to adjust to changes in the surrounding airflow, critical for droplet motion analysis.</p> </li> <li> <p>\\(v'^{(i)}_p\\): Particle RMS fluctuation velocity. The root mean square of the fluctuating velocity component, representing variability in turbulent flow.</p> </li> <li> <p>\\(f_u\\): Particle response coefficient. Measures how particles respond to fluid velocity fluctuations, helping quantify their turbulent motion.</p> </li> <li> <p>\\(f(R)\\): Spatial correlation coefficient. Describes the correlation of fluid velocities at two points separated by a distance \\(R\\), influencing droplet interactions.</p> </li> <li> <p>\\(g_{12}\\): Radial distribution function (RDF). A measure of how particle pairs are spatially distributed due to turbulence and gravity.</p> </li> </ul>"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#turbulent-flow-properties","title":"Turbulent Flow Properties","text":"<ul> <li> <p>\\(u\\): Local air velocity. The instantaneous velocity of air at a given point. Turbulence causes \\(u\\) to vary in space and time.</p> </li> <li> <p>\\(\\varepsilon\\): Turbulence dissipation rate. The rate at which turbulent kinetic energy is converted into thermal energy per unit mass.</p> </li> <li> <p>\\(R_\\lambda\\): Reynolds number. A dimensionless number that characterizes the flow regime, depending on turbulence intensity and scale.</p> </li> <li> <p>\\(\\lambda_D\\): Longitudinal Taylor-type microscale. A characteristic length scale of fluid acceleration in turbulence, related to energy dissipation and viscosity.</p> </li> <li> <p>\\(T_L\\): Lagrangian integral scale. The timescale over which fluid particles maintain velocity correlations, describing large-scale turbulence behavior.</p> </li> <li> <p>\\(u'\\): Fluid RMS fluctuation velocity. The root mean square of fluid velocity fluctuations, characterizing turbulence intensity.</p> </li> <li> <p>\\(S\\): Skewness of longitudinal velocity gradient. A measure of asymmetry in velocity gradient fluctuations, significant for small-scale turbulence analysis.</p> </li> <li> <p>\\(Y^f(t)\\): Fluid Lagrangian trajectory. The path traced by a fluid particle as it moves through turbulence.</p> </li> <li> <p>\\(\\tau_T\\): Lagrangian Taylor microscale time. A timescale describing the decay of velocity correlation along a fluid particle trajectory.</p> </li> </ul>"},{"location":"Discussions/Technical/Droplet_Coagulation_Kernel_Ayala2008/#g-gravitational-acceleration","title":"\\(g\\): Gravitational Acceleration","text":"<p>The acceleration due to gravity, approximately 9.81 \\(\\text{m/s}^2\\) on Earth's surface. This force drives droplet sedimentation in turbulent air.</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/","title":"Cloud Droplet Coagulation","text":"<p>In this folder, we discuss the implementation of the geometric collision kernel for cloud droplets as described in Part II by Ayala et al. (2008). Part I provides a detailed explanation of the direct numerical simulations. Where as Part II is the parameterization of the collision kernel for cloud droplets in turbulent flows. The implementation involves calculating the geometric collision rate of sedimenting droplets based on the turbulent flow properties and droplet characteristics.</p> <p>Ayala, O., Rosa, B., Wang, L. P., &amp; Grabowski, W. W. (2008). Effects of turbulence on the geometric collision rate of sedimenting droplets. Part 1. Results from direct numerical simulation. New Journal of Physics, 10. https://doi.org/10.1088/1367-2630/10/7/075015</p> <p>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on the geometric collision rate of sedimenting droplets. Part 2. Theory and parameterization. New Journal of Physics, 10. https://doi.org/10.1088/1367-2630/10/7/075016</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/#geometric-collision-kernel-12","title":"Geometric Collision Kernel \u0393\u2081\u2082","text":"<p>The geometric collision kernel from the paper is outlined in Ayala et al. (2008).</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/#validations","title":"Validations","text":"<p>We validate our implementation of the geometric collision kernel against the results from Ayala et al. (2008) via jupyter notebooks. The notebooks cover comparison graphs and tables from the original paper and Direct Numerical Simulations (DNS) results.</p> <ul> <li>DNS Fluid and Particle Properties</li> <li>DNS Horizontal Velocity</li> <li>DNS Radial Relative Velocity</li> <li>DNS Radial Distribution</li> <li>DNS Kernel Comparison</li> </ul>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/","title":"Droplet Coagulation Kernel Ayala 2008","text":"<p>Here, we discuss the implementation of the geometric collision kernel for cloud droplets as described in Part II by Ayala et al. (2008). Part I provides a detailed explanation of the direct numerical simulations. Where as Part II is the parameterization of the collision kernel for cloud droplets in turbulent flows. The implementation involves calculating the geometric collision rate of sedimenting droplets based on the turbulent flow properties and droplet characteristics.</p> <p>Ayala, O., Rosa, B., Wang, L. P., &amp; Grabowski, W. W. (2008). Effects of turbulence on the geometric collision rate of sedimenting droplets. Part 1. Results from direct numerical simulation. New Journal of Physics, 10. https://doi.org/10.1088/1367-2630/10/7/075015</p> <p>Ayala, O., Rosa, B., &amp; Wang, L. P. (2008). Effects of turbulence on the geometric collision rate of sedimenting droplets. Part 2. Theory and parameterization. New Journal of Physics, 10. https://doi.org/10.1088/1367-2630/10/7/075016</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#12-kernel-description","title":"\u0393\u2081\u2082: Kernel Description","text":"<p>In the parameterization below, the input parameters are:</p> <ul> <li>The radii a\u2081 and a\u2082 of the droplets</li> <li>The water density \u03c1_w</li> <li>Turbulent air flow requires:<ul> <li>The density \u03c1</li> <li>The viscosity \u03bd</li> <li>The turbulence dissipation rate \u03b5</li> <li>The Taylor-microscale Reynolds number R_\u03bb</li> </ul> </li> <li>The gravitational acceleration |g|</li> </ul> <p>The output is the collision kernel \u0393\u2081\u2082</p> <p>This is valid under the conditions when a_k \u226a \u03b7, \u03c1_w \u226b \u03c1, and Sv &gt; 1, the geometric collision kernel can be calculated as follows:</p> <p>\u0393\u2081\u2082 = 2\u03c0R\u00b2 \u27e8|w\u1d63|\u27e9 g\u2081\u2082</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#wr-radial-relative-velocity","title":"\u27e8|w\u1d63|\u27e9: Radial Relative Velocity","text":"<p>There are two options for calculating the radial relative velocity:</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#wr-dodin-2002","title":"\u27e8|w\u1d63|\u27e9 Dodin 2002:","text":"<p>Using the spherical formulation, Dodin and Elperin (2002), decomposed the relative velocity into turbulent and gravity-induced components and assumed that the turbulent component is normally distributed.</p> <p>Dodin Z and Elperin T 2002 Phys. Fluids 14 2921\u201324</p> <p>\u27e8|w\u1d63|\u27e9 = \u221a(2\u2044\u03c0)\u202f\u03c3\u202ff(b)</p> <p>where:</p> <p>f(b) = (\u00bd)\u221a\u03c0\u202f(b + 0.5\u2044b)\u202ferf(b) + (\u00bd)\u202fexp(\u2212b\u00b2)</p> <p>b = [g\u202f|\u03c4\u209a\u2081 \u2212 \u03c4\u209a\u2082|]\u2044[\u221a2\u202f\u03c3]</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#wr-ayala-2008","title":"\u27e8|w\u1d63|\u27e9 Ayala 2008:","text":"<p>Here both particle inertia and gravitational effects are accounted for in the relative velocity calculation. Derived by Ayala et al. (2008) based on DNS results.</p> <p>\u27e8|w\u1d63|\u27e9 = \u221a(2\u2044\u03c0)\u202f\u221a[\u03c3\u00b2 + (\u03c0\u20448)(\u03c4\u209a\u2081 + \u03c4\u209a\u2082)\u00b2\u202f|g|\u00b2]</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#2-direct-numerical-simulation-fit","title":"\u03c3\u00b2: Direct Numerical Simulation Fit","text":"<p>\u03c3\u00b2 = \u27e8(v\u2032^(2))\u00b2\u27e9 + \u27e8(v\u2032^(1))\u00b2\u27e9 \u2212 2\u202f\u27e8v\u2032^(1)\u202fv\u2032^(2)\u27e9</p> <p>The term \u27e8(v\u2032^(2))\u00b2\u27e9 is the square of the RMS fluctuation velocity of droplet 2, and \u27e8v\u2032^(1) v\u2032^(2)\u27e9 is the cross-correlation of the fluctuating velocities of droplets 1 and 2.</p> <p>The square of the RMS fluctuation velocity is given by, for k-th droplet:</p> <p>\u27e8(v\u2032^(k))\u00b2\u27e9 = [u\u2032\u00b2\u202f\u2044\u202f\u03c4\u209a\u2096]\u202f[b\u2081 d\u2081\u202f\u03a8(c\u2081,\u202fe\u2081) \u2212 b\u2081 d\u2082\u202f\u03a8(c\u2081,\u202fe\u2082) \u2212 b\u2082 d\u2081\u202f\u03a8(c\u2082,\u202fe\u2081) + b\u2082 d\u2082\u202f\u03a8(c\u2082,\u202fe\u2082)],</p> <p>Cross term is defined as:</p> <p>\u27e8v\u2032^(1)\u202fv\u2032^(2)\u27e9 = [u\u2032\u00b2\u202ff\u2082(R)]\u2044[\u03c4\u209a\u2081\u202f\u03c4\u209a\u2082]\u202f\u00d7\u202f[b\u2081 d\u2081\u202f\u03a6(c\u2081,\u202fe\u2081) \u2212 b\u2081 d\u2082\u202f\u03a6(c\u2081,\u202fe\u2082) \u2212 b\u2082 d\u2081\u202f\u03a6(c\u2082,\u202fe\u2081) + b\u2082 d\u2082\u202f\u03a6(c\u2082,\u202fe\u2082)].</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#f2r-longitudinal-velocity-correlation","title":"f\u2082(R): Longitudinal velocity correlation","text":"<p>f\u2082(R) = [1\u202f\u2044\u202f2\u221a(1 \u2212 2\u03b2\u00b2)] { \u2003[1 + \u221a(1 \u2212 2\u03b2\u00b2)] \u2003e^[-2R\u2044((1 + \u221a(1 \u2212 2\u03b2\u00b2))\u202fL\u2091)] \u2003\u2212 [1 \u2212 \u221a(1 \u2212 2\u03b2\u00b2)] \u2003e^[-2R\u2044((1 \u2212 \u221a(1 \u2212 2\u03b2\u00b2))\u202fL\u2091)] }</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#b1-b2-c1-c2-d1-d2-e1-e2-definitions","title":"b\u2081, b\u2082, c\u2081, c\u2082, d\u2081, d\u2082, e\u2081, e\u2082: Definitions","text":"<p>b\u2081 = (1 + \u221a(1 \u2212 2z\u00b2)) / (2\u221a(1 \u2212 2z\u00b2))</p> <p>b\u2082 = (1 \u2212 \u221a(1 \u2212 2z\u00b2)) / (2\u221a(1 \u2212 2z\u00b2))</p> <p>c\u2081 = ((1 + \u221a(1 \u2212 2z\u00b2))T_L) / 2</p> <p>c\u2082 = ((1 \u2212 \u221a(1 \u2212 2z\u00b2))T_L) / 2</p> <p>d\u2081 = (1 + \u221a(1 \u2212 2\u03b2\u00b2)) / (2\u221a(1 \u2212 2\u03b2\u00b2))</p> <p>d\u2082 = (1 \u2212 \u221a(1 \u2212 2\u03b2\u00b2)) / (2\u221a(1 \u2212 2\u03b2\u00b2))</p> <p>e\u2081 = ((1 + \u221a(1 \u2212 2\u03b2\u00b2))L_e) / 2</p> <p>e\u2082 = ((1 \u2212 \u221a(1 \u2212 2\u03b2\u00b2))L_e) / 2</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#z-and-definitions","title":"z and \u03b2: Definitions","text":"<p>z = \u03c4_T \u2044 T_L</p> <p>\u03b2 = (\u221a2\u202f\u03bb) \u2044 L_e</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#definitions","title":"\u03a6(\u03b1, \u03c6): Definitions","text":"<p>For the case when taking v\u209a\u2081 &gt; v\u209a\u2082.</p> <p>\u03a6(\u03b1, \u03c6) = term_1 + term_2 + term_3</p> <p>term_1 = {  \u20031 / ( (v\u209a2/\u03c6) \u2212 (1/\u03c4\u209a2) \u2212 (1/\u03b1) ) \u2212  \u20031 / ( (v\u209a1/\u03c6) + (1/\u03c4\u209a1) + (1/\u03b1) )  } \u00d7 [ (v\u209a1 \u2212 v\u209a2) / (2\u03c6 ((v\u209a1 \u2212 (v\u209a2/\u03c6)) + (1/\u03c4\u209a1) + (1/\u03c4\u209a2))\u00b2 ) ]</p> <p>term_2 = {  \u20034 / [ ( (v\u209a2/\u03c6) + (1/\u03c4\u209a2) + (1/\u03b1) )\u00b2 \u2212 ( (v\u209a2/\u03c6) \u2212 (1/\u03c4\u209a2) \u2212 (1/\u03b1) )\u00b2 ]  } \u00d7 [ (v\u209a2) / (2\u03c6 ((1/\u03c4\u209a1) \u2212 (1/\u03b1) + ((1/\u03c4\u209a2) + (1/\u03b1))(v\u209a1/v\u209a2)) ) ]</p> <p>term_3 = {  \u20032\u03c6 / ( (v\u209a1/\u03c6) + (1/\u03c4\u209a1) + (1/\u03b1) ) \u2212  \u20032\u03c6 / ( (v\u209a2/\u03c6) \u2212 (1/\u03c4\u209a2) \u2212 (1/\u03b1) )  } \u00d7 [ 1 / (2\u03c6 ((v\u209a1 \u2212 (v\u209a2/\u03c6)) + (1/\u03c4\u209a1) + (1/\u03c4\u209a2)) ) ]</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#definitions_1","title":"\u03a8(\u03b1, \u03c6): Definitions","text":"<p>For the case when taking for the k-th droplet:</p> <p>\u03a8(\u03b1, \u03c6) = 1 / ( (1/\u03c4\u209a\u2096) + (1/\u03b1) + (v\u209a\u2096/\u03c6) ) \u2212  \u2003(v\u209a\u2096) / (2\u03c6 ((1/\u03c4\u209a\u2096) + (1/\u03b1) + (v\u209a\u2096/\u03c6))\u00b2)</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#g12-radial-distribution-function","title":"g\u2081\u2082: Radial Distribution Function","text":"<p>The radial distribution function is given by:</p> <p>g\u2081\u2082 = ( (\u03b7\u00b2 + r_c\u00b2) / (R\u00b2 + r_c\u00b2) )^(C\u2081/2)</p> <p>Where C\u2081 and r_c are derived based on droplet and turbulence properties.</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#c1-calculation","title":"C\u2081: Calculation","text":"<p>C\u2081 = y(St)\u202f\u2044\u202f[|g|\u202f\u2044\u202f(v_k\u202f\u2044\u202f\u03c4_k)]^(f\u2083(R_\u03bb))</p> <p>y(St) = -0.1988 St^4 + 1.5275 St^3 - 4.2942 St^2 + 5.3406 St</p> <p>f\u2083(R_\u03bb) = 0.1886 exp(20.306 / R_\u03bb)</p> <p>Where:</p> <p>St = max(St\u2081, St\u2082)</p> <p>Since the fitting for y(St) was done for a limited range of St in DNS, it should be set to zero for large St when the function y(St) becomes negative.</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#r_c-expression","title":"r_c: Expression","text":"<p>(r_c / \u03b7)\u00b2 = |St\u2082 - St\u2081| F(a\u2092, R_\u03bb)</p> <p>solving for r_c:</p> <p>r_c = \u03b7 \u221a(|St\u2082 - St\u2081| F(a\u2092, R_\u03bb))</p> <p>where:</p> <p>a\u2092 = a\u2092 + (\u03c0 / 8) (|g| / (v_k / \u03c4_k))\u00b2</p> <p>F(a\u2092, R_\u03bb) = 20.115 (a\u2092 / R_\u03bb)^(\u00bd)</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#derived-parameters","title":"Derived Parameters","text":""},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#_k-kolmogorov-time","title":"\u03c4_k: Kolmogorov Time","text":"<p>The smallest timescale in turbulence where viscous forces dominate:</p> <p>\u03c4_k = \u221a(\u03bd\u2044\u03b5)</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#kolmogorov-length-scale","title":"\u03b7: Kolmogorov Length Scale","text":"<p>The smallest scale in turbulence:</p> <p>\u03b7 = [\u03bd\u00b3\u2044\u03b5]^(\u00bc)</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#v_k-kolmogorov-velocity-scale","title":"v_k: Kolmogorov Velocity Scale","text":"<p>A velocity scale related to the smallest turbulent eddies:</p> <p>v_k = [\u03bd\u202f\u03b5]^(\u00bc)</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#u-fluid-rms-fluctuation-velocity","title":"u\u2032: Fluid RMS Fluctuation Velocity","text":"<p>Quantifies turbulence intensity:</p> <p>u\u2032 = [R_\u03bb^(\u00bd)\u202fv_k]\u2044[15^(\u00bc)]</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#t_l-lagrangian-integral-scale","title":"T_L: Lagrangian Integral Scale","text":"<p>Describes large-scale turbulence:</p> <p>T_L = u'\u00b2 / \u03b5</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#le-eulerian-integral-scale","title":"L\u2091: Eulerian Integral Scale","text":"<p>Length scale for large eddies:</p> <p>L\u2091 = 0.5 u'\u00b3 / \u03b5</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#ao-coefficient","title":"a\u2092: Coefficient","text":"<p>A Reynolds-dependent parameter:</p> <p>a\u2092 = [11 + 7\u202fR_\u03bb]\u202f\u2044\u202f[205 + R_\u03bb]</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#_t-lagrangian-taylor-microscale-time","title":"\u03c4_T: Lagrangian Taylor Microscale Time","text":"<p>Time correlation decay for turbulent trajectories:</p> <p>\u03c4_T = \u03c4_k\u202f\u221a[2\u202fR_\u03bb\u202f\u2044\u202f(15^(\u00bd)\u202fa\u2092)]</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#taylor-microscale","title":"\u03bb: Taylor Microscale","text":"<p>Length scale linked to fluid flow:</p> <p>\u03bb = u'\u202f\u221a[15\u202f\u03bd\u00b2\u202f\u2044\u202f\u03b5]</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#_p-droplet-inertia-time","title":"\u03c4_p: Droplet Inertia Time","text":"<p>Adjusts droplet inertia:</p> <p>\u03c4_p = [2\u20449]\u202f[\u03c1_w\u2044\u03c1]\u202f[a\u00b2\u2044(\u03bd\u202ff(Re_p))]</p> <p>with:</p> <p>f(Re_p) = 1 + 0.15\u202fRe_p^(0.687)</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#v_p-droplet-settling-velocity","title":"v_p: Droplet Settling Velocity","text":"<p>The settling velocity under gravity:</p> <p>v_p = \u03c4_p\u202f|g|</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#re_p-particle-reynolds-number","title":"Re_p: Particle Reynolds Number","text":"<p>Characterizes droplet flow:</p> <p>Re_p = 2 a v_p / \u03bd</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#st-stokes-number","title":"St: Stokes Number","text":"<p>Non-dimensional inertia parameter:</p> <p>St = \u03c4_p\u2044\u03c4_k</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#variable-descriptions","title":"Variable Descriptions","text":"<p>Here are the variables, their definitions.</p>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#droplet-particle-properties","title":"Droplet (Particle) Properties","text":"<ul> <li> <p>a\u2081, a\u2082: Radii of the droplets. These determine size-dependent properties such as droplet inertia and terminal velocity. </p> </li> <li> <p>\u03c1_w: Density of water. The mass per unit volume of water, typically 1000\u202fkg/m\u00b3. It is essential for calculating droplet inertia and terminal velocity.</p> </li> <li> <p>\u03c1: Density of air. The mass per unit volume of air, affecting drag and settling velocity. Typical sea-level values are around 1.225\u202fkg/m\u00b3.</p> </li> <li> <p>\u03bd: Kinematic viscosity. The ratio of dynamic viscosity to fluid density, quantifying resistance to flow.</p> </li> <li> <p>\u03c4_p: Droplet inertial response time. The characteristic time it takes for a droplet to adjust to changes in the surrounding airflow, critical for droplet motion analysis.</p> </li> <li> <p>v\u2032^{(i)}_p: Particle RMS fluctuation velocity. The root mean square of the fluctuating velocity component, representing variability in turbulent flow.</p> </li> <li> <p>f_u: Particle response coefficient. Measures how particles respond to fluid velocity fluctuations, helping quantify their turbulent motion.</p> </li> <li> <p>f(R): Spatial correlation coefficient. Describes the correlation of fluid velocities at two points separated by a distance R, influencing droplet interactions.</p> </li> <li> <p>g\u2081\u2082: Radial distribution function (RDF). A measure of how particle pairs are spatially distributed due to turbulence and gravity.</p> </li> </ul>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#turbulent-flow-properties","title":"Turbulent Flow Properties","text":"<ul> <li> <p>Y\u1da0(t): Fluid Lagrangian trajectory. The path traced by a fluid particle as it moves through turbulence.</p> </li> <li> <p>\u03b5: Turbulence dissipation rate. The rate at which turbulent kinetic energy is converted into thermal energy per unit mass.</p> </li> <li> <p>R_\u03bb: Reynolds number. A dimensionless number that characterizes the flow regime, depending on turbulence intensity and scale.</p> </li> <li> <p>\u03bb_D: Longitudinal Taylor-type microscale. A characteristic length scale of fluid acceleration in turbulence, related to energy dissipation and viscosity.</p> </li> <li> <p>T_L: Lagrangian integral scale. The timescale over which fluid particles maintain velocity correlations, describing large-scale turbulence behavior.</p> </li> <li> <p>u\u2032: Fluid RMS fluctuation velocity. The root mean square of fluid velocity fluctuations, characterizing turbulence intensity.</p> </li> <li> <p>S: Skewness of longitudinal velocity gradient. A measure of asymmetry in velocity gradient fluctuations, significant for small-scale turbulence analysis.</p> </li> <li> <p>Y\u1da0(t): Fluid Lagrangian trajectory. The path traced by a fluid particle as it moves through turbulence.</p> </li> <li> <p>\u03c4\u209c: Lagrangian Taylor microscale time. A timescale describing the decay of velocity correlation along a fluid particle trajectory.</p> </li> </ul>"},{"location":"Discussions/Technical/Cloud_Droplet_Coagulation/Droplet_Coagulation_Kernel_Ayala2008/#g-gravitational-acceleration","title":"g: Gravitational Acceleration","text":"<p>The acceleration due to gravity, approximately 9.81 m/s\u00b2 on Earth's surface. This force drives droplet sedimentation in turbulent air.</p>"},{"location":"How-To-Guides/","title":"How-To Guides","text":"<ul> <li> <p>Setup Particula</p> <p>How to setup python and install <code>Particula</code> via pip.</p> <p> Tutorial</p> </li> <li> <p>Chamber Wall Loss</p> <p>How to simulate experiments for the loss of particles to the chamber walls.</p> <p> Tutorial</p> </li> <li> <p>Equilibria</p> <p>How to simulate aerosol thermodynamic equilibria using the Binary Activity Thermodynamic <code>BAT</code> Model. Useful for water uptake and cloud droplet activation.</p> <p> Tutorial</p> </li> <li> <p>Nucleation</p> <p>How to simulate aerosol nucleation by adding particles during simulations. Showing how to add a nucleation event.</p> <p> Tutorial</p> </li> </ul>"},{"location":"How-To-Guides/Chamber_Wall_Loss/","title":"Index: Chamber Wall Loss","text":"<p>In this example we'll go through the steps for simulation of wall loss in a chamber.</p>"},{"location":"How-To-Guides/Chamber_Wall_Loss/#notebooks","title":"Notebooks","text":"<ul> <li>Wall Loss Forward Simulation</li> </ul>"},{"location":"How-To-Guides/Equilibria/","title":"Index Equilibria","text":""},{"location":"How-To-Guides/Equilibria/#notebooks","title":"Notebooks","text":"<ul> <li>Activity Coefficients</li> <li>Liquid-Liquid Equilibrium</li> </ul>"},{"location":"How-To-Guides/Equilibria/#what-is-equilibria","title":"What is Equilibria?","text":"<p>Equilibria, a fundamental concept in physical chemistry, refers to the state where the concentrations of reactants and products in a chemical reaction remain constant over time. In the context of aerosol science, equilibria are essential in understanding how aerosol particles interact with their environment, particularly with respect to liquid and vapor phases. This balance is crucial in predicting how aerosols behave under different atmospheric conditions.</p>"},{"location":"How-To-Guides/Equilibria/#why-is-equilibria-important","title":"Why is Equilibria Important?","text":"<p>Studying equilibria in aerosol systems is vital for several reasons:</p> <ol> <li> <p>Environmental Impact: Aerosols play a significant role in air quality and climate change. Understanding their equilibrium behavior helps in assessing their environmental impact, such as their role in cloud formation and solar radiation scattering.</p> </li> <li> <p>Health Implications: Aerosols affect human health, especially in terms of respiratory issues. Knowledge of equilibrium states helps in evaluating exposure risks and designing mitigation strategies.</p> </li> <li> <p>Atmospheric Chemistry: Equilibria studies contribute to our understanding of atmospheric chemistry, particularly in the formation and transformation of aerosols.</p> </li> </ol>"},{"location":"How-To-Guides/Equilibria/#how-does-equilibria-relate-to-these-notebooks","title":"How Does Equilibria Relate to These Notebooks?","text":"<p>The notebooks presented here are dedicated to exploring various aspects of equilibria in aerosol science:</p> <ol> <li> <p>Activity Coefficients and Phase Behavior: By calculating activity coefficients, we can predict how different components of aerosols partition between liquid and vapor phases. This is crucial in understanding the composition and concentration of aerosols under varying atmospheric conditions.</p> </li> <li> <p>Liquid-Vapor Equilibrium: The notebook delves into the equilibrium compositions of liquid-vapor mixtures, highlighting the role of relative humidity (RH) in shaping aerosol behavior.</p> </li> <li> <p>Practical Applications: Through examples and simulations, these notebooks provide practical insights into real-world scenarios, enhancing our understanding of aerosols in environmental and health contexts.</p> </li> </ol> <p>Overall, the notebooks serve as an interactive platform to explore and understand the complex yet fascinating world of equilibria in aerosol science. Whether you're a student, researcher, or enthusiast, these materials offer valuable insights into the dynamic equilibrium processes that govern aerosol behavior in our atmosphere.</p>"},{"location":"How-To-Guides/Nucleation/","title":"Nucleation","text":"<p>How to implement a custom nucleation model, and manually add particles to the simulation.</p>"},{"location":"How-To-Guides/Nucleation/#notebooks","title":"Notebooks","text":"<ul> <li>Single Species</li> </ul>"},{"location":"How-To-Guides/Setup_Particula/","title":"Index: Setup Particula","text":""},{"location":"How-To-Guides/Setup_Particula/#getting-started-with-python","title":"Getting Started with Python","text":"<p>If you are new to Python, it's highly recommended to go through an introductory course to build a solid foundation. \"Python for Everybody\" is an excellent free resource that covers the basics and beyond:</p> <ul> <li>Access the course and materials at Python for Everybody.</li> </ul>"},{"location":"How-To-Guides/Setup_Particula/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":"<p>Step 1: Install Visual Studio Code (VSCode)</p> <p>To edit and manage your code efficiently, download and install Visual Studio Code, a popular code editor that supports Python and many other languages.</p> <ul> <li>Visit the Visual Studio Code website to download the installer for Windows.</li> <li>Follow the installation prompts to install VSCode on your machine.</li> <li>Once installed, launch VSCode to configure it for Python development.</li> </ul> <p>Step 2: Install Miniconda</p> <p>Install Miniconda, which includes Conda, a powerful package and environment manager. This tool will help you manage different project dependencies separately and efficiently.</p> <ul> <li>Download Miniconda for Windows from Miniconda's website.</li> <li>Follow the installation instructions to install Miniconda on your system.</li> </ul> <p>Step 3: Install Git</p> <p>Install Git to manage your code repositories effectively. Git is a version control system that lets you track changes, revert to previous stages, and collaborate on projects with others.</p> <ul> <li>Download Git from Git's official website.</li> <li>Run the downloaded file to start the installation.</li> <li>During the installation, choose your preferred editor for Git, and make sure to select \"Git from the command line and also from 3<sup>rd</sup>-party software\" to ensure it integrates well with your system's command prompt.</li> <li>Complete the installation by following the on-screen instructions.</li> </ul> <p>Once installed, you can verify the installation by opening a command prompt or terminal and typing <code>git --version</code>, which should display the installed version of Git.</p> <p>Step 4: Setup Proxy</p> <p>If you are behind a proxy, you may need to configure your proxy settings to allow Conda, Pip, git, and VScode to access the internet.</p> <p>Step 5: Create a New Python Environment </p> <p>Avoid conflicts with other development projects by creating an isolated Python environment. Here\u2019s how:</p> <ul> <li>Open VSCode, then open the integrated terminal (<code>Terminal &gt; New Terminal</code>).</li> <li>Be sure to select <code>cmd</code> for command prompt.</li> <li>Use the following Conda command to create an environment named <code>analysisV1</code> with Python 3.11:</li> </ul> <pre><code>conda create --name analysisV1 python=3.12\n</code></pre> <p>Step 6: Activate the Environment </p> <p>Ensure you\u2019re working within the context of your new environment: - In the VSCode terminal, activate your environment by running:</p> <pre><code>conda activate analysisV1\n</code></pre>"},{"location":"How-To-Guides/Setup_Particula/#installing-the-project","title":"Installing the Project","text":"<p>Step 7: Install the Project</p> <p>Now, install the <code>Particula</code> using pip in your activated environment, use one of the following methods:</p>"},{"location":"How-To-Guides/Setup_Particula/#install-the-pip-package","title":"Install the pip package","text":"<pre><code>pip install particula\n</code></pre>"},{"location":"How-To-Guides/Setup_Particula/#or-install-the-main-repository-or-any-forked-repository","title":"or Install the main repository or any forked repository","text":"<pre><code>pip install git+https://github.com/uncscode/particula.git\n</code></pre>"},{"location":"Tutorials/","title":"Tutorials","text":"<ul> <li> <p>Aerosol</p> <p>Learn what goes into the Aerosol object and why it is used.</p> <p> Tutorial</p> </li> <li> <p>Dynamics</p> <p>Dynamics is a collection of classes that processes <code>Aerosol</code> objects, to perform coagulation, condensation, and other processes.</p> <p> Tutorial</p> </li> <li> <p>Gas Phase</p> <p>Learn how to represent the Gas Phase, including vapor pressures and atmospheric properties.</p> <p> Tutorial</p> </li> <li> <p>Particle Phase</p> <p>Learn about how to represent the Particle Phase, including different particle representations; radius bins, speciated mass bins, and particle resolved.</p> <p> Tutorial</p> </li> </ul>"},{"location":"Tutorials/Aerosol/","title":"Index: Aerosols","text":""},{"location":"Tutorials/Aerosol/#notebooks","title":"Notebooks","text":"<ul> <li>Aerosol Tutorial</li> </ul>"},{"location":"Tutorials/Dynamics/","title":"Dynamics","text":"<p>Here we collect tutorials on the dynamic processes that can affect aerosol populations,  including condensation, coagulation, and special customizations.</p>"},{"location":"Tutorials/Dynamics/#condensation","title":"Condensation","text":"<p>These notebooks demonstrate bin-based and fully resolved approaches to modeling condensation.</p> <ul> <li>Condensation 1: Bins</li> <li>Condensation 2: Masses Binned</li> <li>Condensation 3: Masses Resolved</li> </ul>"},{"location":"Tutorials/Dynamics/#coagulation","title":"Coagulation","text":"<ul> <li>Coagulation 1: PMF Pattern \u2013 Shows probability mass function approach.</li> <li>Coagulation 3: Particle Resolved \u2013 Demonstrates a particle-resolved approach.</li> <li>Coagulation 4: Methods Compared \u2013 Compares multiple coagulation strategies.</li> </ul>"},{"location":"Tutorials/Dynamics/#functional","title":"Functional","text":"<p>These illustrate functional approaches to coagulation, comparing PMF- and PDF-based methods against particle-resolved methods.</p> <ul> <li>Coagulation 1: Probability Mass Function</li> <li>Coagulation Tutorial: Basic 2-PDF</li> <li>Coagulation Tutorial: Basic 3-Compared</li> </ul>"},{"location":"Tutorials/Dynamics/#charge","title":"Charge","text":"<p>Here we show how to include charge effects in the coagulation kernel:</p> <ul> <li>Coagulation Charges via functions</li> <li>Coagulation Charges via objects</li> </ul>"},{"location":"Tutorials/Dynamics/#customization","title":"Customization","text":"<ul> <li>Adding Particles During Simulation \u2013    Demonstrates customizing the simulation by injecting new particles.</li> </ul>"},{"location":"Tutorials/Gas_Phase/","title":"Gas Phase","text":""},{"location":"Tutorials/Gas_Phase/#notebooks","title":"Notebooks","text":"<ul> <li>Vapor Pressure Tutorial</li> <li>Gas Species Tutorial</li> <li>Atmosphere Tutorial</li> </ul>"},{"location":"Tutorials/Particle_Phase/","title":"Index: Particle Phase","text":""},{"location":"Tutorials/Particle_Phase/#notebooks","title":"Notebooks","text":"<ul> <li>Aerosol Surface Tutorial</li> <li>Activity Tutorial</li> <li>Distribution Tutorial</li> <li>Types of Distributions Tutorial</li> <li>Particle Representation Tutorial</li> </ul>"},{"location":"Tutorials/Particle_Phase/#functional-representation","title":"Functional Representation","text":"<ul> <li>Activity Functions</li> </ul>"},{"location":"contribute/","title":"Contribute","text":"<p>Here we have summary and links to the different ways you can contribute to the project.</p>"},{"location":"contribute/#contents","title":"Contents","text":"<ul> <li>Code of Conduct</li> <li>Contributing Guidelines</li> <li>Style Guide (Google)</li> </ul>"},{"location":"contribute/CODE_OF_CONDUCT/","title":"Code of Conduct","text":""},{"location":"contribute/CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"contribute/CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"contribute/CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"contribute/CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"contribute/CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at . All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"contribute/CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"contribute/CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"contribute/CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"contribute/CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"contribute/CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"contribute/CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contribute/CONTRIBUTING/","title":"Contributor Guidelines","text":"<p>First of all, thank you for considering contributing to this project! While we have specific guidelines below, we also encourage you to contribute to the best of your ability and not let these guidelines hinder your productivity and creativity. We are open to any contribution, and we are always looking for new ways to improve the project. We are also open to any feedback, however small or large, and in any area (from documentation to calculation to presentation).</p> <p>The cycle of contribution goes something like this:</p> <ol> <li> <p>See if there is an issue open that you can help with. If there is not one, please open one.</p> </li> <li> <p>Create a personal fork of this repository; and in it, create a branch (from <code>uncscode:main</code>) with the <code>issue000</code> in the name of the branch (e.g. <code>username/issue000</code> or <code>issue000</code>), where <code>000</code> is the number of the issue from step 1.</p> </li> <li> <p>Set up an appropriate environment:</p> <ul> <li>an easy option is just to use the <code>.devcontainer</code> in root</li> <li>another option is to either <code>pip install</code> or <code>conda install</code> the packages required for development in <code>requirements.txt</code> in root.</li> </ul> </li> <li> <p>Write your code in the branch. This usually includes the following.</p> <p>a. Code to be implemented.</p> <p>b. Documentation associated with added code in a.</p> <p>c. Tests associated with added code in a.</p> <p>d. Ideally, you'd also add a Jupyter notebook to showcase your work (if applicable).</p> </li> <li> <p>Optionally, you can run standard linting and testing calls on your code locally to make sure it works as expected. This can be done in several ways, for example the <code>pylint</code>, <code>flake8</code>, and <code>pytest</code> calls below. These calls will be run once you submit your pull request.</p> </li> <li> <p>Submit a pull request to the <code>main</code> branch of this repository. Upon submission, standard automated tests will be run on your code.</p> </li> <li> <p>If you don't hear back from maintainers, feel free to mention one of us directly in the comments of the PR. Expect to have speedy feedback and help from us to finalize the PR.</p> </li> </ol> <pre><code>pylint $(find particula/ -name \"*.py\" | xargs)\n</code></pre> <pre><code>flake8 particula/ --count\n</code></pre> <pre><code>pytest particula/\n</code></pre> <p>More information about contributing to this project can be found below. We are excited and looking forward to your contribution!</p>"},{"location":"contribute/CONTRIBUTING/#github","title":"GitHub","text":"<p>We use GitHub to develop <code>particula</code> completely in the open. Our repository is available here: https://uncscode.github.io/particula/. There are several ways to use GitHub: through the command line via <code>git</code> and/or <code>gh</code>, through the web interface and/or the GitHub web editor, or through an IDE like PyCharm or a code editor like Visual Studio Code. In general, we recommend that you fork our repository, that you work with VS Code, and that submit a pull request based on an issue. If any of these sound unfamiliar or if you need help, please see more information below and feel free to contact us directly to discuss options. We look forward to getting you started and up to speed on this project with us!</p> <p>Links: https://docs.github.com/en/get-started</p>"},{"location":"contribute/CONTRIBUTING/#vs-code","title":"VS Code","text":"<p>Visual Studio Code is a free and open-source code editor for writing code and it has a rich ecosystem of extensions that allow you to write code in a variety of languages with a lot of helpful features and tools.</p> <p>Links: https://code.visualstudio.com/</p>"},{"location":"contribute/CONTRIBUTING/#python-code-style","title":"Python code style","text":"<p>We follow the Google's Python style guide. We encourage you to follow it too, but we also encourage you to contribute to the best of your ability and not let these guidelines hinder your productivity and creativity.</p> <p>Links: https://google.github.io/styleguide/pyguide.html</p>"},{"location":"contribute/CONTRIBUTING/#running-particula-locally","title":"Running <code>particula</code> locally","text":"<p>Once you are in the root directory, you will be able to import <code>particula</code> as a package/model and thus all documentation on website applies. You must be in the root directory.</p>"},{"location":"contribute/CONTRIBUTING/#writing-tests","title":"Writing tests","text":"<p>It is essential that every piece of code has an associated test. This is a good way to ensure that the code is working as intended. It also ensures that the code is not broken and that the code is not too complex. However small or big, a test is always required.</p>"},{"location":"contribute/CONTRIBUTING/#running-testinglinting-locally","title":"Running testing/linting locally","text":"<p>We use <code>pytest</code>, <code>pylint</code>, and <code>flake8</code> to run tests and linting. The command below can be run in the root directory like you'd run the package above.</p> <pre><code>pylint $(find particula/ -name \"*.py\" | xargs)\n</code></pre> <pre><code>flake8 particula/ --count\n</code></pre> <pre><code>pytest particula/\n</code></pre>"},{"location":"contribute/CONTRIBUTING/#building-particula-locally","title":"Building <code>particula</code> locally","text":"<p>To build <code>particula</code> locally, you must be in the root directory. You have two options, depending on your usage case.</p> <ol> <li>You can use <code>python -m build</code> to build the package wheels locally (note: you will need to install <code>build</code> too, via <code>pip install build</code>).</li> <li>You can build the conda recipe available at https://github.com/conda-forge/particula-feedstock either via <code>python build-locally.py</code> in the root of <code>particula-feedstock</code> or via <code>conda build recipe</code> (equivalently, but faster, <code>mamba build recipe</code>). For the latter, you will need to have <code>conda-build</code> installed (for <code>conda build</code> to work) or <code>boa</code> (for <code>mamba build</code> to work). In either case, you can install package with conda via, <code>conda install conda-build</code> or <code>mamba install boa</code>.</li> </ol> <p>Links: https://packaging.python.org/en/latest/tutorials/packaging-projects/ and https://docs.conda.io/projects/conda-build/en/latest/user-guide/index.html</p>"},{"location":"contribute/CONTRIBUTING/#documentation-writing","title":"Documentation writing","text":"<p>We prefer that the tutorials are written in the form of Jupyter notebooks after the package is released and published. A convenient option is using Google's Colaboratory to write the notebooks.</p> <p>Links: https://colab.research.google.com/</p>"},{"location":"contribute/CONTRIBUTING/#more-information","title":"More information","text":"<p>We will update this regularly with more information, but in the meanwhile, please feel free to contact us directly on GitHub.</p>"},{"location":"development/","title":"Particula Development","text":""},{"location":"development/#offline-documentation-and-large-language-models","title":"Offline Documentation and Large Language Models","text":""},{"location":"development/#continuous-particle-pdf-and-pmf","title":"Continuous Particle PDF and PMF","text":"<ul> <li> Bin Remapping after condensation and evaporation is needed, or dr/dt method</li> </ul>"},{"location":"development/#activity-coefficients","title":"Activity Coefficients","text":"<ul> <li> BAT model needs to be added to activity coefficient calculation.</li> </ul>"},{"location":"development/#guides-for-new-users","title":"Guides for New Users","text":"<ul> <li> Improved Documentation for new users</li> </ul>"},{"location":"development/#beta-features","title":"Beta Features","text":"<p>For beta features, find them at the Particula-Beta</p>"},{"location":"development/#guide-for-developers","title":"Guide for Developers","text":""},{"location":"development/single_page_reference/","title":"Single page reference","text":""},{"location":"development/single_page_reference/#single-page-reference","title":"Single Page Reference","text":"<p>Our documentation build process is designed to deliver consistent, accessible, and high-quality resources with every pull request. When a pull request is made, the gh-pages branch is updated and in addition four markdown files are compiled. This files consolidates all documentation, including API references, discussion forums, how-to guides, and tutorials. It is available for download from the pages branch: gh-pages/development/single_page_reference.</p>"},{"location":"development/single_page_reference/#key-use-cases","title":"Key Use Cases","text":""},{"location":"development/single_page_reference/#1-offline-documentation","title":"1. Offline Documentation","text":"<ul> <li>Accessibility: Users can download the comprehensive markdown file and access it without an internet connection.</li> <li>Efficient Navigation: The single file format allows for complex keyword searches, enabling users to quickly locate the precise information they need without navigating through multiple documents.</li> <li>Up-to-Date Information: With each pull request, the documentation is refreshed, ensuring that the offline version always reflects the latest changes and improvements.</li> </ul>"},{"location":"development/single_page_reference/#2-integration-with-large-language-models","title":"2. Integration with Large Language Models","text":"<ul> <li>Retrieval Augmented Generation: The consolidated markdown file serves as the foundation for building a vector database that powers retrieval augmented generation systems. By converting the indexed content into embeddings, large language models can tap into a structured and comprehensive knowledge base, resulting in more precise and contextually relevant outputs.</li> <li>For example, the Particula Assistant leverages this approach by using the single-page reference to deliver detailed information and guidance on aerosol particle simulation. This tool, hosted by OpenAI, requires a ChatGPT Plus account, and it exemplifies how specialized documentation can enhance the performance of advanced language models.</li> </ul>"},{"location":"development/single_page_reference/#3-code-development","title":"3. Code Development","text":"<ul> <li>Enhanced Context for Code Assistants: The rich content within the markdown file\u2014including API details, guides, and tutorials\u2014provides a valuable context for code assistants like GitHub Copilot, Kite, and CodeWhisperer. This helps these tools generate more precise code completions and contextual recommendations.</li> <li>Improved Developer Workflow: By providing a comprehensive and current reference, the file assists code assistants in delivering accurate suggestions.</li> </ul>"}]}