PARTICULA ARCHITECTURE - QUICK REFERENCE
=========================================

PROJECT SCOPE:
- Aerosol particle simulator for atmospheric science research
- 10,000+ lines of Python, ~200 test files
- MIT License, Python 3.9+, numpy/scipy based

CORE DESIGN PATTERN:
    Strategy Pattern + Builder Pattern + Factory Pattern + Process Chain

MAIN COMPONENTS:

1. AEROSOL (Center Hub)
   └─ Atmosphere (Gas Phase)
      ├─ temperature, pressure
      ├─ partitioning species (can transfer to particles)
      └─ gas-only species (inert)
   
   └─ ParticleRepresentation (Particle Phase)
      ├─ strategy: Distribution type (mass-based, radii-based, etc.)
      ├─ activity: Activity coefficient model (Gibbs, BAT, etc.)
      ├─ surface: Surface tension/Kelvin effect model
      ├─ distribution: Size/mass bins
      ├─ density, concentration, charge
      └─ volume (for particle-resolved sims)

2. PROCESSES (Chainable Runnables)
   ├─ MassCondensation - vapor condensation/evaporation
   ├─ Coagulation - particle collision & coalescence
   ├─ WallLoss - chamber wall deposition
   └─ Dilution - flow rate dilution
   
   Use: process1 | process2 | process3.execute(aerosol, time_step)

3. STRATEGIES (Pluggable Physics)
   ├─ Distribution Strategies: mass/radii-based moving bin, particle-resolved
   ├─ Activity Strategies: Gibbs mixing, BAT model
   ├─ Surface Strategies: Surface tension, Kelvin effect
   ├─ Coagulation Strategies: Brownian, charged, sedimentation, turbulent DNS
   ├─ Condensation Strategies: Isothermal mass transfer
   └─ Vapor Pressure Strategies: Antoine, constant, lookup table

4. BUILDERS (Fluent Constructors)
   All use fluent interface with method chaining:
   
   obj = (MyBuilder()
          .set_parameter1(value, "units")
          .set_parameter2(value, "units")
          .build())
   
   Features:
   - Automatic unit conversion
   - Parameter validation
   - Method chaining support
   - 20+ mixin classes for reusable setters

5. FACTORIES (Configuration-Driven)
   Takes strategy type string + parameters dict → strategy instance
   Enables JSON/YAML config-based simulation setup

KEY FILES:
- /particula/abc_builder.py - Builder base class
- /particula/builder_mixin.py - 20+ unit conversion mixins (769 lines!)
- /particula/aerosol.py - Central Aerosol container
- /particula/particles/representation.py - Particle state (553 lines)
- /particula/dynamics/particle_process.py - Main processes (222 lines)
- /particula/gas/atmosphere.py - Gas phase
- /particula/util/constants.py - Physics constants (scipy-based)
- /particula/util/convert_units.py - Unit conversion system

TESTING:
- 200+ test files co-located with source (*_test.py)
- pytest framework
- Integration tests in /integration_tests/
- Linting: ruff (80-char lines, Google docstrings)

DEVELOPMENT:
- Build system: Flit (dynamic versioning)
- Main branch: stable releases
- CI/CD: GitHub Actions (test, lint, docs, PyPI publish)
- Docs: MkDocs Material theme on GitHub Pages

USAGE PATTERN:
1. Create GasSpecies with builders
2. Build Atmosphere
3. Build ParticleRepresentation (choose strategies for distribution/activity/surface)
4. Create Aerosol(atmosphere, particles)
5. Create process (Condensation, Coagulation, etc.)
6. Execute: aerosol = process.execute(aerosol, time_step=10.0)

EXTENSION POINTS:
- New process: inherit from RunnableABC
- New physics model: inherit from Strategy ABC
- New builder: use BuilderABC + mixins
- New factory: inherit from StrategyFactoryABC

UNIT SYSTEM:
- All internal calculations in SI units
- Builders accept ANY units and auto-convert
- Constants from scipy.constants
